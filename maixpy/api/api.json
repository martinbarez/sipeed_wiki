{
    "type": "top_module",
    "members": {
        "maix": {
            "type": "module",
            "doc": {
                "breif": "MaixPy C/C++ API from MaixCDK"
            },
            "members": {
                "err": {
                    "type": "module",
                    "doc": {
                        "brief": "maix.err module"
                    },
                    "members": {
                        "Err": {
                            "type": "enum",
                            "name": "Err",
                            "doc": {
                                "brief": "Maix Error code",
                                "maixpy": "maix.err.Err",
                                "py_doc": "Maix Error code"
                            },
                            "values": [
                                [
                                    "ERR_NONE",
                                    "0",
                                    "No error"
                                ],
                                [
                                    "ERR_ARGS",
                                    "",
                                    "Invalid arguments"
                                ],
                                [
                                    "ERR_NO_MEM",
                                    "",
                                    "No memory"
                                ],
                                [
                                    "ERR_NOT_IMPL",
                                    "",
                                    "Not implemented"
                                ],
                                [
                                    "ERR_NOT_READY",
                                    "",
                                    "Not ready"
                                ],
                                [
                                    "ERR_NOT_INIT",
                                    "",
                                    "Not initialized"
                                ],
                                [
                                    "ERR_NOT_OPEN",
                                    "",
                                    "Not opened"
                                ],
                                [
                                    "ERR_NOT_PERMIT",
                                    "",
                                    "Not permitted"
                                ],
                                [
                                    "ERR_REOPEN",
                                    "",
                                    "Re-open"
                                ],
                                [
                                    "ERR_BUSY",
                                    "",
                                    "Busy"
                                ],
                                [
                                    "ERR_READ",
                                    "",
                                    "Read error"
                                ],
                                [
                                    "ERR_WRITE",
                                    "",
                                    "Write error"
                                ],
                                [
                                    "ERR_TIMEOUT",
                                    "",
                                    "Timeout"
                                ],
                                [
                                    "ERR_RUNTIME",
                                    "",
                                    "Runtime error"
                                ],
                                [
                                    "ERR_IO",
                                    "",
                                    "IO error"
                                ],
                                [
                                    "ERR_NOT_FOUND",
                                    "",
                                    "Not found"
                                ],
                                [
                                    "ERR_ALREAY_EXIST",
                                    "",
                                    "Already exist"
                                ],
                                [
                                    "ERR_BUFF_FULL",
                                    "",
                                    "Buffer full"
                                ],
                                [
                                    "ERR_BUFF_EMPTY",
                                    "",
                                    "Buffer empty"
                                ],
                                [
                                    "ERR_CANCEL",
                                    "",
                                    "Cancel"
                                ],
                                [
                                    "ERR_OVERFLOW",
                                    "",
                                    "Overflow"
                                ],
                                [
                                    "ERR_MAX",
                                    "",
                                    ""
                                ]
                            ],
                            "def": "enum Err\n    {\n        // !!! fixed error code, DO NOT change number already defined, only append new error code\n        ERR_NONE        = 0,   // No error\n        ERR_ARGS           ,   // Invalid arguments\n        ERR_NO_MEM         ,   // No memory\n        ERR_NOT_IMPL       ,   // Not implemented\n        ERR_NOT_READY      ,   // Not ready\n        ERR_NOT_INIT       ,   // Not initialized\n        ERR_NOT_OPEN       ,   // Not opened\n        ERR_NOT_PERMIT     ,   // Not permitted\n        ERR_REOPEN         ,   // Re-open\n        ERR_BUSY           ,   // Busy\n        ERR_READ           ,   // Read error\n        ERR_WRITE          ,   // Write error\n        ERR_TIMEOUT        ,   // Timeout\n        ERR_RUNTIME        ,   // Runtime error\n        ERR_IO             ,   // IO error\n        ERR_NOT_FOUND      ,   // Not found\n        ERR_ALREAY_EXIST   ,   // Already exist\n        ERR_BUFF_FULL      ,   // Buffer full\n        ERR_BUFF_EMPTY     ,   // Buffer empty\n        ERR_CANCEL         ,   // Cancel\n        ERR_OVERFLOW       ,   // Overflow\n        ERR_MAX,\n    }"
                        },
                        "Exception": {
                            "type": "class",
                            "name": "Exception",
                            "doc": {
                                "brief": "Maix Exception",
                                "maixpy": "maix.err.Exception",
                                "py_doc": "Maix Exception"
                            },
                            "members": {},
                            "def": "class Exception : public std::exception"
                        },
                        "to_str": {
                            "type": "func",
                            "name": "to_str",
                            "doc": {
                                "brief": "Error code to string",
                                "param": {
                                    "e": "direction [in], error code, err::Err type"
                                },
                                "return": "error string",
                                "maixpy": "maix.err.to_str",
                                "py_doc": "Error code to string\n\nArgs:\n  - e: direction [in], error code, err::Err type\n\n\nReturns: error string\n"
                            },
                            "args": [
                                [
                                    "err::Err",
                                    "e",
                                    null
                                ]
                            ],
                            "ret_type": "std::string",
                            "static": false,
                            "def": "std::string to_str(err::Err e)"
                        },
                        "get_error": {
                            "type": "func",
                            "name": "get_error",
                            "doc": {
                                "brief": "get last error string",
                                "return": "error string",
                                "maixpy": "maix.err.get_error",
                                "py_doc": "get last error string\n\nReturns: error string\n"
                            },
                            "args": [],
                            "ret_type": "std::string&",
                            "static": false,
                            "def": "std::string& get_error()"
                        },
                        "set_error": {
                            "type": "func",
                            "name": "set_error",
                            "doc": {
                                "brief": "set last error string",
                                "param": {
                                    "str": "direction [in], error string"
                                },
                                "maixpy": "maix.err.set_error",
                                "py_doc": "set last error string\n\nArgs:\n  - str: direction [in], error string\n"
                            },
                            "args": [
                                [
                                    "const std::string &",
                                    "str",
                                    null
                                ]
                            ],
                            "ret_type": "void",
                            "static": false,
                            "def": "void set_error(const std::string &str)"
                        },
                        "check_raise": {
                            "type": "func",
                            "name": "check_raise",
                            "doc": {
                                "brief": "Check error code, if not ERR_NONE, raise err.Exception",
                                "param": {
                                    "e": "direction [in], error code, err::Err type",
                                    "msg": "direction [in], error message"
                                },
                                "maixpy": "maix.err.check_raise",
                                "py_doc": "Check error code, if not ERR_NONE, raise err.Exception\n\nArgs:\n  - e: direction [in], error code, err::Err type\n  - msg: direction [in], error message\n"
                            },
                            "args": [
                                [
                                    "err::Err",
                                    "e",
                                    null
                                ],
                                [
                                    "const std::string &",
                                    "msg",
                                    "\"\""
                                ]
                            ],
                            "ret_type": "void",
                            "static": false,
                            "def": "void check_raise(err::Err e, const std::string &msg = \"\")"
                        },
                        "check_bool_raise": {
                            "type": "func",
                            "name": "check_bool_raise",
                            "doc": {
                                "brief": "Check condition, if false, raise err.Exception",
                                "param": {
                                    "ok": "direction [in], condition, if true, do nothing, if false, raise err.Exception",
                                    "msg": "direction [in], error message"
                                },
                                "maixpy": "maix.err.check_bool_raise",
                                "py_doc": "Check condition, if false, raise err.Exception\n\nArgs:\n  - ok: direction [in], condition, if true, do nothing, if false, raise err.Exception\n  - msg: direction [in], error message\n"
                            },
                            "args": [
                                [
                                    "bool",
                                    "ok",
                                    null
                                ],
                                [
                                    "const std::string &",
                                    "msg",
                                    "\"\""
                                ]
                            ],
                            "ret_type": "void",
                            "static": false,
                            "def": "void check_bool_raise(bool ok, const std::string &msg = \"\")"
                        },
                        "check_null_raise": {
                            "type": "func",
                            "name": "check_null_raise",
                            "doc": {
                                "brief": "Check NULL pointer, if NULL, raise exception",
                                "param": {
                                    "ptr": "direction [in], pointer",
                                    "msg": "direction [in], error message"
                                },
                                "maixpy": "maix.err.check_null_raise",
                                "py_doc": "Check NULL pointer, if NULL, raise exception\n\nArgs:\n  - ptr: direction [in], pointer\n  - msg: direction [in], error message\n"
                            },
                            "args": [
                                [
                                    "void *",
                                    "ptr",
                                    null
                                ],
                                [
                                    "const std::string &",
                                    "msg",
                                    "\"\""
                                ]
                            ],
                            "ret_type": "void",
                            "static": false,
                            "def": "void check_null_raise(void *ptr, const std::string &msg = \"\")"
                        }
                    },
                    "auto_add": true
                },
                "tensor": {
                    "type": "module",
                    "doc": {
                        "brief": "maix.tensor module"
                    },
                    "members": {
                        "DType": {
                            "type": "enum",
                            "name": "DType",
                            "doc": {
                                "brief": "Tensor data types",
                                "maixpy": "maix.tensor.DType",
                                "py_doc": "Tensor data types"
                            },
                            "values": [
                                [
                                    "UINT8",
                                    "0",
                                    ""
                                ],
                                [
                                    "INT8",
                                    "",
                                    ""
                                ],
                                [
                                    "UINT16",
                                    "",
                                    ""
                                ],
                                [
                                    "INT16",
                                    "",
                                    ""
                                ],
                                [
                                    "UINT32",
                                    "",
                                    ""
                                ],
                                [
                                    "INT32",
                                    "",
                                    ""
                                ],
                                [
                                    "FLOAT16",
                                    "",
                                    ""
                                ],
                                [
                                    "FLOAT32",
                                    "",
                                    ""
                                ],
                                [
                                    "FLOAT64",
                                    "",
                                    ""
                                ],
                                [
                                    "BOOL",
                                    "",
                                    ""
                                ],
                                [
                                    "DTYPE_MAX",
                                    "",
                                    ""
                                ]
                            ],
                            "def": "enum DType\n        {\n            UINT8 = 0,\n            INT8,\n            UINT16,\n            INT16,\n            UINT32,\n            INT32,\n            FLOAT16,\n            FLOAT32,\n            FLOAT64,\n            BOOL,\n            // STRING,\n            // OBJECT,\n            DTYPE_MAX\n        }"
                        },
                        "dtype_size": {
                            "type": "var",
                            "name": "",
                            "doc": {
                                "brief": "Tensor data type size in bytes",
                                "attention": "It's a copy of this variable in MaixPy,\nso change it in C++ (e.g. update var in hello function) will not take effect the var inMaixPy.\nSo we add const for this var to avoid this mistake.",
                                "maixpy": "maix.tensor.dtype_size",
                                "py_doc": "Tensor data type size in bytes"
                            },
                            "value": "{\n            1, // UINT8\n            1, // INT8\n            2, // UINT16\n            2, // INT16\n            4, // UINT32\n            4, // INT32\n            2, // FLOAT16\n            4, // FLOAT32\n            8, // FLOAT64\n            1, // BOOL\n            // 1, // STRING\n            // 1, // OBJECT\n            0\n        }",
                            "static": false,
                            "readonly": true,
                            "def": "const std::vector<int> dtype_size = {\n            1, // UINT8\n            1, // INT8\n            2, // UINT16\n            2, // INT16\n            4, // UINT32\n            4, // INT32\n            2, // FLOAT16\n            4, // FLOAT32\n            8, // FLOAT64\n            1, // BOOL\n            // 1, // STRING\n            // 1, // OBJECT\n            0\n        }"
                        },
                        "dtype_name": {
                            "type": "var",
                            "name": "",
                            "doc": {
                                "brief": "Tensor data type name",
                                "maixpy": "maix.tensor.dtype_name",
                                "py_doc": "Tensor data type name"
                            },
                            "value": "{\n            \"uint8\",\n            \"int8\",\n            \"uint16\",\n            \"int16\",\n            \"uint32\",\n            \"int32\",\n            \"float16\",\n            \"float32\",\n            \"float64\",\n            \"bool\",\n            // \"string\",\n            // \"object\",\n            \"invalid\"\n        }",
                            "static": false,
                            "readonly": true,
                            "def": "const std::vector<std::string> dtype_name = {\n            \"uint8\",\n            \"int8\",\n            \"uint16\",\n            \"int16\",\n            \"uint32\",\n            \"int32\",\n            \"float16\",\n            \"float32\",\n            \"float64\",\n            \"bool\",\n            // \"string\",\n            // \"object\",\n            \"invalid\"\n        }"
                        },
                        "Tensor": {
                            "type": "class",
                            "name": "Tensor",
                            "doc": {
                                "brief": "Tensor class",
                                "maixpy": "maix.tensor.Tensor",
                                "py_doc": "Tensor class"
                            },
                            "members": {
                                "__init__": {
                                    "type": "func",
                                    "name": "Tensor",
                                    "doc": {
                                        "brief": "Tensor constructor",
                                        "param": {
                                            "shape": "tensor shape, a int list",
                                            "dtype": "tensor element data type, see DType of this module",
                                            "data": "pointer to data content, can be nullptr, it will automatically alloc memory\nand detroy it when this object is destroyed"
                                        },
                                        "maixpy": "maix.tensor.Tensor.__init__",
                                        "py_doc": "Tensor constructor\n\nArgs:\n  - shape: tensor shape, a int list\n  - dtype: tensor element data type, see DType of this module\n  - data: pointer to data content, can be nullptr, it will automatically alloc memory\nand detroy it when this object is destroyed\n"
                                    },
                                    "args": [
                                        [
                                            "std::vector<int>",
                                            "shape",
                                            null
                                        ],
                                        [
                                            "tensor::DType",
                                            "dtype",
                                            null
                                        ],
                                        [
                                            "void *",
                                            "data",
                                            "nullptr"
                                        ]
                                    ],
                                    "ret_type": null,
                                    "static": false,
                                    "def": "Tensor(std::vector<int> shape, tensor::DType dtype, void *data = nullptr)"
                                },
                                "to_str": {
                                    "type": "func",
                                    "name": "to_str",
                                    "doc": {
                                        "brief": "To string",
                                        "maixpy": "maix.tensor.Tensor.to_str",
                                        "py_doc": "To string"
                                    },
                                    "args": [],
                                    "ret_type": "std::string",
                                    "static": false,
                                    "def": "std::string to_str()"
                                },
                                "__str__": {
                                    "type": "func",
                                    "name": "__str__",
                                    "doc": {
                                        "brief": "To string",
                                        "maixpy": "maix.tensor.Tensor.__str__",
                                        "py_doc": "To string"
                                    },
                                    "args": [],
                                    "ret_type": "std::string",
                                    "static": false,
                                    "def": "std::string __str__()"
                                },
                                "shape": {
                                    "type": "func",
                                    "name": "shape",
                                    "doc": {
                                        "brief": "get tensor shape",
                                        "return": "tensor shape, a int list",
                                        "maixpy": "maix.tensor.Tensor.shape",
                                        "py_doc": "get tensor shape\n\nReturns: tensor shape, a int list\n"
                                    },
                                    "args": [],
                                    "ret_type": "std::vector<int>",
                                    "static": false,
                                    "def": "std::vector<int> shape()"
                                },
                                "expand_dims": {
                                    "type": "func",
                                    "name": "expand_dims",
                                    "doc": {
                                        "brief": "expand tensor shape",
                                        "param": {
                                            "axis": "axis to expand"
                                        },
                                        "maixpy": "maix.tensor.Tensor.expand_dims",
                                        "py_doc": "expand tensor shape\n\nArgs:\n  - axis: axis to expand\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "axis",
                                            null
                                        ]
                                    ],
                                    "ret_type": "void",
                                    "static": false,
                                    "def": "void expand_dims(int axis)"
                                },
                                "reshape": {
                                    "type": "func",
                                    "name": "reshape",
                                    "doc": {
                                        "brief": "reshape tensor shape, if size not match, it will throw an err::Exception",
                                        "param": {
                                            "shape": "new shape"
                                        },
                                        "maixpy": "maix.tensor.Tensor.reshape",
                                        "py_doc": "reshape tensor shape, if size not match, it will throw an err::Exception\n\nArgs:\n  - shape: new shape\n"
                                    },
                                    "args": [
                                        [
                                            "std::vector<int>",
                                            "shape",
                                            null
                                        ]
                                    ],
                                    "ret_type": "void",
                                    "static": false,
                                    "def": "void reshape(std::vector<int> shape)"
                                },
                                "flatten": {
                                    "type": "func",
                                    "name": "flatten",
                                    "doc": {
                                        "brief": "Flatten tensor shape to 1D",
                                        "maixpy": "maix.tensor.Tensor.flatten",
                                        "py_doc": "Flatten tensor shape to 1D"
                                    },
                                    "args": [],
                                    "ret_type": "void",
                                    "static": false,
                                    "def": "void flatten()"
                                },
                                "dtype": {
                                    "type": "func",
                                    "name": "dtype",
                                    "doc": {
                                        "brief": "get tensor data type",
                                        "return": "tensor data type, see DType of this module",
                                        "maixpy": "maix.tensor.Tensor.dtype",
                                        "py_doc": "get tensor data type\n\nReturns: tensor data type, see DType of this module\n"
                                    },
                                    "args": [],
                                    "ret_type": "tensor::DType",
                                    "static": false,
                                    "def": "tensor::DType  dtype()"
                                },
                                "argmax": {
                                    "type": "func",
                                    "name": "argmax",
                                    "doc": {
                                        "brief": "argmax of tensor",
                                        "param": {
                                            "axis": "By default, the index is into the flattened array, otherwise along the specified axis., wrong axis will throw an err::Exception"
                                        },
                                        "return": "argmax result, you need to delete it after use in C++.",
                                        "maixpy": "maix.tensor.Tensor.argmax",
                                        "py_doc": "argmax of tensor\n\nArgs:\n  - axis: By default, the index is into the flattened array, otherwise along the specified axis., wrong axis will throw an err::Exception\n\n\nReturns: argmax result, you need to delete it after use in C++.\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "axis",
                                            "0xffff"
                                        ]
                                    ],
                                    "ret_type": "tensor::Tensor*",
                                    "static": false,
                                    "def": "tensor::Tensor *argmax(int axis = 0xffff)"
                                },
                                "argmax1": {
                                    "type": "func",
                                    "name": "argmax1",
                                    "doc": {
                                        "brief": "argmax1, flattened data max index",
                                        "return": "argmax result, int type",
                                        "maixpy": "maix.tensor.Tensor.argmax1",
                                        "py_doc": "argmax1, flattened data max index\n\nReturns: argmax result, int type\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int argmax1()"
                                }
                            },
                            "def": "class Tensor"
                        },
                        "Tensors": {
                            "type": "class",
                            "name": "Tensors",
                            "doc": {
                                "brief": "Tensors",
                                "maixpy": "maix.tensor.Tensors",
                                "py_doc": "Tensors"
                            },
                            "members": {
                                "__init__": {
                                    "type": "func",
                                    "name": "Tensors",
                                    "doc": {
                                        "brief": "Constructor of Tensors",
                                        "maixpy": "maix.tensor.Tensors.__init__",
                                        "maixcdk": "maix.tensor.Tensors.Tensors",
                                        "py_doc": "Constructor of Tensors"
                                    },
                                    "args": [],
                                    "ret_type": null,
                                    "static": false,
                                    "def": "Tensors()"
                                },
                                "add_tensor": {
                                    "type": "func",
                                    "name": "add_tensor",
                                    "doc": {
                                        "brief": "Add tensor",
                                        "maixpy": "maix.tensor.Tensors.add_tensor",
                                        "py_doc": "Add tensor"
                                    },
                                    "args": [
                                        [
                                            "const std::string &",
                                            "key",
                                            null
                                        ],
                                        [
                                            "tensor::Tensor *",
                                            "tensor",
                                            null
                                        ],
                                        [
                                            "bool",
                                            "copy",
                                            null
                                        ],
                                        [
                                            "bool",
                                            "auto_delete",
                                            null
                                        ]
                                    ],
                                    "ret_type": "void",
                                    "static": false,
                                    "def": "void add_tensor(const std::string &key, tensor::Tensor *tensor, bool copy, bool auto_delete)"
                                },
                                "rm_tensor": {
                                    "type": "func",
                                    "name": "rm_tensor",
                                    "doc": {
                                        "brief": "Remove tensor",
                                        "maixpy": "maix.tensor.Tensors.rm_tensor",
                                        "py_doc": "Remove tensor"
                                    },
                                    "args": [
                                        [
                                            "const std::string &",
                                            "key",
                                            null
                                        ]
                                    ],
                                    "ret_type": "void",
                                    "static": false,
                                    "def": "void rm_tensor(const std::string &key)"
                                },
                                "get_tensor": {
                                    "type": "func",
                                    "name": "get_tensor",
                                    "doc": {
                                        "brief": "Get tensor by key",
                                        "maixpy": "maix.tensor.Tensors.get_tensor",
                                        "maixcdk": "maix.tensor.Tensors.get_tensor",
                                        "py_doc": "Get tensor by key"
                                    },
                                    "args": [
                                        [
                                            "const std::string &",
                                            "key",
                                            null
                                        ]
                                    ],
                                    "ret_type": "tensor::Tensor*",
                                    "static": false,
                                    "def": "tensor::Tensor *get_tensor(const std::string &key)"
                                },
                                "__getitem__": {
                                    "type": "func",
                                    "name": "operator[]",
                                    "doc": {
                                        "brief": "Operator []",
                                        "maixpy": "maix.tensor.Tensors.__getitem__",
                                        "maixcdk": "maix.tensor.Tensors.[]",
                                        "py_doc": "Operator []"
                                    },
                                    "args": [
                                        [
                                            "const std::string &",
                                            "key",
                                            null
                                        ]
                                    ],
                                    "ret_type": "tensor::Tensor*",
                                    "static": false,
                                    "def": "tensor::Tensor *operator[](const std::string &key)"
                                },
                                "__len__": {
                                    "type": "func",
                                    "name": "size",
                                    "doc": {
                                        "brief": "Size",
                                        "maixpy": "maix.tensor.Tensors.__len__",
                                        "maixcdk": "maix.tensor.Tensors.size",
                                        "py_doc": "Size"
                                    },
                                    "args": [],
                                    "ret_type": "size_t",
                                    "static": false,
                                    "def": "size_t size()"
                                },
                                "get_names": {
                                    "type": "func",
                                    "name": "get_names",
                                    "doc": {
                                        "brief": "Get names",
                                        "maixpy": "maix.tensor.Tensors.get_names",
                                        "py_doc": "Get names"
                                    },
                                    "args": [],
                                    "ret_type": "std::vector<std::string>",
                                    "static": false,
                                    "def": "std::vector<std::string> get_names()"
                                },
                                "tensors": {
                                    "type": "var",
                                    "name": "tensors",
                                    "doc": {
                                        "brief": "Tensors data, dict type",
                                        "maixpy": "maix.tensor.Tensors.tensors",
                                        "py_doc": "Tensors data, dict type"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "std::map<std::string, tensor::Tensor*> tensors"
                                }
                            },
                            "def": "class Tensors"
                        }
                    },
                    "auto_add": true
                },
                "image": {
                    "type": "module",
                    "doc": {
                        "brief": "maix.image module, image related definition and functions",
                        "maixpy": "maix.image",
                        "py_doc": "maix.image module, image related definition and functions"
                    },
                    "members": {
                        "Format": {
                            "type": "enum",
                            "name": "Format",
                            "doc": {
                                "brief": "Image formats",
                                "attention": "for developers, update this enum will also need to update the fmt_size in maix_image.cpp",
                                "maixpy": "maix.image.Format",
                                "py_doc": "Image formats"
                            },
                            "values": [
                                [
                                    "FMT_RGB888",
                                    "0",
                                    "RGBRGB...RGB, R at the lowest address"
                                ],
                                [
                                    "FMT_BGR888",
                                    "",
                                    "BGRBGR...BGR, B at the lowest address"
                                ],
                                [
                                    "FMT_RGBA8888",
                                    "",
                                    "RGBARGBA...RGBA, R at the lowest address"
                                ],
                                [
                                    "FMT_BGRA8888",
                                    "",
                                    "BGRABGRA...BGRA, B at the lowest address"
                                ],
                                [
                                    "FMT_RGB565",
                                    "",
                                    ""
                                ],
                                [
                                    "FMT_BGR565",
                                    "",
                                    ""
                                ],
                                [
                                    "FMT_YUV422SP",
                                    "",
                                    "YYY...UVUVUV...UVUV"
                                ],
                                [
                                    "FMT_YUV422P",
                                    "",
                                    "YYY...UUU...VVV"
                                ],
                                [
                                    "FMT_YVU420SP",
                                    "",
                                    "YYY...VUVUVU...VUVU, NV21"
                                ],
                                [
                                    "FMT_YUV420SP",
                                    "",
                                    "YYY...UVUVUV...UVUV, NV12"
                                ],
                                [
                                    "FMT_YVU420P",
                                    "",
                                    "YYY...VVV...UUU"
                                ],
                                [
                                    "FMT_YUV420P",
                                    "",
                                    "YYY...UUU...VVV"
                                ],
                                [
                                    "FMT_GRAYSCALE",
                                    "",
                                    ""
                                ],
                                [
                                    "FMT_UNCOMPRESSED_MAX",
                                    "",
                                    ""
                                ],
                                [
                                    "FMT_COMPRESSED_MIN",
                                    "",
                                    ""
                                ],
                                [
                                    "FMT_JPEG",
                                    "",
                                    ""
                                ],
                                [
                                    "FMT_PNG",
                                    "",
                                    ""
                                ],
                                [
                                    "FMT_COMPRESSED_MAX",
                                    "",
                                    ""
                                ],
                                [
                                    "FMT_INVALID",
                                    "0xFF",
                                    "format not valid"
                                ]
                            ],
                            "def": "enum Format\n    {\n        FMT_RGB888 = 0, // RGBRGB...RGB, R at the lowest address\n        FMT_BGR888,     // BGRBGR...BGR, B at the lowest address\n        FMT_RGBA8888,   // RGBARGBA...RGBA, R at the lowest address\n        FMT_BGRA8888,   // BGRABGRA...BGRA, B at the lowest address\n        FMT_RGB565,\n        FMT_BGR565,\n        FMT_YUV422SP, // YYY...UVUVUV...UVUV\n        FMT_YUV422P,  // YYY...UUU...VVV\n        FMT_YVU420SP, // YYY...VUVUVU...VUVU, NV21\n        FMT_YUV420SP, // YYY...UVUVUV...UVUV, NV12\n        FMT_YVU420P,  // YYY...VVV...UUU\n        FMT_YUV420P,  // YYY...UUU...VVV\n        FMT_GRAYSCALE,\n        FMT_UNCOMPRESSED_MAX,\n\n        // compressed format below, not compressed should define upper\n        FMT_COMPRESSED_MIN,\n        FMT_JPEG,\n        FMT_PNG,\n        FMT_COMPRESSED_MAX,\n\n        FMT_INVALID = 0xFF  // format not valid\n    }"
                        },
                        "fmt_size": {
                            "type": "var",
                            "name": "",
                            "doc": {
                                "brief": "Image format size in bytes",
                                "attention": "It's a copy of this variable in MaixPy,\nso change it in C++ (e.g. update var in hello function) will not take effect the var inMaixPy.\nSo we add const for this var to avoid this mistake.",
                                "maixpy": "maix.image.fmt_size",
                                "py_doc": "Image format size in bytes"
                            },
                            "value": "{\n        3,\n        3,\n        4,\n        4,\n        2,\n        2,\n        2,\n        2,\n        1.5,\n        1.5,\n        1.5,\n        1.5,\n        1,\n        0,\n        0,\n        0,\n        0,\n        0\n        }",
                            "static": false,
                            "readonly": true,
                            "def": "const std::vector<float> fmt_size = {\n        3,\n        3,\n        4,\n        4,\n        2,\n        2,\n        2,\n        2,\n        1.5,\n        1.5,\n        1.5,\n        1.5,\n        1,\n        0,\n        0,\n        0,\n        0,\n        0\n        }"
                        },
                        "fmt_names": {
                            "type": "var",
                            "name": "",
                            "doc": {
                                "brief": "Image format string",
                                "maixpy": "maix.image.fmt_names",
                                "py_doc": "Image format string"
                            },
                            "value": "{\n        \"RGB888\",\n        \"BGR888\",\n        \"RGBA8888\",\n        \"BGRA8888\",\n        \"RGB565\",\n        \"BGR565\",\n        \"YUV422SP\",\n        \"YUV422P\",\n        \"YVU420SP\",\n        \"YUV420SP\",\n        \"YVU420P\"\n        \"YUV420P\",\n        \"GRAYSCALE\",\n        \"MAX\"}",
                            "static": false,
                            "readonly": true,
                            "def": "const std::vector<std::string> fmt_names = {\n        \"RGB888\",\n        \"BGR888\",\n        \"RGBA8888\",\n        \"BGRA8888\",\n        \"RGB565\",\n        \"BGR565\",\n        \"YUV422SP\",\n        \"YUV422P\",\n        \"YVU420SP\",\n        \"YUV420SP\",\n        \"YVU420P\"\n        \"YUV420P\",\n        \"GRAYSCALE\",\n        \"MAX\"}"
                        },
                        "Size": {
                            "type": "class",
                            "name": "Size",
                            "doc": {
                                "brief": "Image size type",
                                "maixpy": "maix.image.Size",
                                "py_doc": "Image size type"
                            },
                            "members": {
                                "__init__": {
                                    "type": "func",
                                    "name": "Size",
                                    "doc": {
                                        "brief": "Construct a new Size object",
                                        "param": {
                                            "width": "image width",
                                            "height": "image height"
                                        },
                                        "maixpy": "maix.image.Size.__init__",
                                        "py_doc": "Construct a new Size object\n\nArgs:\n  - width: image width\n  - height: image height\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "width",
                                            "0"
                                        ],
                                        [
                                            "int",
                                            "height",
                                            "0"
                                        ]
                                    ],
                                    "ret_type": null,
                                    "static": false,
                                    "def": "Size(int width = 0, int height = 0)"
                                },
                                "width": {
                                    "type": "var",
                                    "name": "width",
                                    "doc": {
                                        "brief": "width of size",
                                        "maixpy": "maix.image.Size.width",
                                        "py_doc": "width of size"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "int width"
                                },
                                "height": {
                                    "type": "var",
                                    "name": "height",
                                    "doc": {
                                        "brief": "height of size",
                                        "maixpy": "maix.image.Size.height",
                                        "py_doc": "height of size"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "int height"
                                },
                                "__getitem__": {
                                    "type": "func",
                                    "name": "__getitem__",
                                    "doc": {
                                        "brief": "Subscript operator",
                                        "param": {
                                            "index": "0 for width, 1 for height"
                                        },
                                        "return": "int& width or height",
                                        "maixpy": "maix.image.Size.__getitem__",
                                        "py_doc": "Subscript operator\n\nArgs:\n  - index: 0 for width, 1 for height\n\n\nReturns: int& width or height\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "index",
                                            null
                                        ]
                                    ],
                                    "ret_type": "int&",
                                    "static": false,
                                    "def": "int &__getitem__(int index)"
                                },
                                "__str__": {
                                    "type": "func",
                                    "name": "__str__",
                                    "doc": {
                                        "brief": "to string",
                                        "maixpy": "maix.image.Size.__str__",
                                        "py_doc": "to string"
                                    },
                                    "args": [],
                                    "ret_type": "std::string",
                                    "static": false,
                                    "def": "std::string __str__()"
                                }
                            },
                            "def": "class Size"
                        },
                        "Fit": {
                            "type": "enum",
                            "name": "Fit",
                            "doc": {
                                "brief": "Object fit method",
                                "maixpy": "maix.image.Fit",
                                "py_doc": "Object fit method"
                            },
                            "values": [
                                [
                                    "FIT_NONE",
                                    "-1",
                                    "no object fit, keep original"
                                ],
                                [
                                    "FIT_FILL",
                                    "0",
                                    "width to new width, height to new height, may be stretch"
                                ],
                                [
                                    "FIT_CONTAIN",
                                    "",
                                    "keep aspect ratio, fill blank area with black color"
                                ],
                                [
                                    "FIT_COVER",
                                    "",
                                    "keep aspect ratio, crop image to fit new size"
                                ],
                                [
                                    "FIT_MAX",
                                    "",
                                    ""
                                ]
                            ],
                            "def": "enum Fit\n    {\n        FIT_NONE = -1, // no object fit, keep original\n        FIT_FILL = 0,  // width to new width, height to new height, may be stretch\n        FIT_CONTAIN,   // keep aspect ratio, fill blank area with black color\n        FIT_COVER,     // keep aspect ratio, crop image to fit new size\n        FIT_MAX\n    }"
                        },
                        "ResizeMethod": {
                            "type": "enum",
                            "name": "ResizeMethod",
                            "doc": {
                                "brief": "Resize method",
                                "maixpy": "maix.image.ResizeMethod",
                                "py_doc": "Resize method"
                            },
                            "values": [
                                [
                                    "NEAREST",
                                    "0",
                                    ""
                                ],
                                [
                                    "BILINEAR",
                                    "",
                                    ""
                                ],
                                [
                                    "BICUBIC",
                                    "",
                                    ""
                                ],
                                [
                                    "AREA",
                                    "",
                                    ""
                                ],
                                [
                                    "LANCZOS",
                                    "",
                                    ""
                                ],
                                [
                                    "HAMMING",
                                    "",
                                    ""
                                ],
                                [
                                    "RESIZE_METHOD_MAX",
                                    "",
                                    ""
                                ]
                            ],
                            "def": "enum ResizeMethod\n    {\n        NEAREST = 0,\n        BILINEAR,\n        BICUBIC,\n        AREA,\n        LANCZOS,\n        HAMMING,\n        RESIZE_METHOD_MAX\n    }"
                        },
                        "ApriltagFamilies": {
                            "type": "enum",
                            "name": "ApriltagFamilies",
                            "doc": {
                                "brief": "Family of apriltag",
                                "maixpy": "maix.image.ApriltagFamilies",
                                "py_doc": "Family of apriltag"
                            },
                            "values": [
                                [
                                    "TAG16H5",
                                    "1",
                                    ""
                                ],
                                [
                                    "TAG25H7",
                                    "2",
                                    ""
                                ],
                                [
                                    "TAG25H9",
                                    "4",
                                    ""
                                ],
                                [
                                    "TAG36H10",
                                    "8",
                                    ""
                                ],
                                [
                                    "TAG36H11",
                                    "16",
                                    ""
                                ],
                                [
                                    "ARTOOLKIT",
                                    "32",
                                    ""
                                ]
                            ],
                            "def": "enum ApriltagFamilies\n    {\n        TAG16H5   = 1,\n        TAG25H7   = 2,\n        TAG25H9   = 4,\n        TAG36H10  = 8,\n        TAG36H11  = 16,\n        ARTOOLKIT = 32\n    }"
                        },
                        "TemplateMatch": {
                            "type": "enum",
                            "name": "TemplateMatch",
                            "doc": {
                                "brief": "Template match method",
                                "maixpy": "maix.image.TemplateMatch",
                                "py_doc": "Template match method"
                            },
                            "values": [
                                [
                                    "SEARCH_EX",
                                    "",
                                    "Exhaustive search"
                                ],
                                [
                                    "SEARCH_DS",
                                    "",
                                    "Diamond search"
                                ]
                            ],
                            "def": "enum TemplateMatch\n    {\n        SEARCH_EX,  // Exhaustive search\n        SEARCH_DS,  // Diamond search\n    }"
                        },
                        "CornerDetector": {
                            "type": "enum",
                            "name": "CornerDetector",
                            "doc": {
                                "brief": "CornerDetector class",
                                "maixpy": "maix.image.CornerDetector",
                                "py_doc": "CornerDetector class"
                            },
                            "values": [
                                [
                                    "CORNER_FAST",
                                    "",
                                    ""
                                ],
                                [
                                    "CORNER_AGAST",
                                    "",
                                    ""
                                ]
                            ],
                            "def": "enum CornerDetector\n    {\n        CORNER_FAST,\n        CORNER_AGAST\n    }"
                        },
                        "EdgeDetector": {
                            "type": "enum",
                            "name": "EdgeDetector",
                            "doc": {
                                "brief": "EdgeDetector class",
                                "maixpy": "maix.image.EdgeDetector",
                                "py_doc": "EdgeDetector class"
                            },
                            "values": [
                                [
                                    "EDGE_CANNY",
                                    "",
                                    ""
                                ],
                                [
                                    "EDGE_SIMPLE",
                                    "",
                                    ""
                                ]
                            ],
                            "def": "enum EdgeDetector\n    {\n        EDGE_CANNY,\n        EDGE_SIMPLE,\n    }"
                        },
                        "Line": {
                            "type": "class",
                            "name": "Line",
                            "doc": {
                                "brief": "Line class",
                                "maixpy": "maix.image.Line",
                                "py_doc": "Line class"
                            },
                            "members": {
                                "__init__": {
                                    "type": "func",
                                    "name": "Line",
                                    "doc": {
                                        "brief": "Line constructor",
                                        "param": {
                                            "x1": "coordinate x1 of the straight line",
                                            "y1": "coordinate y1 of the straight line",
                                            "x2": "coordinate x2 of the straight line",
                                            "y2": "coordinate y2 of the straight line",
                                            "magnitude": "magnitude of the straight line after Hough transformation",
                                            "theta": "angle of the straight line after Hough transformation",
                                            "rho": "p-value of the straight line after Hough transformation"
                                        },
                                        "maixpy": "maix.image.Line.__init__",
                                        "py_doc": "Line constructor\n\nArgs:\n  - x1: coordinate x1 of the straight line\n  - y1: coordinate y1 of the straight line\n  - x2: coordinate x2 of the straight line\n  - y2: coordinate y2 of the straight line\n  - magnitude: magnitude of the straight line after Hough transformation\n  - theta: angle of the straight line after Hough transformation\n  - rho: p-value of the straight line after Hough transformation\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "x1",
                                            null
                                        ],
                                        [
                                            "int",
                                            "y1",
                                            null
                                        ],
                                        [
                                            "int",
                                            "x2",
                                            null
                                        ],
                                        [
                                            "int",
                                            "y2",
                                            null
                                        ],
                                        [
                                            "int",
                                            "magnitude",
                                            "0"
                                        ],
                                        [
                                            "int",
                                            "theta",
                                            "0"
                                        ],
                                        [
                                            "int",
                                            "rho",
                                            "0"
                                        ]
                                    ],
                                    "ret_type": null,
                                    "static": false,
                                    "def": "Line(int x1, int y1, int x2, int y2, int magnitude = 0, int theta = 0, int rho = 0)"
                                },
                                "x1": {
                                    "type": "func",
                                    "name": "x1",
                                    "doc": {
                                        "brief": "get x1 of line",
                                        "return": "return x1 of the line, type is int",
                                        "maixpy": "maix.image.Line.x1",
                                        "py_doc": "get x1 of line\n\nReturns: return x1 of the line, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int x1()"
                                },
                                "y1": {
                                    "type": "func",
                                    "name": "y1",
                                    "doc": {
                                        "brief": "get y1 of line",
                                        "return": "return y1 of the line, type is int",
                                        "maixpy": "maix.image.Line.y1",
                                        "py_doc": "get y1 of line\n\nReturns: return y1 of the line, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int y1()"
                                },
                                "x2": {
                                    "type": "func",
                                    "name": "x2",
                                    "doc": {
                                        "brief": "get x2 of line",
                                        "return": "return x2 of the line, type is int",
                                        "maixpy": "maix.image.Line.x2",
                                        "py_doc": "get x2 of line\n\nReturns: return x2 of the line, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int x2()"
                                },
                                "y2": {
                                    "type": "func",
                                    "name": "y2",
                                    "doc": {
                                        "brief": "get y2 of line",
                                        "return": "return y2 of the line, type is int",
                                        "maixpy": "maix.image.Line.y2",
                                        "py_doc": "get y2 of line\n\nReturns: return y2 of the line, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int y2()"
                                },
                                "length": {
                                    "type": "func",
                                    "name": "length",
                                    "doc": {
                                        "brief": "get length of line",
                                        "return": "return length of the line, type is int",
                                        "maixpy": "maix.image.Line.length",
                                        "py_doc": "get length of line\n\nReturns: return length of the line, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int length()"
                                },
                                "magnitude": {
                                    "type": "func",
                                    "name": "magnitude",
                                    "doc": {
                                        "brief": "get magnitude of the straight line after Hough transformation",
                                        "return": "return magnitude, type is int",
                                        "maixpy": "maix.image.Line.magnitude",
                                        "py_doc": "get magnitude of the straight line after Hough transformation\n\nReturns: return magnitude, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int magnitude()"
                                },
                                "theta": {
                                    "type": "func",
                                    "name": "theta",
                                    "doc": {
                                        "brief": "get angle of the straight line after Hough transformation (0-179 degrees)",
                                        "return": "return angle, type is int",
                                        "maixpy": "maix.image.Line.theta",
                                        "py_doc": "get angle of the straight line after Hough transformation (0-179 degrees)\n\nReturns: return angle, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int theta()"
                                },
                                "rho": {
                                    "type": "func",
                                    "name": "rho",
                                    "doc": {
                                        "brief": "get p-value of the straight line after Hough transformation",
                                        "return": "return p-value, type is int",
                                        "maixpy": "maix.image.Line.rho",
                                        "py_doc": "get p-value of the straight line after Hough transformation\n\nReturns: return p-value, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int rho()"
                                }
                            },
                            "def": "class Line"
                        },
                        "Rect": {
                            "type": "class",
                            "name": "Rect",
                            "doc": {
                                "brief": "Rect class",
                                "maixpy": "maix.image.Rect",
                                "py_doc": "Rect class"
                            },
                            "members": {
                                "__init__": {
                                    "type": "func",
                                    "name": "Rect",
                                    "doc": {
                                        "brief": "Rect constructor",
                                        "param": {
                                            "corners": "corners of rect",
                                            "x": "coordinate x of the straight line",
                                            "y": "coordinate y of the straight line",
                                            "w": "coordinate w of the straight line",
                                            "h": "coordinate h of the straight line",
                                            "magnitude": "magnitude of the straight line after Hough transformation"
                                        },
                                        "maixpy": "maix.image.Rect.__init__",
                                        "py_doc": "Rect constructor\n\nArgs:\n  - corners: corners of rect\n  - x: coordinate x of the straight line\n  - y: coordinate y of the straight line\n  - w: coordinate w of the straight line\n  - h: coordinate h of the straight line\n  - magnitude: magnitude of the straight line after Hough transformation\n"
                                    },
                                    "args": [
                                        [
                                            "std::vector<std::vector<int>> &",
                                            "corners",
                                            null
                                        ],
                                        [
                                            "int",
                                            "x",
                                            null
                                        ],
                                        [
                                            "int",
                                            "y",
                                            null
                                        ],
                                        [
                                            "int",
                                            "w",
                                            null
                                        ],
                                        [
                                            "int",
                                            "h",
                                            null
                                        ],
                                        [
                                            "int",
                                            "magnitude",
                                            "0"
                                        ]
                                    ],
                                    "ret_type": null,
                                    "static": false,
                                    "def": "Rect(std::vector<std::vector<int>> &corners, int x, int y, int w, int h, int magnitude = 0)"
                                },
                                "corners": {
                                    "type": "func",
                                    "name": "corners",
                                    "doc": {
                                        "brief": "get corners of rect",
                                        "return": "return the coordinate of the rect.",
                                        "maixpy": "maix.image.Rect.corners",
                                        "py_doc": "get corners of rect\n\nReturns: return the coordinate of the rect.\n"
                                    },
                                    "args": [],
                                    "ret_type": "std::vector<std::vector<int>>",
                                    "static": false,
                                    "def": "std::vector<std::vector<int>> corners()"
                                },
                                "rect": {
                                    "type": "func",
                                    "name": "rect",
                                    "doc": {
                                        "brief": "get rectangle of rect",
                                        "return": "return the rectangle of the rect. format is {x, y, w, h}, type is std::vector<int>",
                                        "maixpy": "maix.image.Rect.rect",
                                        "py_doc": "get rectangle of rect\n\nReturns: return the rectangle of the rect. format is {x, y, w, h}, type is std::vector<int>\n"
                                    },
                                    "args": [],
                                    "ret_type": "std::vector<int>",
                                    "static": false,
                                    "def": "std::vector<int> rect()"
                                },
                                "x": {
                                    "type": "func",
                                    "name": "x",
                                    "doc": {
                                        "brief": "get x of rect",
                                        "return": "return x of the rect, type is int",
                                        "maixpy": "maix.image.Rect.x",
                                        "py_doc": "get x of rect\n\nReturns: return x of the rect, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int x()"
                                },
                                "y": {
                                    "type": "func",
                                    "name": "y",
                                    "doc": {
                                        "brief": "get y of rect",
                                        "return": "return y of the rect, type is int",
                                        "maixpy": "maix.image.Rect.y",
                                        "py_doc": "get y of rect\n\nReturns: return y of the rect, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int y()"
                                },
                                "w": {
                                    "type": "func",
                                    "name": "w",
                                    "doc": {
                                        "brief": "get w of rect",
                                        "return": "return w of the rect, type is int",
                                        "maixpy": "maix.image.Rect.w",
                                        "py_doc": "get w of rect\n\nReturns: return w of the rect, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int w()"
                                },
                                "h": {
                                    "type": "func",
                                    "name": "h",
                                    "doc": {
                                        "brief": "get h of rect",
                                        "return": "return h of the rect, type is int",
                                        "maixpy": "maix.image.Rect.h",
                                        "py_doc": "get h of rect\n\nReturns: return h of the rect, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int h()"
                                },
                                "magnitude": {
                                    "type": "func",
                                    "name": "magnitude",
                                    "doc": {
                                        "brief": "get magnitude of the straight line after Hough transformation",
                                        "return": "return magnitude, type is int",
                                        "maixpy": "maix.image.Rect.magnitude",
                                        "py_doc": "get magnitude of the straight line after Hough transformation\n\nReturns: return magnitude, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int magnitude()"
                                }
                            },
                            "def": "class Rect"
                        },
                        "Circle": {
                            "type": "class",
                            "name": "Circle",
                            "doc": {
                                "brief": "circle class",
                                "maixpy": "maix.image.Circle",
                                "py_doc": "circle class"
                            },
                            "members": {
                                "__init__": {
                                    "type": "func",
                                    "name": "Circle",
                                    "doc": {
                                        "brief": "Circle constructor",
                                        "param": {
                                            "x": "coordinate x of the circle",
                                            "y": "coordinate y of the circle",
                                            "r": "coordinate r of the circle",
                                            "magnitude": "coordinate y2 of the straight line"
                                        },
                                        "maixpy": "maix.image.Circle.__init__",
                                        "py_doc": "Circle constructor\n\nArgs:\n  - x: coordinate x of the circle\n  - y: coordinate y of the circle\n  - r: coordinate r of the circle\n  - magnitude: coordinate y2 of the straight line\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "x",
                                            null
                                        ],
                                        [
                                            "int",
                                            "y",
                                            null
                                        ],
                                        [
                                            "int",
                                            "r",
                                            null
                                        ],
                                        [
                                            "int",
                                            "magnitude",
                                            null
                                        ]
                                    ],
                                    "ret_type": null,
                                    "static": false,
                                    "def": "Circle(int x, int y, int r, int magnitude)"
                                },
                                "x": {
                                    "type": "func",
                                    "name": "x",
                                    "doc": {
                                        "brief": "get x of circle",
                                        "return": "return x of the circle, type is int",
                                        "maixpy": "maix.image.Circle.x",
                                        "py_doc": "get x of circle\n\nReturns: return x of the circle, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int x()"
                                },
                                "y": {
                                    "type": "func",
                                    "name": "y",
                                    "doc": {
                                        "brief": "get y of circle",
                                        "return": "return y of the circle, type is int",
                                        "maixpy": "maix.image.Circle.y",
                                        "py_doc": "get y of circle\n\nReturns: return y of the circle, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int y()"
                                },
                                "r": {
                                    "type": "func",
                                    "name": "r",
                                    "doc": {
                                        "brief": "get r of circle",
                                        "return": "return r of the circle, type is int",
                                        "maixpy": "maix.image.Circle.r",
                                        "py_doc": "get r of circle\n\nReturns: return r of the circle, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int r()"
                                },
                                "magnitude": {
                                    "type": "func",
                                    "name": "magnitude",
                                    "doc": {
                                        "brief": "get magnitude of the circle after Hough transformation",
                                        "return": "return magnitude, type is int",
                                        "maixpy": "maix.image.Circle.magnitude",
                                        "py_doc": "get magnitude of the circle after Hough transformation\n\nReturns: return magnitude, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int magnitude()"
                                }
                            },
                            "def": "class Circle"
                        },
                        "Blob": {
                            "type": "class",
                            "name": "Blob",
                            "doc": {
                                "brief": "Blob class",
                                "maixpy": "maix.image.Blob",
                                "py_doc": "Blob class"
                            },
                            "members": {
                                "__init__": {
                                    "type": "func",
                                    "name": "Blob",
                                    "doc": {
                                        "brief": "Blob constructor",
                                        "param": {
                                            "rect": "blob rect, type is std::vector<int>",
                                            "corners": "blob corners, type is std::vector<std::vector<int>>",
                                            "mini_corners": "blob mini_corners, type is std::vector<std::vector<int>>",
                                            "cx": "blob center x, type is float",
                                            "cy": "blob center y, type is float",
                                            "pixels": "blob pixels, type is int",
                                            "rotation": "blob rotation, type is float",
                                            "code": "blob code, type is int",
                                            "count": "blob count, type is int",
                                            "perimeter": "blob perimeter, type is int",
                                            "roundness": "blob roundness, type is float",
                                            "x_hist_bins": "blob x_hist_bins, type is std::vector<int>",
                                            "y_hist_bins": "blob y_hist_bins, type is std::vector<int>"
                                        },
                                        "maixpy": "maix.image.Blob.__init__",
                                        "py_doc": "Blob constructor\n\nArgs:\n  - rect: blob rect, type is std::vector<int>\n  - corners: blob corners, type is std::vector<std::vector<int>>\n  - mini_corners: blob mini_corners, type is std::vector<std::vector<int>>\n  - cx: blob center x, type is float\n  - cy: blob center y, type is float\n  - pixels: blob pixels, type is int\n  - rotation: blob rotation, type is float\n  - code: blob code, type is int\n  - count: blob count, type is int\n  - perimeter: blob perimeter, type is int\n  - roundness: blob roundness, type is float\n  - x_hist_bins: blob x_hist_bins, type is std::vector<int>\n  - y_hist_bins: blob y_hist_bins, type is std::vector<int>\n"
                                    },
                                    "args": [
                                        [
                                            "std::vector<int> &",
                                            "rect",
                                            null
                                        ],
                                        [
                                            "std::vector<std::vector<int>> &",
                                            "corners",
                                            null
                                        ],
                                        [
                                            "std::vector<std::vector<int>> &",
                                            "mini_corners",
                                            null
                                        ],
                                        [
                                            "float",
                                            "cx",
                                            null
                                        ],
                                        [
                                            "float",
                                            "cy",
                                            null
                                        ],
                                        [
                                            "int",
                                            "pixels",
                                            null
                                        ],
                                        [
                                            "float",
                                            "rotation",
                                            null
                                        ],
                                        [
                                            "int",
                                            "code",
                                            null
                                        ],
                                        [
                                            "int",
                                            "count",
                                            null
                                        ],
                                        [
                                            "int",
                                            "perimeter",
                                            null
                                        ],
                                        [
                                            "float",
                                            "roundness",
                                            null
                                        ],
                                        [
                                            "std::vector<int> &",
                                            "x_hist_bins",
                                            null
                                        ],
                                        [
                                            "std::vector<int> &",
                                            "y_hist_bins",
                                            null
                                        ]
                                    ],
                                    "ret_type": null,
                                    "static": false,
                                    "def": "Blob(std::vector<int> &rect, std::vector<std::vector<int>> &corners, std::vector<std::vector<int>> &mini_corners,float cx, float cy, int pixels, float rotation, int code, int count, int perimeter, float roundness, std::vector<int> &x_hist_bins, std::vector<int> &y_hist_bins)"
                                },
                                "corners": {
                                    "type": "func",
                                    "name": "corners",
                                    "doc": {
                                        "brief": "get blob corners",
                                        "return": "Returns a list of 4 (x,y) tuples of the 4 corners of the object.\n(x0, y0)___________(x1, y1)\n|           |\n|           |\n|           |\n|___________|\n(x3, y3)           (x2, y2)\nnote: the order of corners may change",
                                        "maixpy": "maix.image.Blob.corners",
                                        "py_doc": "get blob corners\n\nReturns: Returns a list of 4 (x,y) tuples of the 4 corners of the object.\n(x0, y0)___________(x1, y1)\n|           |\n|           |\n|           |\n|___________|\n(x3, y3)           (x2, y2)\nnote: the order of corners may change\n"
                                    },
                                    "args": [],
                                    "ret_type": "std::vector<std::vector<int>>",
                                    "static": false,
                                    "def": "std::vector<std::vector<int>> corners()"
                                },
                                "mini_corners": {
                                    "type": "func",
                                    "name": "mini_corners",
                                    "doc": {
                                        "brief": "get blob mini corners",
                                        "return": "Returns a list of 4 (x,y) tuples of the 4 corners than bound the min area rectangle of the blob.\n(x0, y0)___________(x1, y1)\n|           |\n|           |\n|           |\n|___________|\n(x3, y3)           (x2, y2)\nnote: the order of corners may change",
                                        "maixpy": "maix.image.Blob.mini_corners",
                                        "py_doc": "get blob mini corners\n\nReturns: Returns a list of 4 (x,y) tuples of the 4 corners than bound the min area rectangle of the blob.\n(x0, y0)___________(x1, y1)\n|           |\n|           |\n|           |\n|___________|\n(x3, y3)           (x2, y2)\nnote: the order of corners may change\n"
                                    },
                                    "args": [],
                                    "ret_type": "std::vector<std::vector<int>>",
                                    "static": false,
                                    "def": "std::vector<std::vector<int>> mini_corners()"
                                },
                                "rect": {
                                    "type": "func",
                                    "name": "rect",
                                    "doc": {
                                        "brief": "get blob rect",
                                        "return": "Returns the center coordinates and width and height of the rectangle. format is (x, y, w, h)\nw\n(x, y) ___________\n|           |\n|           |  h\n|           |\n|___________|",
                                        "maixpy": "maix.image.Blob.rect",
                                        "py_doc": "get blob rect\n\nReturns: Returns the center coordinates and width and height of the rectangle. format is (x, y, w, h)\nw\n(x, y) ___________\n|           |\n|           |  h\n|           |\n|___________|\n"
                                    },
                                    "args": [],
                                    "ret_type": "std::vector<int>",
                                    "static": false,
                                    "def": "std::vector<int> rect()"
                                },
                                "x": {
                                    "type": "func",
                                    "name": "x",
                                    "doc": {
                                        "brief": "get blob x of the upper left coordinate",
                                        "return": "Returns the x coordinate of the upper left corner of the rectangle.",
                                        "maixpy": "maix.image.Blob.x",
                                        "py_doc": "get blob x of the upper left coordinate\n\nReturns: Returns the x coordinate of the upper left corner of the rectangle.\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int x()"
                                },
                                "y": {
                                    "type": "func",
                                    "name": "y",
                                    "doc": {
                                        "brief": "get blob y of the upper left coordinate",
                                        "return": "Returns the y coordinate of the upper left corner of the rectangle.",
                                        "maixpy": "maix.image.Blob.y",
                                        "py_doc": "get blob y of the upper left coordinate\n\nReturns: Returns the y coordinate of the upper left corner of the rectangle.\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int y()"
                                },
                                "w": {
                                    "type": "func",
                                    "name": "w",
                                    "doc": {
                                        "brief": "get blob width",
                                        "return": "Returns the blob\u2019s bounding box w coordinate",
                                        "maixpy": "maix.image.Blob.w",
                                        "py_doc": "get blob width\n\nReturns: Returns the blob\u2019s bounding box w coordinate\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int w()"
                                },
                                "h": {
                                    "type": "func",
                                    "name": "h",
                                    "doc": {
                                        "brief": "get blob height",
                                        "return": "Returns the blob\u2019s bounding box h coordinate",
                                        "maixpy": "maix.image.Blob.h",
                                        "py_doc": "get blob height\n\nReturns: Returns the blob\u2019s bounding box h coordinate\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int h()"
                                },
                                "pixels": {
                                    "type": "func",
                                    "name": "pixels",
                                    "doc": {
                                        "brief": "get blob pixels",
                                        "return": "Returns the number of pixels that are part of this blob.",
                                        "maixpy": "maix.image.Blob.pixels",
                                        "py_doc": "get blob pixels\n\nReturns: Returns the number of pixels that are part of this blob.\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int pixels()"
                                },
                                "cx": {
                                    "type": "func",
                                    "name": "cx",
                                    "doc": {
                                        "brief": "get blob center x",
                                        "return": "Returns the centroid x position of the blob",
                                        "maixpy": "maix.image.Blob.cx",
                                        "py_doc": "get blob center x\n\nReturns: Returns the centroid x position of the blob\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int cx()"
                                },
                                "cy": {
                                    "type": "func",
                                    "name": "cy",
                                    "doc": {
                                        "brief": "get blob center y",
                                        "return": "Returns the centroid y position of the blob",
                                        "maixpy": "maix.image.Blob.cy",
                                        "py_doc": "get blob center y\n\nReturns: Returns the centroid y position of the blob\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int cy()"
                                },
                                "cxf": {
                                    "type": "func",
                                    "name": "cxf",
                                    "doc": {
                                        "brief": "get blob center x",
                                        "return": "Returns the centroid x position of the blob",
                                        "maixpy": "maix.image.Blob.cxf",
                                        "py_doc": "get blob center x\n\nReturns: Returns the centroid x position of the blob\n"
                                    },
                                    "args": [],
                                    "ret_type": "float",
                                    "static": false,
                                    "def": "float cxf()"
                                },
                                "cyf": {
                                    "type": "func",
                                    "name": "cyf",
                                    "doc": {
                                        "brief": "get blob center y",
                                        "return": "Returns the centroid y position of the blob",
                                        "maixpy": "maix.image.Blob.cyf",
                                        "py_doc": "get blob center y\n\nReturns: Returns the centroid y position of the blob\n"
                                    },
                                    "args": [],
                                    "ret_type": "float",
                                    "static": false,
                                    "def": "float cyf()"
                                },
                                "rotation": {
                                    "type": "func",
                                    "name": "rotation",
                                    "doc": {
                                        "brief": "get blob rotation",
                                        "return": "Returns the rotation of the blob in radians (float). If the blob is like a pencil or pen this value will be unique for 0-180 degrees.",
                                        "maixpy": "maix.image.Blob.rotation",
                                        "py_doc": "get blob rotation\n\nReturns: Returns the rotation of the blob in radians (float). If the blob is like a pencil or pen this value will be unique for 0-180 degrees.\n"
                                    },
                                    "args": [],
                                    "ret_type": "float",
                                    "static": false,
                                    "def": "float rotation()"
                                },
                                "rotation_rad": {
                                    "type": "func",
                                    "name": "rotation_rad",
                                    "doc": {
                                        "brief": "get blob rotation_rad",
                                        "return": "Returns the rotation of the blob in radians",
                                        "maixpy": "maix.image.Blob.rotation_rad",
                                        "py_doc": "get blob rotation_rad\n\nReturns: Returns the rotation of the blob in radians\n"
                                    },
                                    "args": [],
                                    "ret_type": "float",
                                    "static": false,
                                    "def": "float rotation_rad()"
                                },
                                "rotation_deg": {
                                    "type": "func",
                                    "name": "rotation_deg",
                                    "doc": {
                                        "brief": "get blob rotation_deg",
                                        "return": "Returns the rotation of the blob in degrees.",
                                        "maixpy": "maix.image.Blob.rotation_deg",
                                        "py_doc": "get blob rotation_deg\n\nReturns: Returns the rotation of the blob in degrees.\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int rotation_deg()"
                                },
                                "code": {
                                    "type": "func",
                                    "name": "code",
                                    "doc": {
                                        "brief": "get blob code",
                                        "return": "Returns a 32-bit binary number with a bit set in it for each color threshold that\u2019s part of this blob",
                                        "maixpy": "maix.image.Blob.code",
                                        "py_doc": "get blob code\n\nReturns: Returns a 32-bit binary number with a bit set in it for each color threshold that\u2019s part of this blob\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int code()"
                                },
                                "count": {
                                    "type": "func",
                                    "name": "count",
                                    "doc": {
                                        "brief": "get blob count",
                                        "return": "Returns the number of blobs merged into this blob.",
                                        "maixpy": "maix.image.Blob.count",
                                        "py_doc": "get blob count\n\nReturns: Returns the number of blobs merged into this blob.\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int count()"
                                },
                                "perimeter": {
                                    "type": "func",
                                    "name": "perimeter",
                                    "doc": {
                                        "brief": "get blob merge_cnt",
                                        "return": "Returns the number of pixels on this blob\u2019s perimeter.",
                                        "maixpy": "maix.image.Blob.perimeter",
                                        "py_doc": "get blob merge_cnt\n\nReturns: Returns the number of pixels on this blob\u2019s perimeter.\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int perimeter()"
                                },
                                "roundness": {
                                    "type": "func",
                                    "name": "roundness",
                                    "doc": {
                                        "brief": "get blob roundness",
                                        "return": "Returns a value between 0 and 1 representing how round the object is",
                                        "maixpy": "maix.image.Blob.roundness",
                                        "py_doc": "get blob roundness\n\nReturns: Returns a value between 0 and 1 representing how round the object is\n"
                                    },
                                    "args": [],
                                    "ret_type": "float",
                                    "static": false,
                                    "def": "float roundness()"
                                },
                                "elongation": {
                                    "type": "func",
                                    "name": "elongation",
                                    "doc": {
                                        "brief": "get blob elongation",
                                        "returnReturns": "a value between 0 and 1 representing how long (not round) the object is",
                                        "maixpy": "maix.image.Blob.elongation",
                                        "py_doc": "get blob elongation"
                                    },
                                    "args": [],
                                    "ret_type": "float",
                                    "static": false,
                                    "def": "float elongation()"
                                },
                                "area": {
                                    "type": "func",
                                    "name": "area",
                                    "doc": {
                                        "brief": "get blob area",
                                        "return": "Returns the area of the bounding box around the blob",
                                        "maixpy": "maix.image.Blob.area",
                                        "py_doc": "get blob area\n\nReturns: Returns the area of the bounding box around the blob\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int area()"
                                },
                                "density": {
                                    "type": "func",
                                    "name": "density",
                                    "doc": {
                                        "brief": "get blob density",
                                        "return": "Returns the density ratio of the blob",
                                        "maixpy": "maix.image.Blob.density",
                                        "py_doc": "get blob density\n\nReturns: Returns the density ratio of the blob\n"
                                    },
                                    "args": [],
                                    "ret_type": "float",
                                    "static": false,
                                    "def": "float density()"
                                },
                                "extent": {
                                    "type": "func",
                                    "name": "extent",
                                    "doc": {
                                        "brief": "Alias for blob.density()",
                                        "return": "Returns the density ratio of the blob",
                                        "maixpy": "maix.image.Blob.extent",
                                        "py_doc": "Alias for blob.density()\n\nReturns: Returns the density ratio of the blob\n"
                                    },
                                    "args": [],
                                    "ret_type": "float",
                                    "static": false,
                                    "def": "float extent()"
                                },
                                "compactness": {
                                    "type": "func",
                                    "name": "compactness",
                                    "doc": {
                                        "brief": "get blob compactness",
                                        "return": "Returns the compactness ratio of the blob",
                                        "maixpy": "maix.image.Blob.compactness",
                                        "py_doc": "get blob compactness\n\nReturns: Returns the compactness ratio of the blob\n"
                                    },
                                    "args": [],
                                    "ret_type": "float",
                                    "static": false,
                                    "def": "float compactness()"
                                },
                                "solidity": {
                                    "type": "func",
                                    "name": "solidity",
                                    "doc": {
                                        "brief": "get blob solidity",
                                        "return": "Returns the solidity ratio of the blob",
                                        "maixpy": "maix.image.Blob.solidity",
                                        "py_doc": "get blob solidity\n\nReturns: Returns the solidity ratio of the blob\n"
                                    },
                                    "args": [],
                                    "ret_type": "float",
                                    "static": false,
                                    "def": "float solidity()"
                                },
                                "convexity": {
                                    "type": "func",
                                    "name": "convexity",
                                    "doc": {
                                        "brief": "get blob convexity",
                                        "return": "Returns a value between 0 and 1 representing how convex the object is",
                                        "maixpy": "maix.image.Blob.convexity",
                                        "py_doc": "get blob convexity\n\nReturns: Returns a value between 0 and 1 representing how convex the object is\n"
                                    },
                                    "args": [],
                                    "ret_type": "float",
                                    "static": false,
                                    "def": "float convexity()"
                                },
                                "x_hist_bins": {
                                    "type": "func",
                                    "name": "x_hist_bins",
                                    "doc": {
                                        "brief": "get blob x_hist_bins",
                                        "return": "Returns the x_hist_bins of the blob",
                                        "maixpy": "maix.image.Blob.x_hist_bins",
                                        "py_doc": "get blob x_hist_bins\n\nReturns: Returns the x_hist_bins of the blob\n"
                                    },
                                    "args": [],
                                    "ret_type": "std::vector<int>",
                                    "static": false,
                                    "def": "std::vector<int> x_hist_bins()"
                                },
                                "y_hist_bins": {
                                    "type": "func",
                                    "name": "y_hist_bins",
                                    "doc": {
                                        "brief": "get blob y_hist_bins",
                                        "return": "Returns the y_hist_bins of the blob",
                                        "maixpy": "maix.image.Blob.y_hist_bins",
                                        "py_doc": "get blob y_hist_bins\n\nReturns: Returns the y_hist_bins of the blob\n"
                                    },
                                    "args": [],
                                    "ret_type": "std::vector<int>",
                                    "static": false,
                                    "def": "std::vector<int> y_hist_bins()"
                                },
                                "major_axis_line": {
                                    "type": "func",
                                    "name": "major_axis_line",
                                    "doc": {
                                        "brief": "get blob major_axis_line",
                                        "return": "Returns a line tuple (x1, y1, x2, y2) of the minor axis of the blob.",
                                        "maixpy": "maix.image.Blob.major_axis_line",
                                        "py_doc": "get blob major_axis_line\n\nReturns: Returns a line tuple (x1, y1, x2, y2) of the minor axis of the blob.\n"
                                    },
                                    "args": [],
                                    "ret_type": "std::vector<int>",
                                    "static": false,
                                    "def": "std::vector<int> major_axis_line()"
                                },
                                "minor_axis_line": {
                                    "type": "func",
                                    "name": "minor_axis_line",
                                    "doc": {
                                        "brief": "get blob minor_axis_line",
                                        "return": "Returns a line tuple (x1, y1, x2, y2) of the minor axis of the blob.",
                                        "maixpy": "maix.image.Blob.minor_axis_line",
                                        "py_doc": "get blob minor_axis_line\n\nReturns: Returns a line tuple (x1, y1, x2, y2) of the minor axis of the blob.\n"
                                    },
                                    "args": [],
                                    "ret_type": "std::vector<int>",
                                    "static": false,
                                    "def": "std::vector<int> minor_axis_line()"
                                },
                                "enclosing_circle": {
                                    "type": "func",
                                    "name": "enclosing_circle",
                                    "doc": {
                                        "brief": "get blob enclosing_circle",
                                        "return": "Returns a circle tuple (x, y, r) of the circle that encloses the min area rectangle of a blob.",
                                        "maixpy": "maix.image.Blob.enclosing_circle",
                                        "py_doc": "get blob enclosing_circle\n\nReturns: Returns a circle tuple (x, y, r) of the circle that encloses the min area rectangle of a blob.\n"
                                    },
                                    "args": [],
                                    "ret_type": "std::vector<int>",
                                    "static": false,
                                    "def": "std::vector<int> enclosing_circle()"
                                },
                                "enclosed_ellipse": {
                                    "type": "func",
                                    "name": "enclosed_ellipse",
                                    "doc": {
                                        "brief": "get blob enclosed_ellipse",
                                        "return": "Returns an ellipse tuple (x, y, rx, ry, rotation) of the ellipse that fits inside of the min area rectangle of a blob.",
                                        "maixpy": "maix.image.Blob.enclosed_ellipse",
                                        "py_doc": "get blob enclosed_ellipse\n\nReturns: Returns an ellipse tuple (x, y, rx, ry, rotation) of the ellipse that fits inside of the min area rectangle of a blob.\n"
                                    },
                                    "args": [],
                                    "ret_type": "std::vector<int>",
                                    "static": false,
                                    "def": "std::vector<int> enclosed_ellipse()"
                                }
                            },
                            "def": "class Blob"
                        },
                        "QRCode": {
                            "type": "class",
                            "name": "QRCode",
                            "doc": {
                                "brief": "QRCode class",
                                "maixpy": "maix.image.QRCode",
                                "py_doc": "QRCode class"
                            },
                            "members": {
                                "__init__": {
                                    "type": "func",
                                    "name": "QRCode",
                                    "doc": {
                                        "brief": "QRCode constructor",
                                        "param": {
                                            "rect": "rect of corners, type is std::vector<int>",
                                            "corners": "corners of QRCode",
                                            "payload": "payload of the QRCode",
                                            "version": "version of the QRCode",
                                            "ecc_level": "ecc_level of the QRCode",
                                            "mask": "mask of the QRCode",
                                            "data_type": "data_type of the QRCode",
                                            "eci": "eci of the QRCode"
                                        },
                                        "maixpy": "maix.image.QRCode.__init__",
                                        "py_doc": "QRCode constructor\n\nArgs:\n  - rect: rect of corners, type is std::vector<int>\n  - corners: corners of QRCode\n  - payload: payload of the QRCode\n  - version: version of the QRCode\n  - ecc_level: ecc_level of the QRCode\n  - mask: mask of the QRCode\n  - data_type: data_type of the QRCode\n  - eci: eci of the QRCode\n"
                                    },
                                    "args": [
                                        [
                                            "std::vector<int> &",
                                            "rect",
                                            null
                                        ],
                                        [
                                            "std::vector<std::vector<int>> &",
                                            "corners",
                                            null
                                        ],
                                        [
                                            "std::string &",
                                            "payload",
                                            null
                                        ],
                                        [
                                            "int",
                                            "version",
                                            null
                                        ],
                                        [
                                            "int",
                                            "ecc_level",
                                            null
                                        ],
                                        [
                                            "int",
                                            "mask",
                                            null
                                        ],
                                        [
                                            "int",
                                            "data_type",
                                            null
                                        ],
                                        [
                                            "int",
                                            "eci",
                                            null
                                        ]
                                    ],
                                    "ret_type": null,
                                    "static": false,
                                    "def": "QRCode(std::vector<int> &rect, std::vector<std::vector<int>> &corners, std::string &payload, int version, int ecc_level, int mask, int data_type, int eci)"
                                },
                                "corners": {
                                    "type": "func",
                                    "name": "corners",
                                    "doc": {
                                        "brief": "get coordinate of QRCode",
                                        "return": "return the coordinate of the QRCode.",
                                        "maixpy": "maix.image.QRCode.corners",
                                        "py_doc": "get coordinate of QRCode\n\nReturns: return the coordinate of the QRCode.\n"
                                    },
                                    "args": [],
                                    "ret_type": "std::vector<std::vector<int>>",
                                    "static": false,
                                    "def": "std::vector<std::vector<int>> corners()"
                                },
                                "rect": {
                                    "type": "func",
                                    "name": "rect",
                                    "doc": {
                                        "brief": "get rectangle of QRCode",
                                        "return": "return the rectangle of the QRCode. format is {x, y, w, h}, type is std::vector<int>",
                                        "maixpy": "maix.image.QRCode.rect",
                                        "py_doc": "get rectangle of QRCode\n\nReturns: return the rectangle of the QRCode. format is {x, y, w, h}, type is std::vector<int>\n"
                                    },
                                    "args": [],
                                    "ret_type": "std::vector<int>",
                                    "static": false,
                                    "def": "std::vector<int> rect()"
                                },
                                "x": {
                                    "type": "func",
                                    "name": "x",
                                    "doc": {
                                        "brief": "get x of QRCode",
                                        "return": "return x of the QRCode, type is int",
                                        "maixpy": "maix.image.QRCode.x",
                                        "py_doc": "get x of QRCode\n\nReturns: return x of the QRCode, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int x()"
                                },
                                "y": {
                                    "type": "func",
                                    "name": "y",
                                    "doc": {
                                        "brief": "get y of QRCode",
                                        "return": "return y of the QRCode, type is int",
                                        "maixpy": "maix.image.QRCode.y",
                                        "py_doc": "get y of QRCode\n\nReturns: return y of the QRCode, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int y()"
                                },
                                "w": {
                                    "type": "func",
                                    "name": "w",
                                    "doc": {
                                        "brief": "get w of QRCode",
                                        "return": "return w of the QRCode, type is int",
                                        "maixpy": "maix.image.QRCode.w",
                                        "py_doc": "get w of QRCode\n\nReturns: return w of the QRCode, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int w()"
                                },
                                "h": {
                                    "type": "func",
                                    "name": "h",
                                    "doc": {
                                        "brief": "get h of QRCode",
                                        "return": "return h of the QRCode, type is int",
                                        "maixpy": "maix.image.QRCode.h",
                                        "py_doc": "get h of QRCode\n\nReturns: return h of the QRCode, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int h()"
                                },
                                "payload": {
                                    "type": "func",
                                    "name": "payload",
                                    "doc": {
                                        "brief": "get QRCode payload",
                                        "return": "return area of the QRCode",
                                        "maixpy": "maix.image.QRCode.payload",
                                        "py_doc": "get QRCode payload\n\nReturns: return area of the QRCode\n"
                                    },
                                    "args": [],
                                    "ret_type": "std::string",
                                    "static": false,
                                    "def": "std::string payload()"
                                },
                                "version": {
                                    "type": "func",
                                    "name": "version",
                                    "doc": {
                                        "brief": "get QRCode version",
                                        "return": "return version of the QRCode",
                                        "maixpy": "maix.image.QRCode.version",
                                        "py_doc": "get QRCode version\n\nReturns: return version of the QRCode\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int version()"
                                },
                                "ecc_level": {
                                    "type": "func",
                                    "name": "ecc_level",
                                    "doc": {
                                        "brief": "get QRCode error correction level",
                                        "return": "return error correction level of the QRCode",
                                        "maixpy": "maix.image.QRCode.ecc_level",
                                        "py_doc": "get QRCode error correction level\n\nReturns: return error correction level of the QRCode\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int ecc_level()"
                                },
                                "mask": {
                                    "type": "func",
                                    "name": "mask",
                                    "doc": {
                                        "brief": "get QRCode mask",
                                        "return": "return mask of the QRCode",
                                        "maixpy": "maix.image.QRCode.mask",
                                        "py_doc": "get QRCode mask\n\nReturns: return mask of the QRCode\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int mask()"
                                },
                                "data_type": {
                                    "type": "func",
                                    "name": "data_type",
                                    "doc": {
                                        "brief": "get QRCode dataType",
                                        "return": "return mask of the QRCode",
                                        "maixpy": "maix.image.QRCode.data_type",
                                        "py_doc": "get QRCode dataType\n\nReturns: return mask of the QRCode\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int data_type()"
                                },
                                "eci": {
                                    "type": "func",
                                    "name": "eci",
                                    "doc": {
                                        "brief": "get QRCode eci",
                                        "return": "return data of the QRCode",
                                        "maixpy": "maix.image.QRCode.eci",
                                        "py_doc": "get QRCode eci\n\nReturns: return data of the QRCode\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int eci()"
                                },
                                "is_numeric": {
                                    "type": "func",
                                    "name": "is_numeric",
                                    "doc": {
                                        "brief": "check QRCode is numeric",
                                        "return": "return true if the result type of the QRCode is numeric",
                                        "maixpy": "maix.image.QRCode.is_numeric",
                                        "py_doc": "check QRCode is numeric\n\nReturns: return true if the result type of the QRCode is numeric\n"
                                    },
                                    "args": [],
                                    "ret_type": "bool",
                                    "static": false,
                                    "def": "bool is_numeric()"
                                },
                                "is_alphanumeric": {
                                    "type": "func",
                                    "name": "is_alphanumeric",
                                    "doc": {
                                        "brief": "check QRCode is alphanumeric",
                                        "return": "return true if the result type of the QRCode is alphanumeric",
                                        "maixpy": "maix.image.QRCode.is_alphanumeric",
                                        "py_doc": "check QRCode is alphanumeric\n\nReturns: return true if the result type of the QRCode is alphanumeric\n"
                                    },
                                    "args": [],
                                    "ret_type": "bool",
                                    "static": false,
                                    "def": "bool is_alphanumeric()"
                                },
                                "is_binary": {
                                    "type": "func",
                                    "name": "is_binary",
                                    "doc": {
                                        "brief": "check QRCode is binary",
                                        "return": "return true if the result type of the QRCode is binary",
                                        "maixpy": "maix.image.QRCode.is_binary",
                                        "py_doc": "check QRCode is binary\n\nReturns: return true if the result type of the QRCode is binary\n"
                                    },
                                    "args": [],
                                    "ret_type": "bool",
                                    "static": false,
                                    "def": "bool is_binary()"
                                },
                                "is_kanji": {
                                    "type": "func",
                                    "name": "is_kanji",
                                    "doc": {
                                        "brief": "check QRCode is kanji",
                                        "return": "return true if the result type of the QRCode is kanji",
                                        "maixpy": "maix.image.QRCode.is_kanji",
                                        "py_doc": "check QRCode is kanji\n\nReturns: return true if the result type of the QRCode is kanji\n"
                                    },
                                    "args": [],
                                    "ret_type": "bool",
                                    "static": false,
                                    "def": "bool is_kanji()"
                                }
                            },
                            "def": "class QRCode"
                        },
                        "AprilTag": {
                            "type": "class",
                            "name": "AprilTag",
                            "doc": {
                                "brief": "AprilTag class",
                                "maixpy": "maix.image.AprilTag",
                                "py_doc": "AprilTag class"
                            },
                            "members": {
                                "__init__": {
                                    "type": "func",
                                    "name": "AprilTag",
                                    "doc": {
                                        "brief": "AprilTag constructor",
                                        "param": {
                                            "rect": "Inlucdes the top-left corner and the width and height of the rectangle. format is {x, y, w, h}, type is std::vector<int>",
                                            "corners": "Includes the four corners of the rectangle. format is {{x0, y0}, {x1, y1}, {x2, y2}, {x3, y3}}, type is std::vector<std::vector<int>>",
                                            "id": "The id of the AprilTag",
                                            "famliy": "The family of the AprilTag",
                                            "centroid_x": "The x coordinate of the center of the AprilTag",
                                            "centroid_y": "The y coordinate of the center of the AprilTag",
                                            "rotation": "The rotation of the AprilTag",
                                            "decision_margin": "The decision_margin of the AprilTag",
                                            "hamming": "The hamming of the AprilTag",
                                            "goodness": "The goodness of the AprilTag",
                                            "x_translation": "The x_translation of the AprilTag",
                                            "y_translation": "The y_translation of the AprilTag",
                                            "z_translation": "The z_translation of the AprilTag",
                                            "x_rotation": "The x_rotation of the AprilTag",
                                            "y_rotation": "The y_rotation of the AprilTag",
                                            "z_rotation": "The z_rotation of the AprilTag"
                                        },
                                        "maixpy": "maix.image.AprilTag.__init__",
                                        "py_doc": "AprilTag constructor\n\nArgs:\n  - rect: Inlucdes the top-left corner and the width and height of the rectangle. format is {x, y, w, h}, type is std::vector<int>\n  - corners: Includes the four corners of the rectangle. format is {{x0, y0}, {x1, y1}, {x2, y2}, {x3, y3}}, type is std::vector<std::vector<int>>\n  - id: The id of the AprilTag\n  - famliy: The family of the AprilTag\n  - centroid_x: The x coordinate of the center of the AprilTag\n  - centroid_y: The y coordinate of the center of the AprilTag\n  - rotation: The rotation of the AprilTag\n  - decision_margin: The decision_margin of the AprilTag\n  - hamming: The hamming of the AprilTag\n  - goodness: The goodness of the AprilTag\n  - x_translation: The x_translation of the AprilTag\n  - y_translation: The y_translation of the AprilTag\n  - z_translation: The z_translation of the AprilTag\n  - x_rotation: The x_rotation of the AprilTag\n  - y_rotation: The y_rotation of the AprilTag\n  - z_rotation: The z_rotation of the AprilTag\n"
                                    },
                                    "args": [
                                        [
                                            "std::vector<int> &",
                                            "rect",
                                            null
                                        ],
                                        [
                                            "std::vector<std::vector<int>> &",
                                            "corners",
                                            null
                                        ],
                                        [
                                            "int",
                                            "id",
                                            null
                                        ],
                                        [
                                            "int",
                                            "famliy",
                                            null
                                        ],
                                        [
                                            "float",
                                            "centroid_x",
                                            null
                                        ],
                                        [
                                            "float",
                                            "centroid_y",
                                            null
                                        ],
                                        [
                                            "float",
                                            "rotation",
                                            null
                                        ],
                                        [
                                            "float",
                                            "decision_margin",
                                            null
                                        ],
                                        [
                                            "int",
                                            "hamming",
                                            null
                                        ],
                                        [
                                            "float",
                                            "goodness",
                                            null
                                        ],
                                        [
                                            "float",
                                            "x_translation",
                                            null
                                        ],
                                        [
                                            "float",
                                            "y_translation",
                                            null
                                        ],
                                        [
                                            "float",
                                            "z_translation",
                                            null
                                        ],
                                        [
                                            "float",
                                            "x_rotation",
                                            null
                                        ],
                                        [
                                            "float",
                                            "y_rotation",
                                            null
                                        ],
                                        [
                                            "float",
                                            "z_rotation",
                                            null
                                        ]
                                    ],
                                    "ret_type": null,
                                    "static": false,
                                    "def": "AprilTag(std::vector<int> &rect, std::vector<std::vector<int>> &corners, int id, int famliy, float centroid_x, float centroid_y, float rotation, float decision_margin, int hamming, float goodness, float x_translation, float y_translation, float z_translation, float x_rotation, float y_rotation, float z_rotation)"
                                },
                                "corners": {
                                    "type": "func",
                                    "name": "corners",
                                    "doc": {
                                        "brief": "get coordinate of AprilTag",
                                        "return": "return the coordinate of the AprilTag.",
                                        "maixpy": "maix.image.AprilTag.corners",
                                        "py_doc": "get coordinate of AprilTag\n\nReturns: return the coordinate of the AprilTag.\n"
                                    },
                                    "args": [],
                                    "ret_type": "std::vector<std::vector<int>>",
                                    "static": false,
                                    "def": "std::vector<std::vector<int>> corners()"
                                },
                                "rect": {
                                    "type": "func",
                                    "name": "rect",
                                    "doc": {
                                        "brief": "get rectangle of AprilTag",
                                        "return": "return the rectangle of the AprilTag. format is {x, y, w, h}, type is std::vector<int>",
                                        "maixpy": "maix.image.AprilTag.rect",
                                        "py_doc": "get rectangle of AprilTag\n\nReturns: return the rectangle of the AprilTag. format is {x, y, w, h}, type is std::vector<int>\n"
                                    },
                                    "args": [],
                                    "ret_type": "std::vector<int>",
                                    "static": false,
                                    "def": "std::vector<int> rect()"
                                },
                                "x": {
                                    "type": "func",
                                    "name": "x",
                                    "doc": {
                                        "brief": "get x of AprilTag",
                                        "return": "return x of the AprilTag, type is int",
                                        "maixpy": "maix.image.AprilTag.x",
                                        "py_doc": "get x of AprilTag\n\nReturns: return x of the AprilTag, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int x()"
                                },
                                "y": {
                                    "type": "func",
                                    "name": "y",
                                    "doc": {
                                        "brief": "get y of AprilTag",
                                        "return": "return y of the AprilTag, type is int",
                                        "maixpy": "maix.image.AprilTag.y",
                                        "py_doc": "get y of AprilTag\n\nReturns: return y of the AprilTag, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int y()"
                                },
                                "w": {
                                    "type": "func",
                                    "name": "w",
                                    "doc": {
                                        "brief": "get w of AprilTag",
                                        "return": "return w of the AprilTag, type is int",
                                        "maixpy": "maix.image.AprilTag.w",
                                        "py_doc": "get w of AprilTag\n\nReturns: return w of the AprilTag, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int w()"
                                },
                                "h": {
                                    "type": "func",
                                    "name": "h",
                                    "doc": {
                                        "brief": "get h of AprilTag",
                                        "return": "return h of the AprilTag, type is int",
                                        "maixpy": "maix.image.AprilTag.h",
                                        "py_doc": "get h of AprilTag\n\nReturns: return h of the AprilTag, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int h()"
                                },
                                "id": {
                                    "type": "func",
                                    "name": "id",
                                    "doc": {
                                        "brief": "get id of AprilTag",
                                        "return": "return id of the AprilTag, type is int",
                                        "maixpy": "maix.image.AprilTag.id",
                                        "py_doc": "get id of AprilTag\n\nReturns: return id of the AprilTag, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int id()"
                                },
                                "family": {
                                    "type": "func",
                                    "name": "family",
                                    "doc": {
                                        "brief": "get family of AprilTag",
                                        "return": "return family of the AprilTag, type is int",
                                        "maixpy": "maix.image.AprilTag.family",
                                        "py_doc": "get family of AprilTag\n\nReturns: return family of the AprilTag, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int family()"
                                },
                                "cx": {
                                    "type": "func",
                                    "name": "cx",
                                    "doc": {
                                        "brief": "get cx of AprilTag",
                                        "return": "return cx of the AprilTag, type is int",
                                        "maixpy": "maix.image.AprilTag.cx",
                                        "py_doc": "get cx of AprilTag\n\nReturns: return cx of the AprilTag, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int cx()"
                                },
                                "cxf": {
                                    "type": "func",
                                    "name": "cxf",
                                    "doc": {
                                        "brief": "get cxf of AprilTag",
                                        "return": "return cxf of the AprilTag, type is float",
                                        "maixpy": "maix.image.AprilTag.cxf",
                                        "py_doc": "get cxf of AprilTag\n\nReturns: return cxf of the AprilTag, type is float\n"
                                    },
                                    "args": [],
                                    "ret_type": "float",
                                    "static": false,
                                    "def": "float cxf()"
                                },
                                "cy": {
                                    "type": "func",
                                    "name": "cy",
                                    "doc": {
                                        "brief": "get cy of AprilTag",
                                        "return": "return cy of the AprilTag, type is int",
                                        "maixpy": "maix.image.AprilTag.cy",
                                        "py_doc": "get cy of AprilTag\n\nReturns: return cy of the AprilTag, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int cy()"
                                },
                                "cyf": {
                                    "type": "func",
                                    "name": "cyf",
                                    "doc": {
                                        "brief": "get cyf of AprilTag",
                                        "return": "return cyf of the AprilTag, type is float",
                                        "maixpy": "maix.image.AprilTag.cyf",
                                        "py_doc": "get cyf of AprilTag\n\nReturns: return cyf of the AprilTag, type is float\n"
                                    },
                                    "args": [],
                                    "ret_type": "float",
                                    "static": false,
                                    "def": "float cyf()"
                                },
                                "rotation": {
                                    "type": "func",
                                    "name": "rotation",
                                    "doc": {
                                        "brief": "get rotation of AprilTag",
                                        "return": "return rotation of the AprilTag, type is float",
                                        "maixpy": "maix.image.AprilTag.rotation",
                                        "py_doc": "get rotation of AprilTag\n\nReturns: return rotation of the AprilTag, type is float\n"
                                    },
                                    "args": [],
                                    "ret_type": "float",
                                    "static": false,
                                    "def": "float rotation()"
                                },
                                "decision_margin": {
                                    "type": "func",
                                    "name": "decision_margin",
                                    "doc": {
                                        "brief": "Get decision_margin of AprilTag",
                                        "return": "Returns the quality of the apriltag match (0.0 - 1.0) where 1.0 is the best.",
                                        "maixpy": "maix.image.AprilTag.decision_margin",
                                        "py_doc": "Get decision_margin of AprilTag\n\nReturns: Returns the quality of the apriltag match (0.0 - 1.0) where 1.0 is the best.\n"
                                    },
                                    "args": [],
                                    "ret_type": "float",
                                    "static": false,
                                    "def": "float decision_margin()"
                                },
                                "hamming": {
                                    "type": "func",
                                    "name": "hamming",
                                    "doc": {
                                        "brief": "get hamming of AprilTag",
                                        "return": "Returns the number of accepted bit errors for this tag.\nreturn 0, means 0 bit errors will be accepted.\n1 is TAG25H7, means up to 1 bit error may be accepted\n2 is TAG25H9, means up to 3 bit errors may be accepted\n3 is TAG36H10, means up to 3 bit errors may be accepted\n4 is TAG36H11, means up to 4 bit errors may be accepted\n5 is ARTOOLKIT, means 0 bit errors will be accepted",
                                        "maixpy": "maix.image.AprilTag.hamming",
                                        "py_doc": "get hamming of AprilTag\n\nReturns: Returns the number of accepted bit errors for this tag.\nreturn 0, means 0 bit errors will be accepted.\n1 is TAG25H7, means up to 1 bit error may be accepted\n2 is TAG25H9, means up to 3 bit errors may be accepted\n3 is TAG36H10, means up to 3 bit errors may be accepted\n4 is TAG36H11, means up to 4 bit errors may be accepted\n5 is ARTOOLKIT, means 0 bit errors will be accepted\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int hamming()"
                                },
                                "goodness": {
                                    "type": "func",
                                    "name": "goodness",
                                    "doc": {
                                        "brief": "get goodness of AprilTag",
                                        "return": "return goodness of the AprilTag, type is float\nNote: This value is always 0.0 for now.",
                                        "maixpy": "maix.image.AprilTag.goodness",
                                        "py_doc": "get goodness of AprilTag\n\nReturns: return goodness of the AprilTag, type is float\nNote: This value is always 0.0 for now.\n"
                                    },
                                    "args": [],
                                    "ret_type": "float",
                                    "static": false,
                                    "def": "float goodness()"
                                },
                                "x_translation": {
                                    "type": "func",
                                    "name": "x_translation",
                                    "doc": {
                                        "brief": "get x_translation of AprilTag",
                                        "return": "return x_translation of the AprilTag, type is float",
                                        "maixpy": "maix.image.AprilTag.x_translation",
                                        "py_doc": "get x_translation of AprilTag\n\nReturns: return x_translation of the AprilTag, type is float\n"
                                    },
                                    "args": [],
                                    "ret_type": "float",
                                    "static": false,
                                    "def": "float x_translation()"
                                },
                                "y_translation": {
                                    "type": "func",
                                    "name": "y_translation",
                                    "doc": {
                                        "brief": "get y_translation of AprilTag",
                                        "return": "return y_translation of the AprilTag, type is float",
                                        "maixpy": "maix.image.AprilTag.y_translation",
                                        "py_doc": "get y_translation of AprilTag\n\nReturns: return y_translation of the AprilTag, type is float\n"
                                    },
                                    "args": [],
                                    "ret_type": "float",
                                    "static": false,
                                    "def": "float y_translation()"
                                },
                                "z_translation": {
                                    "type": "func",
                                    "name": "z_translation",
                                    "doc": {
                                        "brief": "get z_translation of AprilTag",
                                        "return": "return z_translation of the AprilTag, type is float",
                                        "maixpy": "maix.image.AprilTag.z_translation",
                                        "py_doc": "get z_translation of AprilTag\n\nReturns: return z_translation of the AprilTag, type is float\n"
                                    },
                                    "args": [],
                                    "ret_type": "float",
                                    "static": false,
                                    "def": "float z_translation()"
                                },
                                "x_rotation": {
                                    "type": "func",
                                    "name": "x_rotation",
                                    "doc": {
                                        "brief": "get x_rotation of AprilTag",
                                        "return": "return x_rotation of the AprilTag, type is float",
                                        "maixpy": "maix.image.AprilTag.x_rotation",
                                        "py_doc": "get x_rotation of AprilTag\n\nReturns: return x_rotation of the AprilTag, type is float\n"
                                    },
                                    "args": [],
                                    "ret_type": "float",
                                    "static": false,
                                    "def": "float x_rotation()"
                                },
                                "y_rotation": {
                                    "type": "func",
                                    "name": "y_rotation",
                                    "doc": {
                                        "brief": "get y_rotation of AprilTag",
                                        "return": "return y_rotation of the AprilTag, type is float",
                                        "maixpy": "maix.image.AprilTag.y_rotation",
                                        "py_doc": "get y_rotation of AprilTag\n\nReturns: return y_rotation of the AprilTag, type is float\n"
                                    },
                                    "args": [],
                                    "ret_type": "float",
                                    "static": false,
                                    "def": "float y_rotation()"
                                },
                                "z_rotation": {
                                    "type": "func",
                                    "name": "z_rotation",
                                    "doc": {
                                        "brief": "get z_rotation of AprilTag",
                                        "return": "return z_rotation of the AprilTag, type is float",
                                        "maixpy": "maix.image.AprilTag.z_rotation",
                                        "py_doc": "get z_rotation of AprilTag\n\nReturns: return z_rotation of the AprilTag, type is float\n"
                                    },
                                    "args": [],
                                    "ret_type": "float",
                                    "static": false,
                                    "def": "float z_rotation()"
                                }
                            },
                            "def": "class AprilTag"
                        },
                        "DataMatrix": {
                            "type": "class",
                            "name": "DataMatrix",
                            "doc": {
                                "brief": "DataMatrix class",
                                "maixpy": "maix.image.DataMatrix",
                                "py_doc": "DataMatrix class"
                            },
                            "members": {
                                "__init__": {
                                    "type": "func",
                                    "name": "DataMatrix",
                                    "doc": {
                                        "brief": "DataMatrix constructor",
                                        "param": {
                                            "rect": "Inlucdes the top-left corner and the width and height of the rectangle. format is {x, y, w, h}, type is std::vector<int>",
                                            "corners": "Includes the four corners of the rectangle. format is {{x0, y0}, {x1, y1}, {x2, y2}, {x3, y3}}, type is std::vector<std::vector<int>>",
                                            "payload": "The payload of the DataMatrix",
                                            "rotation": "The rotation of the DataMatrix",
                                            "rows": "The rows of the DataMatrix",
                                            "columns": "The columns of the DataMatrix",
                                            "capacity": "The capacity of the DataMatrix",
                                            "padding": "The padding of the DataMatrix"
                                        },
                                        "maixpy": "maix.image.DataMatrix.__init__",
                                        "py_doc": "DataMatrix constructor\n\nArgs:\n  - rect: Inlucdes the top-left corner and the width and height of the rectangle. format is {x, y, w, h}, type is std::vector<int>\n  - corners: Includes the four corners of the rectangle. format is {{x0, y0}, {x1, y1}, {x2, y2}, {x3, y3}}, type is std::vector<std::vector<int>>\n  - payload: The payload of the DataMatrix\n  - rotation: The rotation of the DataMatrix\n  - rows: The rows of the DataMatrix\n  - columns: The columns of the DataMatrix\n  - capacity: The capacity of the DataMatrix\n  - padding: The padding of the DataMatrix\n"
                                    },
                                    "args": [
                                        [
                                            "std::vector<int> &",
                                            "rect",
                                            null
                                        ],
                                        [
                                            "std::vector<std::vector<int>> &",
                                            "corners",
                                            null
                                        ],
                                        [
                                            "std::string &",
                                            "payload",
                                            null
                                        ],
                                        [
                                            "float",
                                            "rotation",
                                            null
                                        ],
                                        [
                                            "int",
                                            "rows",
                                            null
                                        ],
                                        [
                                            "int",
                                            "columns",
                                            null
                                        ],
                                        [
                                            "int",
                                            "capacity",
                                            null
                                        ],
                                        [
                                            "int",
                                            "padding",
                                            null
                                        ]
                                    ],
                                    "ret_type": null,
                                    "static": false,
                                    "def": "DataMatrix(std::vector<int> &rect, std::vector<std::vector<int>> &corners, std::string &payload, float rotation, int rows, int columns, int capacity, int padding)"
                                },
                                "corners": {
                                    "type": "func",
                                    "name": "corners",
                                    "doc": {
                                        "brief": "get coordinate of DataMatrix",
                                        "return": "return the coordinate of the DataMatrix.",
                                        "maixpy": "maix.image.DataMatrix.corners",
                                        "py_doc": "get coordinate of DataMatrix\n\nReturns: return the coordinate of the DataMatrix.\n"
                                    },
                                    "args": [],
                                    "ret_type": "std::vector<std::vector<int>>",
                                    "static": false,
                                    "def": "std::vector<std::vector<int>> corners()"
                                },
                                "rect": {
                                    "type": "func",
                                    "name": "rect",
                                    "doc": {
                                        "brief": "get rectangle of DataMatrix",
                                        "return": "return the rectangle of the DataMatrix. format is {x, y, w, h}, type is std::vector<int>",
                                        "maixpy": "maix.image.DataMatrix.rect",
                                        "py_doc": "get rectangle of DataMatrix\n\nReturns: return the rectangle of the DataMatrix. format is {x, y, w, h}, type is std::vector<int>\n"
                                    },
                                    "args": [],
                                    "ret_type": "std::vector<int>",
                                    "static": false,
                                    "def": "std::vector<int> rect()"
                                },
                                "x": {
                                    "type": "func",
                                    "name": "x",
                                    "doc": {
                                        "brief": "get x of DataMatrix",
                                        "return": "return x of the DataMatrix, type is int",
                                        "maixpy": "maix.image.DataMatrix.x",
                                        "py_doc": "get x of DataMatrix\n\nReturns: return x of the DataMatrix, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int x()"
                                },
                                "y": {
                                    "type": "func",
                                    "name": "y",
                                    "doc": {
                                        "brief": "get y of DataMatrix",
                                        "return": "return y of the DataMatrix, type is int",
                                        "maixpy": "maix.image.DataMatrix.y",
                                        "py_doc": "get y of DataMatrix\n\nReturns: return y of the DataMatrix, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int y()"
                                },
                                "w": {
                                    "type": "func",
                                    "name": "w",
                                    "doc": {
                                        "brief": "get w of DataMatrix",
                                        "return": "return w of the DataMatrix, type is int",
                                        "maixpy": "maix.image.DataMatrix.w",
                                        "py_doc": "get w of DataMatrix\n\nReturns: return w of the DataMatrix, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int w()"
                                },
                                "h": {
                                    "type": "func",
                                    "name": "h",
                                    "doc": {
                                        "brief": "get h of DataMatrix",
                                        "return": "return h of the DataMatrix, type is int",
                                        "maixpy": "maix.image.DataMatrix.h",
                                        "py_doc": "get h of DataMatrix\n\nReturns: return h of the DataMatrix, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int h()"
                                },
                                "payload": {
                                    "type": "func",
                                    "name": "payload",
                                    "doc": {
                                        "brief": "get payload of DataMatrix",
                                        "return": "return payload of the DataMatrix, type is std::string",
                                        "maixpy": "maix.image.DataMatrix.payload",
                                        "py_doc": "get payload of DataMatrix\n\nReturns: return payload of the DataMatrix, type is std::string\n"
                                    },
                                    "args": [],
                                    "ret_type": "std::string",
                                    "static": false,
                                    "def": "std::string payload()"
                                },
                                "rotation": {
                                    "type": "func",
                                    "name": "rotation",
                                    "doc": {
                                        "brief": "get rotation of DataMatrix",
                                        "return": "return rotation of the DataMatrix, type is float",
                                        "maixpy": "maix.image.DataMatrix.rotation",
                                        "py_doc": "get rotation of DataMatrix\n\nReturns: return rotation of the DataMatrix, type is float\n"
                                    },
                                    "args": [],
                                    "ret_type": "float",
                                    "static": false,
                                    "def": "float rotation()"
                                },
                                "rows": {
                                    "type": "func",
                                    "name": "rows",
                                    "doc": {
                                        "brief": "get rows of DataMatrix",
                                        "return": "return rows of the DataMatrix, type is int",
                                        "maixpy": "maix.image.DataMatrix.rows",
                                        "py_doc": "get rows of DataMatrix\n\nReturns: return rows of the DataMatrix, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int rows()"
                                },
                                "columns": {
                                    "type": "func",
                                    "name": "columns",
                                    "doc": {
                                        "brief": "get columns of DataMatrix",
                                        "return": "return columns of the DataMatrix, type is int",
                                        "maixpy": "maix.image.DataMatrix.columns",
                                        "py_doc": "get columns of DataMatrix\n\nReturns: return columns of the DataMatrix, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int columns()"
                                },
                                "capacity": {
                                    "type": "func",
                                    "name": "capacity",
                                    "doc": {
                                        "brief": "et capacity of DataMatrix",
                                        "return": "returns how many characters could fit in this data matrix, type is int",
                                        "maixpy": "maix.image.DataMatrix.capacity",
                                        "py_doc": "et capacity of DataMatrix\n\nReturns: returns how many characters could fit in this data matrix, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int capacity()"
                                },
                                "padding": {
                                    "type": "func",
                                    "name": "padding",
                                    "doc": {
                                        "brief": "get padding of DataMatrix",
                                        "return": "returns how many unused characters are in this data matrix, type is int",
                                        "maixpy": "maix.image.DataMatrix.padding",
                                        "py_doc": "get padding of DataMatrix\n\nReturns: returns how many unused characters are in this data matrix, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int padding()"
                                }
                            },
                            "def": "class DataMatrix"
                        },
                        "BarCode": {
                            "type": "class",
                            "name": "BarCode",
                            "doc": {
                                "brief": "BarCode class",
                                "maixpy": "maix.image.BarCode",
                                "py_doc": "BarCode class"
                            },
                            "members": {
                                "__init__": {
                                    "type": "func",
                                    "name": "BarCode",
                                    "doc": {
                                        "brief": "BarCode constructor",
                                        "param": {
                                            "rect": "Inlucdes the top-left corner and the width and height of the rectangle. format is {x, y, w, h}, type is std::vector<int>",
                                            "corners": "Includes the four corners of the rectangle. format is {{x0, y0}, {x1, y1}, {x2, y2}, {x3, y3}}, type is std::vector<std::vector<int>>",
                                            "payload": "The payload of the BarCode",
                                            "type": "The type of the BarCode",
                                            "rotation": "The rotation of the BarCode",
                                            "quality": "The quality of the BarCode"
                                        },
                                        "maixpy": "maix.image.BarCode.__init__",
                                        "py_doc": "BarCode constructor\n\nArgs:\n  - rect: Inlucdes the top-left corner and the width and height of the rectangle. format is {x, y, w, h}, type is std::vector<int>\n  - corners: Includes the four corners of the rectangle. format is {{x0, y0}, {x1, y1}, {x2, y2}, {x3, y3}}, type is std::vector<std::vector<int>>\n  - payload: The payload of the BarCode\n  - type: The type of the BarCode\n  - rotation: The rotation of the BarCode\n  - quality: The quality of the BarCode\n"
                                    },
                                    "args": [
                                        [
                                            "std::vector<int> &",
                                            "rect",
                                            null
                                        ],
                                        [
                                            "std::vector<std::vector<int>> &",
                                            "corners",
                                            null
                                        ],
                                        [
                                            "std::string &",
                                            "payload",
                                            null
                                        ],
                                        [
                                            "int",
                                            "type",
                                            null
                                        ],
                                        [
                                            "float",
                                            "rotation",
                                            null
                                        ],
                                        [
                                            "int",
                                            "quality",
                                            null
                                        ]
                                    ],
                                    "ret_type": null,
                                    "static": false,
                                    "def": "BarCode(std::vector<int> &rect, std::vector<std::vector<int>> &corners, std::string &payload, int type, float rotation, int quality)"
                                },
                                "corners": {
                                    "type": "func",
                                    "name": "corners",
                                    "doc": {
                                        "brief": "get coordinate of BarCode",
                                        "return": "return the coordinate of the BarCode.",
                                        "maixpy": "maix.image.BarCode.corners",
                                        "py_doc": "get coordinate of BarCode\n\nReturns: return the coordinate of the BarCode.\n"
                                    },
                                    "args": [],
                                    "ret_type": "std::vector<std::vector<int>>",
                                    "static": false,
                                    "def": "std::vector<std::vector<int>> corners()"
                                },
                                "rect": {
                                    "type": "func",
                                    "name": "rect",
                                    "doc": {
                                        "brief": "get rectangle of BarCode",
                                        "return": "return the rectangle of the BarCode. format is {x, y, w, h}, type is std::vector<int>",
                                        "maixpy": "maix.image.BarCode.rect",
                                        "py_doc": "get rectangle of BarCode\n\nReturns: return the rectangle of the BarCode. format is {x, y, w, h}, type is std::vector<int>\n"
                                    },
                                    "args": [],
                                    "ret_type": "std::vector<int>",
                                    "static": false,
                                    "def": "std::vector<int> rect()"
                                },
                                "x": {
                                    "type": "func",
                                    "name": "x",
                                    "doc": {
                                        "brief": "get x of BarCode",
                                        "return": "return x of the BarCode, type is int",
                                        "maixpy": "maix.image.BarCode.x",
                                        "py_doc": "get x of BarCode\n\nReturns: return x of the BarCode, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int x()"
                                },
                                "y": {
                                    "type": "func",
                                    "name": "y",
                                    "doc": {
                                        "brief": "get y of BarCode",
                                        "return": "return y of the BarCode, type is int",
                                        "maixpy": "maix.image.BarCode.y",
                                        "py_doc": "get y of BarCode\n\nReturns: return y of the BarCode, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int y()"
                                },
                                "w": {
                                    "type": "func",
                                    "name": "w",
                                    "doc": {
                                        "brief": "get w of BarCode",
                                        "return": "return w of the BarCode, type is int",
                                        "maixpy": "maix.image.BarCode.w",
                                        "py_doc": "get w of BarCode\n\nReturns: return w of the BarCode, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int w()"
                                },
                                "h": {
                                    "type": "func",
                                    "name": "h",
                                    "doc": {
                                        "brief": "get h of BarCode",
                                        "return": "return h of the BarCode, type is int",
                                        "maixpy": "maix.image.BarCode.h",
                                        "py_doc": "get h of BarCode\n\nReturns: return h of the BarCode, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int h()"
                                },
                                "payload": {
                                    "type": "func",
                                    "name": "payload",
                                    "doc": {
                                        "brief": "get payload of BarCode",
                                        "return": "return payload of the BarCode, type is std::string",
                                        "maixpy": "maix.image.BarCode.payload",
                                        "py_doc": "get payload of BarCode\n\nReturns: return payload of the BarCode, type is std::string\n"
                                    },
                                    "args": [],
                                    "ret_type": "std::string",
                                    "static": false,
                                    "def": "std::string payload()"
                                },
                                "type": {
                                    "type": "func",
                                    "name": "type",
                                    "doc": {
                                        "brief": "get type of BarCode",
                                        "return": "return type of the BarCode, type is int",
                                        "maixpy": "maix.image.BarCode.type",
                                        "py_doc": "get type of BarCode\n\nReturns: return type of the BarCode, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int type()"
                                },
                                "rotation": {
                                    "type": "func",
                                    "name": "rotation",
                                    "doc": {
                                        "brief": "get rotation of BarCode",
                                        "return": "return rotation of the BarCode, type is float. FIXME: always return 0.0",
                                        "maixpy": "maix.image.BarCode.rotation",
                                        "py_doc": "get rotation of BarCode\n\nReturns: return rotation of the BarCode, type is float. FIXME: always return 0.0\n"
                                    },
                                    "args": [],
                                    "ret_type": "float",
                                    "static": false,
                                    "def": "float rotation()"
                                },
                                "quality": {
                                    "type": "func",
                                    "name": "quality",
                                    "doc": {
                                        "brief": "get quality of BarCode",
                                        "return": "return quality of the BarCode, type is int",
                                        "maixpy": "maix.image.BarCode.quality",
                                        "py_doc": "get quality of BarCode\n\nReturns: return quality of the BarCode, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int quality()"
                                }
                            },
                            "def": "class BarCode"
                        },
                        "Statistics": {
                            "type": "class",
                            "name": "Statistics",
                            "doc": {
                                "brief": "Statistics class",
                                "maixpy": "maix.image.Statistics",
                                "py_doc": "Statistics class"
                            },
                            "members": {
                                "__init__": {
                                    "type": "func",
                                    "name": "Statistics",
                                    "doc": {
                                        "brief": "Statistics constructor",
                                        "param": {
                                            "format": "The statistics source image format",
                                            "l_statistics": "The statistics of the L channel. format is {mean, median, mode, std_dev, min, max, lq, uq}, type is std::vector<int>",
                                            "a_statistics": "The statistics of the A channel. format is {mean, median, mode, std_dev, min, max, lq, uq}, type is std::vector<int>",
                                            "b_statistics": "The statistics of the B channel. format is {mean, median, mode, std_dev, min, max, lq, uq}, type is std::vector<int>"
                                        },
                                        "maixpy": "maix.image.Statistics.__init__",
                                        "py_doc": "Statistics constructor\n\nArgs:\n  - format: The statistics source image format\n  - l_statistics: The statistics of the L channel. format is {mean, median, mode, std_dev, min, max, lq, uq}, type is std::vector<int>\n  - a_statistics: The statistics of the A channel. format is {mean, median, mode, std_dev, min, max, lq, uq}, type is std::vector<int>\n  - b_statistics: The statistics of the B channel. format is {mean, median, mode, std_dev, min, max, lq, uq}, type is std::vector<int>\n"
                                    },
                                    "args": [
                                        [
                                            "image::Format",
                                            "format",
                                            null
                                        ],
                                        [
                                            "std::vector<int> &",
                                            "l_statistics",
                                            null
                                        ],
                                        [
                                            "std::vector<int> &",
                                            "a_statistics",
                                            null
                                        ],
                                        [
                                            "std::vector<int> &",
                                            "b_statistics",
                                            null
                                        ]
                                    ],
                                    "ret_type": null,
                                    "static": false,
                                    "def": "Statistics(image::Format format, std::vector<int> &l_statistics, std::vector<int> &a_statistics, std::vector<int> &b_statistics)"
                                },
                                "format": {
                                    "type": "func",
                                    "name": "format",
                                    "doc": {
                                        "brief": "get format of Statistics source image",
                                        "return": "return format of the Statistics source image, type is image::Format",
                                        "maixpy": "maix.image.Statistics.format",
                                        "py_doc": "get format of Statistics source image\n\nReturns: return format of the Statistics source image, type is image::Format\n"
                                    },
                                    "args": [],
                                    "ret_type": "image::Format",
                                    "static": false,
                                    "def": "image::Format format()"
                                },
                                "l_mean": {
                                    "type": "func",
                                    "name": "l_mean",
                                    "doc": {
                                        "brief": "get L channel mean",
                                        "return": "return L channel mean, type is int",
                                        "maixpy": "maix.image.Statistics.l_mean",
                                        "py_doc": "get L channel mean\n\nReturns: return L channel mean, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int l_mean()"
                                },
                                "l_median": {
                                    "type": "func",
                                    "name": "l_median",
                                    "doc": {
                                        "brief": "get L channel median",
                                        "return": "return L channel median, type is int",
                                        "maixpy": "maix.image.Statistics.l_median",
                                        "py_doc": "get L channel median\n\nReturns: return L channel median, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int l_median()"
                                },
                                "l_mode": {
                                    "type": "func",
                                    "name": "l_mode",
                                    "doc": {
                                        "brief": "get L channel mode",
                                        "return": "return L channel mode, type is int",
                                        "maixpy": "maix.image.Statistics.l_mode",
                                        "py_doc": "get L channel mode\n\nReturns: return L channel mode, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int l_mode()"
                                },
                                "l_std_dev": {
                                    "type": "func",
                                    "name": "l_std_dev",
                                    "doc": {
                                        "brief": "get L channel std_dev",
                                        "return": "return L channel std_dev, type is int",
                                        "maixpy": "maix.image.Statistics.l_std_dev",
                                        "py_doc": "get L channel std_dev\n\nReturns: return L channel std_dev, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int l_std_dev()"
                                },
                                "l_min": {
                                    "type": "func",
                                    "name": "l_min",
                                    "doc": {
                                        "brief": "get L channel min",
                                        "return": "return L channel min, type is int",
                                        "maixpy": "maix.image.Statistics.l_min",
                                        "py_doc": "get L channel min\n\nReturns: return L channel min, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int l_min()"
                                },
                                "l_max": {
                                    "type": "func",
                                    "name": "l_max",
                                    "doc": {
                                        "brief": "get L channel max",
                                        "return": "return L channel max, type is int",
                                        "maixpy": "maix.image.Statistics.l_max",
                                        "py_doc": "get L channel max\n\nReturns: return L channel max, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int l_max()"
                                },
                                "l_lq": {
                                    "type": "func",
                                    "name": "l_lq",
                                    "doc": {
                                        "brief": "get L channel lq",
                                        "return": "return L channel lq, type is int",
                                        "maixpy": "maix.image.Statistics.l_lq",
                                        "py_doc": "get L channel lq\n\nReturns: return L channel lq, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int l_lq()"
                                },
                                "l_uq": {
                                    "type": "func",
                                    "name": "l_uq",
                                    "doc": {
                                        "brief": "get L channel uq",
                                        "return": "return L channel uq, type is int",
                                        "maixpy": "maix.image.Statistics.l_uq",
                                        "py_doc": "get L channel uq\n\nReturns: return L channel uq, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int l_uq()"
                                },
                                "a_mean": {
                                    "type": "func",
                                    "name": "a_mean",
                                    "doc": {
                                        "brief": "get A channel mean",
                                        "return": "return A channel mean, type is int",
                                        "maixpy": "maix.image.Statistics.a_mean",
                                        "py_doc": "get A channel mean\n\nReturns: return A channel mean, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int a_mean()"
                                },
                                "a_median": {
                                    "type": "func",
                                    "name": "a_median",
                                    "doc": {
                                        "brief": "get A channea median",
                                        "return": "return A channel median, type is int",
                                        "maixpy": "maix.image.Statistics.a_median",
                                        "py_doc": "get A channea median\n\nReturns: return A channel median, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int a_median()"
                                },
                                "a_mode": {
                                    "type": "func",
                                    "name": "a_mode",
                                    "doc": {
                                        "brief": "get A channel mode",
                                        "return": "return A channel mode, type is int",
                                        "maixpy": "maix.image.Statistics.a_mode",
                                        "py_doc": "get A channel mode\n\nReturns: return A channel mode, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int a_mode()"
                                },
                                "a_std_dev": {
                                    "type": "func",
                                    "name": "a_std_dev",
                                    "doc": {
                                        "brief": "get A channel std_dev",
                                        "return": "return A channel std_dev, type is int",
                                        "maixpy": "maix.image.Statistics.a_std_dev",
                                        "py_doc": "get A channel std_dev\n\nReturns: return A channel std_dev, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int a_std_dev()"
                                },
                                "a_min": {
                                    "type": "func",
                                    "name": "a_min",
                                    "doc": {
                                        "brief": "get A channel min",
                                        "return": "return A channel min, type is int",
                                        "maixpy": "maix.image.Statistics.a_min",
                                        "py_doc": "get A channel min\n\nReturns: return A channel min, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int a_min()"
                                },
                                "a_max": {
                                    "type": "func",
                                    "name": "a_max",
                                    "doc": {
                                        "brief": "get A channel max",
                                        "return": "return A channel max, type is int",
                                        "maixpy": "maix.image.Statistics.a_max",
                                        "py_doc": "get A channel max\n\nReturns: return A channel max, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int a_max()"
                                },
                                "a_lq": {
                                    "type": "func",
                                    "name": "a_lq",
                                    "doc": {
                                        "brief": "get A channel lq",
                                        "return": "return A channel lq, type is int",
                                        "maixpy": "maix.image.Statistics.a_lq",
                                        "py_doc": "get A channel lq\n\nReturns: return A channel lq, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int a_lq()"
                                },
                                "a_uq": {
                                    "type": "func",
                                    "name": "a_uq",
                                    "doc": {
                                        "brief": "get A channel uq",
                                        "return": "return A channel uq, type is int",
                                        "maixpy": "maix.image.Statistics.a_uq",
                                        "py_doc": "get A channel uq\n\nReturns: return A channel uq, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int a_uq()"
                                },
                                "b_mean": {
                                    "type": "func",
                                    "name": "b_mean",
                                    "doc": {
                                        "brief": "get B channel mean",
                                        "return": "return B channel mean, type is int",
                                        "maixpy": "maix.image.Statistics.b_mean",
                                        "py_doc": "get B channel mean\n\nReturns: return B channel mean, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int b_mean()"
                                },
                                "b_median": {
                                    "type": "func",
                                    "name": "b_median",
                                    "doc": {
                                        "brief": "get B channea median",
                                        "return": "return B channel median, type is int",
                                        "maixpy": "maix.image.Statistics.b_median",
                                        "py_doc": "get B channea median\n\nReturns: return B channel median, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int b_median()"
                                },
                                "b_mode": {
                                    "type": "func",
                                    "name": "b_mode",
                                    "doc": {
                                        "brief": "get B channel mode",
                                        "return": "return B channel mode, type is int",
                                        "maixpy": "maix.image.Statistics.b_mode",
                                        "py_doc": "get B channel mode\n\nReturns: return B channel mode, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int b_mode()"
                                },
                                "b_std_dev": {
                                    "type": "func",
                                    "name": "b_std_dev",
                                    "doc": {
                                        "brief": "get B channel std_dev",
                                        "return": "return B channel std_dev, type is int",
                                        "maixpy": "maix.image.Statistics.b_std_dev",
                                        "py_doc": "get B channel std_dev\n\nReturns: return B channel std_dev, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int b_std_dev()"
                                },
                                "b_min": {
                                    "type": "func",
                                    "name": "b_min",
                                    "doc": {
                                        "brief": "get B channel min",
                                        "return": "return B channel min, type is int",
                                        "maixpy": "maix.image.Statistics.b_min",
                                        "py_doc": "get B channel min\n\nReturns: return B channel min, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int b_min()"
                                },
                                "b_max": {
                                    "type": "func",
                                    "name": "b_max",
                                    "doc": {
                                        "brief": "get B channel max",
                                        "return": "return B channel max, type is int",
                                        "maixpy": "maix.image.Statistics.b_max",
                                        "py_doc": "get B channel max\n\nReturns: return B channel max, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int b_max()"
                                },
                                "b_lq": {
                                    "type": "func",
                                    "name": "b_lq",
                                    "doc": {
                                        "brief": "get B channel lq",
                                        "return": "return B channel lq, type is int",
                                        "maixpy": "maix.image.Statistics.b_lq",
                                        "py_doc": "get B channel lq\n\nReturns: return B channel lq, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int b_lq()"
                                },
                                "b_uq": {
                                    "type": "func",
                                    "name": "b_uq",
                                    "doc": {
                                        "brief": "get B channel uq",
                                        "return": "return B channel uq, type is int",
                                        "maixpy": "maix.image.Statistics.b_uq",
                                        "py_doc": "get B channel uq\n\nReturns: return B channel uq, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int b_uq()"
                                }
                            },
                            "def": "class Statistics"
                        },
                        "Displacement": {
                            "type": "class",
                            "name": "Displacement",
                            "doc": {
                                "brief": "Displacement class",
                                "maixpy": "maix.image.Displacement",
                                "py_doc": "Displacement class"
                            },
                            "members": {
                                "__init__": {
                                    "type": "func",
                                    "name": "Displacement",
                                    "doc": {
                                        "brief": "Displacement constructor",
                                        "param": {
                                            "x_translation": "The x_translation of the Displacement",
                                            "y_translation": "The y_translation of the Displacement",
                                            "rotation": "The rotation of the Displacement",
                                            "scale": "The scale of the Displacement",
                                            "response": "The response of the Displacement"
                                        },
                                        "maixpy": "maix.image.Displacement.__init__",
                                        "py_doc": "Displacement constructor\n\nArgs:\n  - x_translation: The x_translation of the Displacement\n  - y_translation: The y_translation of the Displacement\n  - rotation: The rotation of the Displacement\n  - scale: The scale of the Displacement\n  - response: The response of the Displacement\n"
                                    },
                                    "args": [
                                        [
                                            "float",
                                            "x_translation",
                                            null
                                        ],
                                        [
                                            "float",
                                            "y_translation",
                                            null
                                        ],
                                        [
                                            "float",
                                            "rotation",
                                            null
                                        ],
                                        [
                                            "float",
                                            "scale",
                                            null
                                        ],
                                        [
                                            "float",
                                            "response",
                                            null
                                        ]
                                    ],
                                    "ret_type": null,
                                    "static": false,
                                    "def": "Displacement(float x_translation, float y_translation, float rotation, float scale, float response)"
                                },
                                "x_translation": {
                                    "type": "func",
                                    "name": "x_translation",
                                    "doc": {
                                        "brief": "get x_translation of Displacement",
                                        "return": "return x_translation of the Displacement, type is float",
                                        "maixpy": "maix.image.Displacement.x_translation",
                                        "py_doc": "get x_translation of Displacement\n\nReturns: return x_translation of the Displacement, type is float\n"
                                    },
                                    "args": [],
                                    "ret_type": "float",
                                    "static": false,
                                    "def": "float x_translation()"
                                },
                                "y_translation": {
                                    "type": "func",
                                    "name": "y_translation",
                                    "doc": {
                                        "brief": "get y_translation of Displacement",
                                        "return": "return y_translation of the Displacement, type is float",
                                        "maixpy": "maix.image.Displacement.y_translation",
                                        "py_doc": "get y_translation of Displacement\n\nReturns: return y_translation of the Displacement, type is float\n"
                                    },
                                    "args": [],
                                    "ret_type": "float",
                                    "static": false,
                                    "def": "float y_translation()"
                                },
                                "rotation": {
                                    "type": "func",
                                    "name": "rotation",
                                    "doc": {
                                        "brief": "get rotation of Displacement",
                                        "return": "return rotation of the Displacement, type is float",
                                        "maixpy": "maix.image.Displacement.rotation",
                                        "py_doc": "get rotation of Displacement\n\nReturns: return rotation of the Displacement, type is float\n"
                                    },
                                    "args": [],
                                    "ret_type": "float",
                                    "static": false,
                                    "def": "float rotation()"
                                },
                                "scale": {
                                    "type": "func",
                                    "name": "scale",
                                    "doc": {
                                        "brief": "get scale of Displacement",
                                        "return": "return scale of the Displacement, type is float",
                                        "maixpy": "maix.image.Displacement.scale",
                                        "py_doc": "get scale of Displacement\n\nReturns: return scale of the Displacement, type is float\n"
                                    },
                                    "args": [],
                                    "ret_type": "float",
                                    "static": false,
                                    "def": "float scale()"
                                },
                                "response": {
                                    "type": "func",
                                    "name": "response",
                                    "doc": {
                                        "brief": "get response of Displacement",
                                        "return": "return response of the Displacement, type is float",
                                        "maixpy": "maix.image.Displacement.response",
                                        "py_doc": "get response of Displacement\n\nReturns: return response of the Displacement, type is float\n"
                                    },
                                    "args": [],
                                    "ret_type": "float",
                                    "static": false,
                                    "def": "float response()"
                                }
                            },
                            "def": "class Displacement"
                        },
                        "LBPKeyPoint": {
                            "type": "class",
                            "name": "LBPKeyPoint",
                            "doc": {
                                "brief": "LBPKeyPoint class",
                                "maixpy": "maix.image.LBPKeyPoint",
                                "py_doc": "LBPKeyPoint class"
                            },
                            "members": {
                                "__init__": {
                                    "type": "func",
                                    "name": "LBPKeyPoint",
                                    "doc": {
                                        "brief": "LBPKeyPoint constructor",
                                        "param": {
                                            "data": "The data of the LBPKeyPoint"
                                        },
                                        "maixpy": "maix.image.LBPKeyPoint.__init__",
                                        "py_doc": "LBPKeyPoint constructor\n\nArgs:\n  - data: The data of the LBPKeyPoint\n"
                                    },
                                    "args": [
                                        [
                                            "std::valarray<uint8_t> &",
                                            "data",
                                            null
                                        ]
                                    ],
                                    "ret_type": null,
                                    "static": false,
                                    "def": "LBPKeyPoint(std::valarray<uint8_t> &data)"
                                }
                            },
                            "def": "class LBPKeyPoint"
                        },
                        "KeyPoint": {
                            "type": "class",
                            "name": "KeyPoint",
                            "doc": {
                                "brief": "KeyPoint class",
                                "maixpy": "maix.image.KeyPoint",
                                "py_doc": "KeyPoint class"
                            },
                            "members": {
                                "__init__": {
                                    "type": "func",
                                    "name": "KeyPoint",
                                    "doc": {
                                        "brief": "KeyPoint constructor",
                                        "param": {
                                            "x": "The x of the KeyPoint",
                                            "y": "The y of the KeyPoint",
                                            "score": "The score of the KeyPoint",
                                            "octave": "The octave of the KeyPoint",
                                            "angle": "The angle of the KeyPoint",
                                            "matched": "The matched of the KeyPoint",
                                            "desc": "The desc of the KeyPoint"
                                        },
                                        "maixpy": "maix.image.KeyPoint.__init__",
                                        "py_doc": "KeyPoint constructor\n\nArgs:\n  - x: The x of the KeyPoint\n  - y: The y of the KeyPoint\n  - score: The score of the KeyPoint\n  - octave: The octave of the KeyPoint\n  - angle: The angle of the KeyPoint\n  - matched: The matched of the KeyPoint\n  - desc: The desc of the KeyPoint\n"
                                    },
                                    "args": [
                                        [
                                            "uint16_t",
                                            "x",
                                            null
                                        ],
                                        [
                                            "uint16_t",
                                            "y",
                                            null
                                        ],
                                        [
                                            "uint16_t",
                                            "score",
                                            null
                                        ],
                                        [
                                            "uint16_t",
                                            "octave",
                                            null
                                        ],
                                        [
                                            "uint16_t",
                                            "angle",
                                            null
                                        ],
                                        [
                                            "uint16_t",
                                            "matched",
                                            null
                                        ],
                                        [
                                            "std::vector<uint8_t> &",
                                            "desc",
                                            null
                                        ]
                                    ],
                                    "ret_type": null,
                                    "static": false,
                                    "def": "KeyPoint(uint16_t x, uint16_t y, uint16_t score, uint16_t octave, uint16_t angle, uint16_t matched, std::vector<uint8_t> &desc)"
                                }
                            },
                            "def": "class KeyPoint"
                        },
                        "KPTMatch": {
                            "type": "class",
                            "name": "KPTMatch",
                            "doc": {
                                "brief": "KPTMatch class",
                                "maixpy": "maix.image.KPTMatch",
                                "py_doc": "KPTMatch class"
                            },
                            "members": {
                                "__init__": {
                                    "type": "func",
                                    "name": "KPTMatch",
                                    "doc": {
                                        "brief": "KPTMatch constructor",
                                        "param": {
                                            "cx": "The cx of the KPTMatch",
                                            "cy": "The cy of the KPTMatch",
                                            "x": "The x of the KPTMatch",
                                            "y": "The y of the KPTMatch",
                                            "w": "The w of the KPTMatch",
                                            "h": "The h of the KPTMatch",
                                            "score": "The score of the KPTMatch",
                                            "theta": "The theta of the KPTMatch",
                                            "match": "The match of the KPTMatch"
                                        },
                                        "maixpy": "maix.image.KPTMatch.__init__",
                                        "py_doc": "KPTMatch constructor\n\nArgs:\n  - cx: The cx of the KPTMatch\n  - cy: The cy of the KPTMatch\n  - x: The x of the KPTMatch\n  - y: The y of the KPTMatch\n  - w: The w of the KPTMatch\n  - h: The h of the KPTMatch\n  - score: The score of the KPTMatch\n  - theta: The theta of the KPTMatch\n  - match: The match of the KPTMatch\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "cx",
                                            null
                                        ],
                                        [
                                            "int",
                                            "cy",
                                            null
                                        ],
                                        [
                                            "int",
                                            "x",
                                            null
                                        ],
                                        [
                                            "int",
                                            "y",
                                            null
                                        ],
                                        [
                                            "int",
                                            "w",
                                            null
                                        ],
                                        [
                                            "int",
                                            "h",
                                            null
                                        ],
                                        [
                                            "int",
                                            "score",
                                            null
                                        ],
                                        [
                                            "int",
                                            "theta",
                                            null
                                        ],
                                        [
                                            "int",
                                            "match",
                                            null
                                        ]
                                    ],
                                    "ret_type": null,
                                    "static": false,
                                    "def": "KPTMatch(int cx, int cy, int x, int y, int w, int h, int score, int theta, int match)"
                                }
                            },
                            "def": "class KPTMatch"
                        },
                        "ORBKeyPoint": {
                            "type": "class",
                            "name": "ORBKeyPoint",
                            "doc": {
                                "brief": "ORBKeyPoint class",
                                "maixpy": "maix.image.ORBKeyPoint",
                                "py_doc": "ORBKeyPoint class"
                            },
                            "members": {
                                "__init__": {
                                    "type": "func",
                                    "name": "ORBKeyPoint",
                                    "doc": {
                                        "brief": "ORBKeyPoint constructor",
                                        "param": {
                                            "data": "The data of the ORBKeyPoint",
                                            "threshold": "The threshold of the ORBKeyPoint",
                                            "normalized": "The normalized of the ORBKeyPoint"
                                        },
                                        "maixpy": "maix.image.ORBKeyPoint.__init__",
                                        "py_doc": "ORBKeyPoint constructor\n\nArgs:\n  - data: The data of the ORBKeyPoint\n  - threshold: The threshold of the ORBKeyPoint\n  - normalized: The normalized of the ORBKeyPoint\n"
                                    },
                                    "args": [
                                        [
                                            "std::vector<image::KeyPoint> &",
                                            "data",
                                            null
                                        ],
                                        [
                                            "int",
                                            "threshold",
                                            null
                                        ],
                                        [
                                            "bool",
                                            "normalized",
                                            null
                                        ]
                                    ],
                                    "ret_type": null,
                                    "static": false,
                                    "def": "ORBKeyPoint(std::vector<image::KeyPoint> &data, int threshold, bool normalized)"
                                },
                                "get_data": {
                                    "type": "func",
                                    "name": "get_data",
                                    "doc": {
                                        "brief": "get data of ORBKeyPoint",
                                        "return": "return data of the ORBKeyPoint, type is std::vector<KeyPoint>",
                                        "maixpy": "maix.image.ORBKeyPoint.get_data",
                                        "py_doc": "get data of ORBKeyPoint\n\nReturns: return data of the ORBKeyPoint, type is std::vector<KeyPoint>\n"
                                    },
                                    "args": [],
                                    "ret_type": "std::vector<image::KeyPoint>",
                                    "static": false,
                                    "def": "std::vector<image::KeyPoint> get_data()"
                                }
                            },
                            "def": "class ORBKeyPoint"
                        },
                        "HaarCascade": {
                            "type": "class",
                            "name": "HaarCascade",
                            "doc": {
                                "brief": "HaarCascade class",
                                "maixpy": "maix.image.HaarCascade",
                                "py_doc": "HaarCascade class"
                            },
                            "members": {
                                "__init__": {
                                    "type": "func",
                                    "name": "HaarCascade",
                                    "doc": {
                                        "brief": "HaarCascade constructor",
                                        "param": {
                                            "data": "The data of the HaarCascade",
                                            "threshold": "The threshold of the HaarCascade",
                                            "normalized": "The normalized of the HaarCascade"
                                        },
                                        "maixpy": "maix.image.HaarCascade.__init__",
                                        "py_doc": "HaarCascade constructor\n\nArgs:\n  - data: The data of the HaarCascade\n  - threshold: The threshold of the HaarCascade\n  - normalized: The normalized of the HaarCascade\n"
                                    },
                                    "args": [],
                                    "ret_type": null,
                                    "static": false,
                                    "def": "HaarCascade()"
                                }
                            },
                            "def": "class HaarCascade"
                        },
                        "Color": {
                            "type": "class",
                            "name": "Color",
                            "doc": {
                                "brief": "Color class",
                                "maixpy": "maix.image.Color",
                                "py_doc": "Color class"
                            },
                            "members": {
                                "__init__": {
                                    "type": "func",
                                    "name": "Color",
                                    "doc": {
                                        "brief": "Color constructor",
                                        "param": {
                                            "alpha": "alpha channel, value range: 0 ~ 1"
                                        },
                                        "maixpy": "maix.image.Color.__init__",
                                        "py_doc": "Color constructor\n\nArgs:\n  - alpha: alpha channel, value range: 0 ~ 1\n"
                                    },
                                    "args": [
                                        [
                                            "uint8_t",
                                            "ch1",
                                            null
                                        ],
                                        [
                                            "uint8_t",
                                            "ch2",
                                            "0"
                                        ],
                                        [
                                            "uint8_t",
                                            "ch3",
                                            "0"
                                        ],
                                        [
                                            "float",
                                            "alpha",
                                            "0"
                                        ],
                                        [
                                            "image::Format",
                                            "format",
                                            "image::FMT_GRAYSCALE"
                                        ]
                                    ],
                                    "ret_type": null,
                                    "static": false,
                                    "def": "Color(uint8_t ch1, uint8_t ch2 = 0, uint8_t ch3 = 0, float alpha = 0, image::Format format = image::FMT_GRAYSCALE)"
                                },
                                "r": {
                                    "type": "var",
                                    "name": "r",
                                    "doc": {
                                        "brief": "Color red channel",
                                        "maixpy": "maix.image.Color.r",
                                        "py_doc": "Color red channel"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "uint8_t r"
                                },
                                "g": {
                                    "type": "var",
                                    "name": "g",
                                    "doc": {
                                        "brief": "Color green channel",
                                        "maixpy": "maix.image.Color.g",
                                        "py_doc": "Color green channel"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "uint8_t g"
                                },
                                "b": {
                                    "type": "var",
                                    "name": "b",
                                    "doc": {
                                        "brief": "Color blue channel",
                                        "maixpy": "maix.image.Color.b",
                                        "py_doc": "Color blue channel"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "uint8_t b"
                                },
                                "alpha": {
                                    "type": "var",
                                    "name": "alpha",
                                    "doc": {
                                        "brief": "Color alpha channel, value from 0.0 to 1.0, float value",
                                        "maixpy": "maix.image.Color.alpha",
                                        "py_doc": "Color alpha channel, value from 0.0 to 1.0, float value"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "float alpha"
                                },
                                "gray": {
                                    "type": "var",
                                    "name": "gray",
                                    "doc": {
                                        "brief": "Color gray channel",
                                        "maixpy": "maix.image.Color.gray",
                                        "py_doc": "Color gray channel"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "uint8_t gray"
                                },
                                "format": {
                                    "type": "var",
                                    "name": "format",
                                    "doc": {
                                        "brief": "Color format",
                                        "maixpy": "maix.image.Color.format",
                                        "py_doc": "Color format"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "image::Format format"
                                },
                                "hex": {
                                    "type": "func",
                                    "name": "hex",
                                    "doc": {
                                        "brief": "Get color's hex value",
                                        "maixpy": "maix.image.Color.hex",
                                        "py_doc": "Get color's hex value"
                                    },
                                    "args": [],
                                    "ret_type": "uint32_t",
                                    "static": false,
                                    "def": "uint32_t hex()"
                                },
                                "from_rgb": {
                                    "type": "func",
                                    "name": "from_rgb",
                                    "doc": {
                                        "brief": "Create Color object from RGB channels",
                                        "maixpy": "maix.image.Color.from_rgb",
                                        "py_doc": "Create Color object from RGB channels"
                                    },
                                    "args": [
                                        [
                                            "uint8_t",
                                            "r",
                                            null
                                        ],
                                        [
                                            "uint8_t",
                                            "g",
                                            null
                                        ],
                                        [
                                            "uint8_t",
                                            "b",
                                            null
                                        ]
                                    ],
                                    "ret_type": "image::Color",
                                    "static": true,
                                    "def": "static image::Color from_rgb(uint8_t r, uint8_t g, uint8_t b)"
                                },
                                "from_bgr": {
                                    "type": "func",
                                    "name": "from_bgr",
                                    "doc": {
                                        "brief": "Create Color object from BGR channels",
                                        "maixpy": "maix.image.Color.from_bgr",
                                        "py_doc": "Create Color object from BGR channels"
                                    },
                                    "args": [
                                        [
                                            "uint8_t",
                                            "b",
                                            null
                                        ],
                                        [
                                            "uint8_t",
                                            "g",
                                            null
                                        ],
                                        [
                                            "uint8_t",
                                            "r",
                                            null
                                        ]
                                    ],
                                    "ret_type": "image::Color",
                                    "static": true,
                                    "def": "static image::Color from_bgr(uint8_t b, uint8_t g, uint8_t r)"
                                },
                                "from_gray": {
                                    "type": "func",
                                    "name": "from_gray",
                                    "doc": {
                                        "brief": "Create Color object from gray channel",
                                        "maixpy": "maix.image.Color.from_gray",
                                        "py_doc": "Create Color object from gray channel"
                                    },
                                    "args": [
                                        [
                                            "uint8_t",
                                            "gray",
                                            null
                                        ]
                                    ],
                                    "ret_type": "image::Color",
                                    "static": true,
                                    "def": "static image::Color from_gray(uint8_t gray)"
                                },
                                "from_rgba": {
                                    "type": "func",
                                    "name": "from_rgba",
                                    "doc": {
                                        "brief": "Create Color object from RGBA channels",
                                        "param": {
                                            "alpha": "alpha channel, float value, value range: 0 ~ 1"
                                        },
                                        "maixpy": "maix.image.Color.from_rgba",
                                        "py_doc": "Create Color object from RGBA channels\n\nArgs:\n  - alpha: alpha channel, float value, value range: 0 ~ 1\n"
                                    },
                                    "args": [
                                        [
                                            "uint8_t",
                                            "r",
                                            null
                                        ],
                                        [
                                            "uint8_t",
                                            "g",
                                            null
                                        ],
                                        [
                                            "uint8_t",
                                            "b",
                                            null
                                        ],
                                        [
                                            "float",
                                            "alpha",
                                            null
                                        ]
                                    ],
                                    "ret_type": "image::Color",
                                    "static": true,
                                    "def": "static image::Color from_rgba(uint8_t r, uint8_t g, uint8_t b, float alpha)"
                                },
                                "from_bgra": {
                                    "type": "func",
                                    "name": "from_bgra",
                                    "doc": {
                                        "brief": "Create Color object from BGRA channels",
                                        "param": {
                                            "alpha": "alpha channel, float value, value range: 0 ~ 1"
                                        },
                                        "maixpy": "maix.image.Color.from_bgra",
                                        "py_doc": "Create Color object from BGRA channels\n\nArgs:\n  - alpha: alpha channel, float value, value range: 0 ~ 1\n"
                                    },
                                    "args": [
                                        [
                                            "uint8_t",
                                            "b",
                                            null
                                        ],
                                        [
                                            "uint8_t",
                                            "g",
                                            null
                                        ],
                                        [
                                            "uint8_t",
                                            "r",
                                            null
                                        ],
                                        [
                                            "float",
                                            "alpha",
                                            null
                                        ]
                                    ],
                                    "ret_type": "image::Color",
                                    "static": true,
                                    "def": "static image::Color from_bgra(uint8_t b, uint8_t g, uint8_t r, float alpha)"
                                },
                                "from_hex": {
                                    "type": "func",
                                    "name": "from_hex",
                                    "doc": {
                                        "brief": "Create Color object from hex value",
                                        "param": {
                                            "hex": "hex value, e.g. 0x0000FF00, lower address if first channel",
                                            "format": "color format, @see image::Format"
                                        },
                                        "maixpy": "maix.image.Color.from_hex",
                                        "py_doc": "Create Color object from hex value\n\nArgs:\n  - hex: hex value, e.g. 0x0000FF00, lower address if first channel\n  - format: color format, @see image::Format\n"
                                    },
                                    "args": [
                                        [
                                            "uint32_t",
                                            "hex",
                                            null
                                        ],
                                        [
                                            "image::Format &",
                                            "format",
                                            null
                                        ]
                                    ],
                                    "ret_type": "image::Color",
                                    "static": true,
                                    "def": "static image::Color from_hex(uint32_t hex, image::Format &format)"
                                },
                                "to_format": {
                                    "type": "func",
                                    "name": "to_format",
                                    "doc": {
                                        "brief": "Convert Color format",
                                        "param": {
                                            "format": "format want to convert to, @see image::Format, only support RGB888, BGR888, RGBA8888, BGRA8888, GRAYSCALE."
                                        },
                                        "maixpy": "maix.image.Color.to_format",
                                        "py_doc": "Convert Color format\n\nArgs:\n  - format: format want to convert to, @see image::Format, only support RGB888, BGR888, RGBA8888, BGRA8888, GRAYSCALE.\n"
                                    },
                                    "args": [
                                        [
                                            "const image::Format &",
                                            "format",
                                            null
                                        ]
                                    ],
                                    "ret_type": "void",
                                    "static": false,
                                    "def": "void to_format(const image::Format &format)"
                                },
                                "to_format2": {
                                    "type": "func",
                                    "name": "to_format2",
                                    "doc": {
                                        "brief": "Convert color format and return a new Color object",
                                        "param": {
                                            "format": "format want to convert to, @see image::Format, only support RGB888, BGR888, RGBA8888, BGRA8888, GRAYSCALE."
                                        },
                                        "return": "new Color object, you need to delete it manually in C++.",
                                        "maixpy": "maix.image.Color.to_format2",
                                        "py_doc": "Convert color format and return a new Color object\n\nArgs:\n  - format: format want to convert to, @see image::Format, only support RGB888, BGR888, RGBA8888, BGRA8888, GRAYSCALE.\n\n\nReturns: new Color object, you need to delete it manually in C++.\n"
                                    },
                                    "args": [
                                        [
                                            "const image::Format &",
                                            "format",
                                            null
                                        ]
                                    ],
                                    "ret_type": "image::Color*",
                                    "static": false,
                                    "def": "image::Color *to_format2(const image::Format &format)"
                                }
                            },
                            "def": "class Color"
                        },
                        "COLOR_WHITE": {
                            "type": "var",
                            "name": "",
                            "doc": {
                                "brief": "Predefined color white",
                                "maixpy": "maix.image.COLOR_WHITE",
                                "py_doc": "Predefined color white"
                            },
                            "value": "image::Color::from_rgb(255, 255, 255)",
                            "static": false,
                            "readonly": true,
                            "def": "const image::Color COLOR_WHITE = image::Color::from_rgb(255, 255, 255)"
                        },
                        "COLOR_BLACK": {
                            "type": "var",
                            "name": "",
                            "doc": {
                                "brief": "Predefined color black",
                                "maixpy": "maix.image.COLOR_BLACK",
                                "py_doc": "Predefined color black"
                            },
                            "value": "image::Color::from_rgb(0, 0, 0)",
                            "static": false,
                            "readonly": true,
                            "def": "const image::Color COLOR_BLACK = image::Color::from_rgb(0, 0, 0)"
                        },
                        "COLOR_RED": {
                            "type": "var",
                            "name": "",
                            "doc": {
                                "brief": "Predefined color red",
                                "maixpy": "maix.image.COLOR_RED",
                                "py_doc": "Predefined color red"
                            },
                            "value": "image::Color::from_rgb(255, 0, 0)",
                            "static": false,
                            "readonly": true,
                            "def": "const image::Color COLOR_RED = image::Color::from_rgb(255, 0, 0)"
                        },
                        "COLOR_GREEN": {
                            "type": "var",
                            "name": "",
                            "doc": {
                                "brief": "Predefined color green",
                                "maixpy": "maix.image.COLOR_GREEN",
                                "py_doc": "Predefined color green"
                            },
                            "value": "image::Color::from_rgb(0, 255, 0)",
                            "static": false,
                            "readonly": true,
                            "def": "const image::Color COLOR_GREEN = image::Color::from_rgb(0, 255, 0)"
                        },
                        "COLOR_BLUE": {
                            "type": "var",
                            "name": "",
                            "doc": {
                                "brief": "Predefined color blue",
                                "maixpy": "maix.image.COLOR_BLUE",
                                "py_doc": "Predefined color blue"
                            },
                            "value": "image::Color::from_rgb(0, 0, 255)",
                            "static": false,
                            "readonly": true,
                            "def": "const image::Color COLOR_BLUE = image::Color::from_rgb(0, 0, 255)"
                        },
                        "COLOR_YELLOW": {
                            "type": "var",
                            "name": "",
                            "doc": {
                                "brief": "Predefined color yellow",
                                "maixpy": "maix.image.COLOR_YELLOW",
                                "py_doc": "Predefined color yellow"
                            },
                            "value": "image::Color::from_rgb(255, 255, 0)",
                            "static": false,
                            "readonly": true,
                            "def": "const image::Color COLOR_YELLOW = image::Color::from_rgb(255, 255, 0)"
                        },
                        "COLOR_PURPLE": {
                            "type": "var",
                            "name": "",
                            "doc": {
                                "brief": "Predefined color purple",
                                "maixpy": "maix.image.COLOR_PURPLE",
                                "py_doc": "Predefined color purple"
                            },
                            "value": "image::Color::from_rgb(143, 0, 255)",
                            "static": false,
                            "readonly": true,
                            "def": "const image::Color COLOR_PURPLE = image::Color::from_rgb(143, 0, 255)"
                        },
                        "COLOR_ORANGE": {
                            "type": "var",
                            "name": "",
                            "doc": {
                                "brief": "Predefined color orange",
                                "maixpy": "maix.image.COLOR_ORANGE",
                                "py_doc": "Predefined color orange"
                            },
                            "value": "image::Color::from_rgb(255, 127, 0)",
                            "static": false,
                            "readonly": true,
                            "def": "const image::Color COLOR_ORANGE = image::Color::from_rgb(255, 127, 0)"
                        },
                        "COLOR_GRAY": {
                            "type": "var",
                            "name": "",
                            "doc": {
                                "brief": "Predefined color gray",
                                "maixpy": "maix.image.COLOR_GRAY",
                                "py_doc": "Predefined color gray"
                            },
                            "value": "image::Color::from_rgb(127, 127, 127)",
                            "static": false,
                            "readonly": true,
                            "def": "const image::Color COLOR_GRAY = image::Color::from_rgb(127, 127, 127)"
                        },
                        "Image": {
                            "type": "class",
                            "name": "Image",
                            "doc": {
                                "brief": "Image class",
                                "maixpy": "maix.image.Image",
                                "py_doc": "Image class"
                            },
                            "members": {
                                "__init__": {
                                    "type": "func",
                                    "name": "Image",
                                    "doc": {
                                        "brief": "Image constructor",
                                        "param": {
                                            "width": "image width, should > 0",
                                            "height": "image height, should > 0",
                                            "format": "image format @see image::Format",
                                            "data": "image data, if data is nullptr, will malloc memory for image data\nIf the image is in jpeg format, data must be filled in.",
                                            "data_size": "image data size, only for compressed format like jpeg png, data_size must be filled in.",
                                            "copy": "if true and data is not nullptr, will copy data to new buffer, else will use data directly. default is true to avoid memory leak."
                                        },
                                        "maixpy": "maix.image.Image.__init__",
                                        "py_doc": "Image constructor\n\nArgs:\n  - width: image width, should > 0\n  - height: image height, should > 0\n  - format: image format @see image::Format\n  - data: image data, if data is nullptr, will malloc memory for image data\nIf the image is in jpeg format, data must be filled in.\n  - data_size: image data size, only for compressed format like jpeg png, data_size must be filled in.\n  - copy: if true and data is not nullptr, will copy data to new buffer, else will use data directly. default is true to avoid memory leak.\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "width",
                                            null
                                        ],
                                        [
                                            "int",
                                            "height",
                                            null
                                        ],
                                        [
                                            "image::Format",
                                            "format",
                                            "image::Format::FMT_RGB888"
                                        ],
                                        [
                                            "void *",
                                            "data",
                                            "nullptr"
                                        ],
                                        [
                                            "int",
                                            "data_size",
                                            "-1"
                                        ],
                                        [
                                            "bool",
                                            "copy",
                                            "true"
                                        ]
                                    ],
                                    "ret_type": null,
                                    "static": false,
                                    "def": "Image(int width, int height, image::Format format = image::Format::FMT_RGB888, void *data = nullptr, int data_size = -1, bool copy = true)"
                                },
                                "format": {
                                    "type": "func",
                                    "name": "format",
                                    "doc": {
                                        "brief": "Get image's format",
                                        "see": "image.Format",
                                        "maixpy": "maix.image.Image.format",
                                        "py_doc": "Get image's format"
                                    },
                                    "args": [],
                                    "ret_type": "image::Format",
                                    "static": false,
                                    "def": "image::Format format()"
                                },
                                "size": {
                                    "type": "func",
                                    "name": "size",
                                    "doc": {
                                        "brief": "Get image's size, [width, height]",
                                        "maixpy": "maix.image.Image.size",
                                        "py_doc": "Get image's size, [width, height]"
                                    },
                                    "args": [],
                                    "ret_type": "image::Size",
                                    "static": false,
                                    "def": "image::Size size()"
                                },
                                "data_size": {
                                    "type": "func",
                                    "name": "data_size",
                                    "doc": {
                                        "brief": "Get image's data size",
                                        "maixpy": "maix.image.Image.data_size",
                                        "py_doc": "Get image's data size"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int data_size()"
                                },
                                "width": {
                                    "type": "func",
                                    "name": "width",
                                    "doc": {
                                        "brief": "Get image's width",
                                        "maixpy": "maix.image.Image.width",
                                        "py_doc": "Get image's width"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int width()"
                                },
                                "height": {
                                    "type": "func",
                                    "name": "height",
                                    "doc": {
                                        "brief": "Get image's height",
                                        "maixpy": "maix.image.Image.height",
                                        "py_doc": "Get image's height"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int height()"
                                },
                                "data": {
                                    "type": "func",
                                    "name": "data",
                                    "doc": {
                                        "brief": "Get image's data pointer.\\nIn MaixPy is capsule object.",
                                        "maixpy": "maix.image.Image.data",
                                        "py_doc": "Get image's data pointer.\nIn MaixPy is capsule object."
                                    },
                                    "args": [],
                                    "ret_type": "void*",
                                    "static": false,
                                    "def": "void *data()"
                                },
                                "__str__": {
                                    "type": "func",
                                    "name": "__str__",
                                    "doc": {
                                        "brief": "To string method",
                                        "maixpy": "maix.image.Image.__str__",
                                        "py_doc": "To string method"
                                    },
                                    "args": [],
                                    "ret_type": "std::string",
                                    "static": false,
                                    "def": "std::string __str__()"
                                },
                                "to_str": {
                                    "type": "func",
                                    "name": "to_str",
                                    "doc": {
                                        "brief": "To string method",
                                        "maixpy": "maix.image.Image.to_str",
                                        "py_doc": "To string method"
                                    },
                                    "args": [],
                                    "ret_type": "std::string",
                                    "static": false,
                                    "def": "std::string to_str()"
                                },
                                "get_pixel": {
                                    "type": "func",
                                    "name": "get_pixel",
                                    "doc": {
                                        "brief": "Get pixel of image",
                                        "param": {
                                            "x": "pixel's coordinate x. x must less than image's width",
                                            "y": "pixel's coordinate y. y must less than image's height",
                                            "rgbtuple": "switch return value method. rgbtuple decides whether to split the return or not. default is false."
                                        },
                                        "return": "pixel value,\nAccording to image format and rgbtuple, return different value:\nformat is FMT_RGB888, rgbtuple is true, return [R, G, B]; rgbtuple is false, return [RGB]\nforamt is FMT_BGR888, rgbtuple is true, return [B, G, R]; rgbtuple is false, return [BGR]\nformat is FMT_GRAYSCALE, return [GRAY];",
                                        "maixpy": "maix.image.Image.get_pixel",
                                        "py_doc": "Get pixel of image\n\nArgs:\n  - x: pixel's coordinate x. x must less than image's width\n  - y: pixel's coordinate y. y must less than image's height\n  - rgbtuple: switch return value method. rgbtuple decides whether to split the return or not. default is false.\n\n\nReturns: pixel value,\nAccording to image format and rgbtuple, return different value:\nformat is FMT_RGB888, rgbtuple is true, return [R, G, B]; rgbtuple is false, return [RGB]\nforamt is FMT_BGR888, rgbtuple is true, return [B, G, R]; rgbtuple is false, return [BGR]\nformat is FMT_GRAYSCALE, return [GRAY];\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "x",
                                            null
                                        ],
                                        [
                                            "int",
                                            "y",
                                            null
                                        ],
                                        [
                                            "bool",
                                            "rgbtuple",
                                            "false"
                                        ]
                                    ],
                                    "ret_type": "std::vector<int>",
                                    "static": false,
                                    "def": "std::vector<int> get_pixel(int x, int y, bool rgbtuple = false)"
                                },
                                "set_pixel": {
                                    "type": "func",
                                    "name": "set_pixel",
                                    "doc": {
                                        "brief": "Set pixel of image",
                                        "param": {
                                            "x": "pixel's coordinate x. x must less than image's width",
                                            "y": "pixel's coordinate y. y must less than image's height",
                                            "pixel": "pixel value, according to image format and size of pixel, has different operation:\nformat is FMT_RGB888, pixel size must be 1 or 3, if size is 1, will split pixel[0] to [R, G, B]; if size is 3, will use pixel directly\nformat is FMT_BGR888, pixel size must be 1 or 3, if size is 1, will split pixel[0] to [B, G, R]; if size is 3, will use pixel directly\nformat is FMT_GRAYSCALE, pixel size must be 1, will use pixel directly"
                                        },
                                        "return": "error code, Err::ERR_NONE is ok, other is error",
                                        "maixpy": "maix.image.Image.set_pixel",
                                        "py_doc": "Set pixel of image\n\nArgs:\n  - x: pixel's coordinate x. x must less than image's width\n  - y: pixel's coordinate y. y must less than image's height\n  - pixel: pixel value, according to image format and size of pixel, has different operation:\nformat is FMT_RGB888, pixel size must be 1 or 3, if size is 1, will split pixel[0] to [R, G, B]; if size is 3, will use pixel directly\nformat is FMT_BGR888, pixel size must be 1 or 3, if size is 1, will split pixel[0] to [B, G, R]; if size is 3, will use pixel directly\nformat is FMT_GRAYSCALE, pixel size must be 1, will use pixel directly\n\n\nReturns: error code, Err::ERR_NONE is ok, other is error\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "x",
                                            null
                                        ],
                                        [
                                            "int",
                                            "y",
                                            null
                                        ],
                                        [
                                            "std::vector<int>",
                                            "pixel",
                                            null
                                        ]
                                    ],
                                    "ret_type": "err::Err",
                                    "static": false,
                                    "def": "err::Err set_pixel(int x, int y, std::vector<int> pixel)"
                                },
                                "to_tensor": {
                                    "type": "func",
                                    "name": "to_tensor",
                                    "doc": {
                                        "brief": "Convert Image object to tensor::Tensor object",
                                        "param": {
                                            "chw": "if true, the shape of tensor is [C, H, W], else [H, W, C]",
                                            "copy": "if true, will alloc memory for tensor data, else will use the memory of Image object"
                                        },
                                        "return": "tensor::Tensor object pointer, an allocated tensor object",
                                        "maixpy": "maix.image.Image.to_tensor",
                                        "py_doc": "Convert Image object to tensor::Tensor object\n\nArgs:\n  - chw: if true, the shape of tensor is [C, H, W], else [H, W, C]\n  - copy: if true, will alloc memory for tensor data, else will use the memory of Image object\n\n\nReturns: tensor::Tensor object pointer, an allocated tensor object\n"
                                    },
                                    "args": [
                                        [
                                            "bool",
                                            "chw",
                                            "false"
                                        ],
                                        [
                                            "bool",
                                            "copy",
                                            "true"
                                        ]
                                    ],
                                    "ret_type": "tensor::Tensor*",
                                    "static": false,
                                    "def": "tensor::Tensor *to_tensor(bool chw = false, bool copy = true)"
                                },
                                "to_bytes": {
                                    "type": "func",
                                    "name": "to_bytes",
                                    "doc": {
                                        "brief": "Get image's data and convert to array bytes",
                                        "param": {
                                            "copy": "if true, will alloc memory and copy data to new buffer,\nelse will use the memory of Image object, delete bytes object will not affect Image object\uff0c\nbut delete Image object will make bytes object invalid, it may cause program crash !!!!\nSo use this param carefully."
                                        },
                                        "return": "image's data bytes, need be delete by caller in C++.",
                                        "maixpy": "maix.image.Image.to_bytes",
                                        "py_doc": "Get image's data and convert to array bytes\n\nArgs:\n  - copy: if true, will alloc memory and copy data to new buffer,\nelse will use the memory of Image object, delete bytes object will not affect Image object\uff0c\nbut delete Image object will make bytes object invalid, it may cause program crash !!!!\nSo use this param carefully.\n\n\nReturns: image's data bytes, need be delete by caller in C++.\n"
                                    },
                                    "args": [
                                        [
                                            "bool",
                                            "copy",
                                            "true"
                                        ]
                                    ],
                                    "ret_type": "Bytes*",
                                    "static": false,
                                    "def": "Bytes *to_bytes(bool copy = true)"
                                },
                                "to_format": {
                                    "type": "func",
                                    "name": "to_format",
                                    "doc": {
                                        "brief": "Convert image to specific format",
                                        "param": {
                                            "format": "format want to convert to, @see image::Format, only support RGB888, BGR888, RGBA8888, BGRA8888, GRAYSCALE, JPEG."
                                        },
                                        "return": "new image object. Need be delete by caller in C++.",
                                        "throw": "err.Exception, if two images' format not support, **or already the format**, will raise exception",
                                        "maixpy": "maix.image.Image.to_format",
                                        "py_doc": "Convert image to specific format\n\nArgs:\n  - format: format want to convert to, @see image::Format, only support RGB888, BGR888, RGBA8888, BGRA8888, GRAYSCALE, JPEG.\n\n\nReturns: new image object. Need be delete by caller in C++.\n"
                                    },
                                    "args": [
                                        [
                                            "const image::Format &",
                                            "format",
                                            null
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *to_format(const image::Format &format)"
                                },
                                "draw_image": {
                                    "type": "func",
                                    "name": "draw_image",
                                    "doc": {
                                        "brief": "Draw image on this image",
                                        "param": {
                                            "x": "left top corner of image point's coordinate x",
                                            "y": "left top corner of image point's coordinate y",
                                            "img": "image object to draw, the caller's channel must <= the args' channel,\ne.g. caller is RGB888, args is RGBA8888, will throw exception, but caller is RGBA8888, args is RGB888 or RGBA8888 is ok"
                                        },
                                        "return": "this image object self",
                                        "maixpy": "maix.image.Image.draw_image",
                                        "py_doc": "Draw image on this image\n\nArgs:\n  - x: left top corner of image point's coordinate x\n  - y: left top corner of image point's coordinate y\n  - img: image object to draw, the caller's channel must <= the args' channel,\ne.g. caller is RGB888, args is RGBA8888, will throw exception, but caller is RGBA8888, args is RGB888 or RGBA8888 is ok\n\n\nReturns: this image object self\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "x",
                                            null
                                        ],
                                        [
                                            "int",
                                            "y",
                                            null
                                        ],
                                        [
                                            "image::Image &",
                                            "img",
                                            null
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *draw_image(int x, int y, image::Image &img)"
                                },
                                "draw_rect": {
                                    "type": "func",
                                    "name": "draw_rect",
                                    "doc": {
                                        "brief": "Fill rectangle color to image",
                                        "param": {
                                            "x": "left top corner of rectangle point's coordinate x",
                                            "y": "left top corner of rectangle point's coordinate y",
                                            "w": "rectangle width",
                                            "h": "rectangle height",
                                            "color": "rectangle color",
                                            "thickness": "rectangle thickness(line width), by default(value is 1), -1 means fill rectangle"
                                        },
                                        "return": "this image object self",
                                        "maixpy": "maix.image.Image.draw_rect",
                                        "py_doc": "Fill rectangle color to image\n\nArgs:\n  - x: left top corner of rectangle point's coordinate x\n  - y: left top corner of rectangle point's coordinate y\n  - w: rectangle width\n  - h: rectangle height\n  - color: rectangle color\n  - thickness: rectangle thickness(line width), by default(value is 1), -1 means fill rectangle\n\n\nReturns: this image object self\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "x",
                                            null
                                        ],
                                        [
                                            "int",
                                            "y",
                                            null
                                        ],
                                        [
                                            "int",
                                            "w",
                                            null
                                        ],
                                        [
                                            "int",
                                            "h",
                                            null
                                        ],
                                        [
                                            "const image::Color &",
                                            "color",
                                            null
                                        ],
                                        [
                                            "int",
                                            "thickness",
                                            "1"
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *draw_rect(int x, int y, int w, int h, const image::Color &color, int thickness = 1)"
                                },
                                "draw_line": {
                                    "type": "func",
                                    "name": "draw_line",
                                    "doc": {
                                        "brief": "Draw line on image",
                                        "param": {
                                            "x1": "start point's coordinate x",
                                            "y1": "start point's coordinate y",
                                            "x2": "end point's coordinate x",
                                            "y2": "end point's coordinate y",
                                            "color": "line color @see image::Color",
                                            "thickness": "line thickness(line width), by default(value is 1)"
                                        },
                                        "return": "this image object self",
                                        "maixpy": "maix.image.Image.draw_line",
                                        "py_doc": "Draw line on image\n\nArgs:\n  - x1: start point's coordinate x\n  - y1: start point's coordinate y\n  - x2: end point's coordinate x\n  - y2: end point's coordinate y\n  - color: line color @see image::Color\n  - thickness: line thickness(line width), by default(value is 1)\n\n\nReturns: this image object self\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "x1",
                                            null
                                        ],
                                        [
                                            "int",
                                            "y1",
                                            null
                                        ],
                                        [
                                            "int",
                                            "x2",
                                            null
                                        ],
                                        [
                                            "int",
                                            "y2",
                                            null
                                        ],
                                        [
                                            "const image::Color &",
                                            "color",
                                            null
                                        ],
                                        [
                                            "int",
                                            "thickness",
                                            "1"
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *draw_line(int x1, int y1, int x2, int y2, const image::Color &color, int thickness = 1)"
                                },
                                "draw_circle": {
                                    "type": "func",
                                    "name": "draw_circle",
                                    "doc": {
                                        "brief": "Draw circle on image",
                                        "param": {
                                            "x": "circle center point's coordinate x",
                                            "y": "circle center point's coordinate y",
                                            "radius": "circle radius",
                                            "color": "circle color @see image::Color",
                                            "thickness": "circle thickness(line width), by default(value is 1), -1 means fill circle"
                                        },
                                        "return": "this image object self",
                                        "maixpy": "maix.image.Image.draw_circle",
                                        "py_doc": "Draw circle on image\n\nArgs:\n  - x: circle center point's coordinate x\n  - y: circle center point's coordinate y\n  - radius: circle radius\n  - color: circle color @see image::Color\n  - thickness: circle thickness(line width), by default(value is 1), -1 means fill circle\n\n\nReturns: this image object self\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "x",
                                            null
                                        ],
                                        [
                                            "int",
                                            "y",
                                            null
                                        ],
                                        [
                                            "int",
                                            "radius",
                                            null
                                        ],
                                        [
                                            "const image::Color &",
                                            "color",
                                            null
                                        ],
                                        [
                                            "int",
                                            "thickness",
                                            "1"
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *draw_circle(int x, int y, int radius, const image::Color &color, int thickness = 1)"
                                },
                                "draw_ellipse": {
                                    "type": "func",
                                    "name": "draw_ellipse",
                                    "doc": {
                                        "brief": "Draw ellipse on image",
                                        "param": {
                                            "x": "ellipse center point's coordinate x",
                                            "y": "ellipse center point's coordinate y",
                                            "a": "ellipse major axis length",
                                            "b": "ellipse minor axis length",
                                            "angle": "ellipse rotation angle",
                                            "start_angle": "ellipse start angle",
                                            "end_angle": "ellipse end angle",
                                            "color": "ellipse color @see image::Color",
                                            "thickness": "ellipse thickness(line width), by default(value is 1), -1 means fill ellipse"
                                        },
                                        "return": "this image object self",
                                        "maixpy": "maix.image.Image.draw_ellipse",
                                        "py_doc": "Draw ellipse on image\n\nArgs:\n  - x: ellipse center point's coordinate x\n  - y: ellipse center point's coordinate y\n  - a: ellipse major axis length\n  - b: ellipse minor axis length\n  - angle: ellipse rotation angle\n  - start_angle: ellipse start angle\n  - end_angle: ellipse end angle\n  - color: ellipse color @see image::Color\n  - thickness: ellipse thickness(line width), by default(value is 1), -1 means fill ellipse\n\n\nReturns: this image object self\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "x",
                                            null
                                        ],
                                        [
                                            "int",
                                            "y",
                                            null
                                        ],
                                        [
                                            "int",
                                            "a",
                                            null
                                        ],
                                        [
                                            "int",
                                            "b",
                                            null
                                        ],
                                        [
                                            "float",
                                            "angle",
                                            null
                                        ],
                                        [
                                            "float",
                                            "start_angle",
                                            null
                                        ],
                                        [
                                            "float",
                                            "end_angle",
                                            null
                                        ],
                                        [
                                            "const image::Color &",
                                            "color",
                                            null
                                        ],
                                        [
                                            "int",
                                            "thickness",
                                            "1"
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *draw_ellipse(int x, int y, int a, int b, float angle, float start_angle, float end_angle, const image::Color &color, int thickness = 1)"
                                },
                                "draw_text": {
                                    "type": "func",
                                    "name": "draw_text",
                                    "doc": {
                                        "brief": "Draw text on image",
                                        "param": {
                                            "x": "text left top point's coordinate x",
                                            "y": "text left top point's coordinate y",
                                            "text": "text content",
                                            "color": "text color @see image::Color, default is white",
                                            "scale": "font scale, by default(value is 1)",
                                            "thickness": "text thickness(line width), if negative, the glyph is filled, by default(value is -1)",
                                            "wrap": "if true, will auto wrap text to next line if text width > image width, by default(value is true)"
                                        },
                                        "return": "this image object self",
                                        "maixpy": "maix.image.Image.draw_text",
                                        "py_doc": "Draw text on image\n\nArgs:\n  - x: text left top point's coordinate x\n  - y: text left top point's coordinate y\n  - text: text content\n  - color: text color @see image::Color, default is white\n  - scale: font scale, by default(value is 1)\n  - thickness: text thickness(line width), if negative, the glyph is filled, by default(value is -1)\n  - wrap: if true, will auto wrap text to next line if text width > image width, by default(value is true)\n\n\nReturns: this image object self\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "x",
                                            null
                                        ],
                                        [
                                            "int",
                                            "y",
                                            null
                                        ],
                                        [
                                            "const std::string &",
                                            "text",
                                            null
                                        ],
                                        [
                                            "const image::Color &",
                                            "color",
                                            "image::COLOR_WHITE"
                                        ],
                                        [
                                            "float",
                                            "scale",
                                            "1"
                                        ],
                                        [
                                            "int",
                                            "thickness",
                                            "-1"
                                        ],
                                        [
                                            "bool",
                                            "wrap",
                                            "true"
                                        ],
                                        [
                                            "int",
                                            "wrap_space",
                                            "4"
                                        ],
                                        [
                                            "const std::string &",
                                            "font",
                                            "\"\""
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *draw_text(int x, int y, const std::string &text, const image::Color &color = image::COLOR_WHITE, float scale = 1, int thickness = -1,\n                                bool wrap = true, int wrap_space = 4, const std::string &font = \"\")"
                                },
                                "draw_arrow": {
                                    "type": "func",
                                    "name": "draw_arrow",
                                    "doc": {
                                        "brief": "Draw arrow on image",
                                        "param": {
                                            "x0": "start coordinate of the arrow x0",
                                            "y0": "start coordinate of the arrow y0",
                                            "x1": "end coordinate of the arrow x1",
                                            "y1": "end coordinate of the arrow y1",
                                            "color": "cross color @see image::Color",
                                            "thickness": "cross thickness(line width), by default(value is 1)"
                                        },
                                        "return": "this image object self",
                                        "maixpy": "maix.image.Image.draw_arrow",
                                        "py_doc": "Draw arrow on image\n\nArgs:\n  - x0: start coordinate of the arrow x0\n  - y0: start coordinate of the arrow y0\n  - x1: end coordinate of the arrow x1\n  - y1: end coordinate of the arrow y1\n  - color: cross color @see image::Color\n  - thickness: cross thickness(line width), by default(value is 1)\n\n\nReturns: this image object self\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "x0",
                                            null
                                        ],
                                        [
                                            "int",
                                            "y0",
                                            null
                                        ],
                                        [
                                            "int",
                                            "x1",
                                            null
                                        ],
                                        [
                                            "int",
                                            "y1",
                                            null
                                        ],
                                        [
                                            "const image::Color &",
                                            "color",
                                            null
                                        ],
                                        [
                                            "int",
                                            "thickness",
                                            "1"
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *draw_arrow(int x0, int y0, int x1, int y1, const image::Color &color, int thickness = 1)"
                                },
                                "draw_edges": {
                                    "type": "func",
                                    "name": "draw_edges",
                                    "doc": {
                                        "brief": "Draw edges on image",
                                        "param": {
                                            "corners": "edges, [[x0, y0], [x1, y1], [x2, y2], [x3, y3]]",
                                            "color": "edges color @see image::Color",
                                            "size": "the circle of radius size. TODO: support in the feature",
                                            "thickness": "edges thickness(line width), by default(value is 1)",
                                            "fill": "if true, will fill edges, by default(value is false)"
                                        },
                                        "return": "this image object self",
                                        "maixpy": "maix.image.Image.draw_edges",
                                        "py_doc": "Draw edges on image\n\nArgs:\n  - corners: edges, [[x0, y0], [x1, y1], [x2, y2], [x3, y3]]\n  - color: edges color @see image::Color\n  - size: the circle of radius size. TODO: support in the feature\n  - thickness: edges thickness(line width), by default(value is 1)\n  - fill: if true, will fill edges, by default(value is false)\n\n\nReturns: this image object self\n"
                                    },
                                    "args": [
                                        [
                                            "std::vector<std::vector<int>>",
                                            "corners",
                                            null
                                        ],
                                        [
                                            "const image::Color &",
                                            "color",
                                            null
                                        ],
                                        [
                                            "int",
                                            "size",
                                            "0"
                                        ],
                                        [
                                            "int",
                                            "thickness",
                                            "1"
                                        ],
                                        [
                                            "bool",
                                            "fill",
                                            "false"
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *draw_edges(std::vector<std::vector<int>> corners, const image::Color &color, int size = 0, int thickness = 1, bool fill = false)"
                                },
                                "draw_keypoints": {
                                    "type": "func",
                                    "name": "draw_keypoints",
                                    "doc": {
                                        "brief": "Draw keypoints on image",
                                        "param": {
                                            "keypoints": "keypoints, [x, y, rotation_andle_in_degrees], TODO: rotation_andle_in_degrees support in the feature",
                                            "color": "keypoints color @see image::Color",
                                            "size": "size of keypoints",
                                            "thickness": "keypoints thickness(line width), by default(value is 1)",
                                            "fill": "if true, will fill keypoints, by default(value is false)"
                                        },
                                        "return": "this image object self",
                                        "maixpy": "maix.image.Image.draw_keypoints",
                                        "py_doc": "Draw keypoints on image\n\nArgs:\n  - keypoints: keypoints, [x, y, rotation_andle_in_degrees], TODO: rotation_andle_in_degrees support in the feature\n  - color: keypoints color @see image::Color\n  - size: size of keypoints\n  - thickness: keypoints thickness(line width), by default(value is 1)\n  - fill: if true, will fill keypoints, by default(value is false)\n\n\nReturns: this image object self\n"
                                    },
                                    "args": [
                                        [
                                            "std::vector<int>",
                                            "keypoints",
                                            null
                                        ],
                                        [
                                            "const image::Color &",
                                            "color",
                                            null
                                        ],
                                        [
                                            "int",
                                            "size",
                                            "10"
                                        ],
                                        [
                                            "int",
                                            "thickness",
                                            "1"
                                        ],
                                        [
                                            "bool",
                                            "fill",
                                            "false"
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *draw_keypoints(std::vector<int> keypoints, const image::Color &color, int size = 10, int thickness = 1, bool fill = false)"
                                },
                                "resize": {
                                    "type": "func",
                                    "name": "resize",
                                    "doc": {
                                        "brief": "Resize image, will create a new resized image object",
                                        "param": {
                                            "width": "new width, if value is -1, will use height to calculate aspect ratio",
                                            "height": "new height, if value is -1, will use width to calculate aspect ratio",
                                            "object_fit": "fill, contain, cover, by default is fill",
                                            "method": "resize method, by default is bilinear"
                                        },
                                        "return": "Always return a new resized image object even size not change, So in C++ you should take care of the return value to avoid memory leak.\nAnd it's better to judge whether the size has changed before calling this function to make the program more efficient.\ne.g.\nif img->width() != width || img->height() != height:\nimg = img->resize(width, height);",
                                        "maixpy": "maix.image.Image.resize",
                                        "py_doc": "Resize image, will create a new resized image object\n\nArgs:\n  - width: new width, if value is -1, will use height to calculate aspect ratio\n  - height: new height, if value is -1, will use width to calculate aspect ratio\n  - object_fit: fill, contain, cover, by default is fill\n  - method: resize method, by default is bilinear\n\n\nReturns: Always return a new resized image object even size not change, So in C++ you should take care of the return value to avoid memory leak.\nAnd it's better to judge whether the size has changed before calling this function to make the program more efficient.\ne.g.\nif img->width() != width || img->height() != height:\nimg = img->resize(width, height);\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "width",
                                            null
                                        ],
                                        [
                                            "int",
                                            "height",
                                            null
                                        ],
                                        [
                                            "image::Fit",
                                            "object_fit",
                                            "image::Fit::FIT_FILL"
                                        ],
                                        [
                                            "image::ResizeMethod",
                                            "method",
                                            "image::ResizeMethod::NEAREST"
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *resize(int width, int height, image::Fit object_fit = image::Fit::FIT_FILL, image::ResizeMethod method = image::ResizeMethod::NEAREST)"
                                },
                                "affine": {
                                    "type": "func",
                                    "name": "affine",
                                    "doc": {
                                        "brief": "Affine transform image, will create a new transformed image object",
                                        "param": {
                                            "src_points": "three source points, [x1, y1, x2, y2, x3, y3]",
                                            "dst_points": "three destination points, [x1, y1, x2, y2, x3, y3]",
                                            "width": "new width, if value is -1, will use height to calculate aspect ratio",
                                            "height": "new height, if value is -1, will use width to calculate aspect ratio",
                                            "method": "resize method, by default is bilinear"
                                        },
                                        "return": "new transformed image object",
                                        "maixpy": "maix.image.Image.affine",
                                        "py_doc": "Affine transform image, will create a new transformed image object\n\nArgs:\n  - src_points: three source points, [x1, y1, x2, y2, x3, y3]\n  - dst_points: three destination points, [x1, y1, x2, y2, x3, y3]\n  - width: new width, if value is -1, will use height to calculate aspect ratio\n  - height: new height, if value is -1, will use width to calculate aspect ratio\n  - method: resize method, by default is bilinear\n\n\nReturns: new transformed image object\n"
                                    },
                                    "args": [
                                        [
                                            "std::vector<int>",
                                            "src_points",
                                            null
                                        ],
                                        [
                                            "std::vector<int>",
                                            "dst_points",
                                            null
                                        ],
                                        [
                                            "int",
                                            "width",
                                            "-1"
                                        ],
                                        [
                                            "int",
                                            "height",
                                            "-1"
                                        ],
                                        [
                                            "image::ResizeMethod",
                                            "method",
                                            "image::ResizeMethod::BILINEAR"
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *affine(std::vector<int> src_points, std::vector<int> dst_points, int width = -1, int height = -1, image::ResizeMethod method = image::ResizeMethod::BILINEAR)"
                                },
                                "copy": {
                                    "type": "func",
                                    "name": "copy",
                                    "doc": {
                                        "brief": "Copy image, will create a new copied image object",
                                        "return": "new copied image object",
                                        "maixpy": "maix.image.Image.copy",
                                        "py_doc": "Copy image, will create a new copied image object\n\nReturns: new copied image object\n"
                                    },
                                    "args": [],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *copy()"
                                },
                                "crop": {
                                    "type": "func",
                                    "name": "crop",
                                    "doc": {
                                        "brief": "Crop image, will create a new cropped image object",
                                        "param": {
                                            "x": "left top corner of crop rectangle point's coordinate x",
                                            "y": "left top corner of crop rectangle point's coordinate y",
                                            "w": "crop rectangle width",
                                            "h": "crop rectangle height"
                                        },
                                        "return": "new cropped image object",
                                        "maixpy": "maix.image.Image.crop",
                                        "py_doc": "Crop image, will create a new cropped image object\n\nArgs:\n  - x: left top corner of crop rectangle point's coordinate x\n  - y: left top corner of crop rectangle point's coordinate y\n  - w: crop rectangle width\n  - h: crop rectangle height\n\n\nReturns: new cropped image object\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "x",
                                            null
                                        ],
                                        [
                                            "int",
                                            "y",
                                            null
                                        ],
                                        [
                                            "int",
                                            "w",
                                            null
                                        ],
                                        [
                                            "int",
                                            "h",
                                            null
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *crop(int x, int y, int w, int h)"
                                },
                                "rotate": {
                                    "type": "func",
                                    "name": "rotate",
                                    "doc": {
                                        "brief": "Rotate image, will create a new rotated image object",
                                        "param": {
                                            "angle": "anti-clock wise rotate angle, if angle is 90 or 270, and width or height is -1, will swap width and height, or will throw exception",
                                            "width": "new width, if value is -1, will use height to calculate aspect ratio",
                                            "height": "new height, if value is -1, will use width to calculate aspect ratio",
                                            "method": "resize method, by default is bilinear"
                                        },
                                        "return": "new rotated image object",
                                        "maixpy": "maix.image.Image.rotate",
                                        "py_doc": "Rotate image, will create a new rotated image object\n\nArgs:\n  - angle: anti-clock wise rotate angle, if angle is 90 or 270, and width or height is -1, will swap width and height, or will throw exception\n  - width: new width, if value is -1, will use height to calculate aspect ratio\n  - height: new height, if value is -1, will use width to calculate aspect ratio\n  - method: resize method, by default is bilinear\n\n\nReturns: new rotated image object\n"
                                    },
                                    "args": [
                                        [
                                            "float",
                                            "angle",
                                            null
                                        ],
                                        [
                                            "int",
                                            "width",
                                            "-1"
                                        ],
                                        [
                                            "int",
                                            "height",
                                            "-1"
                                        ],
                                        [
                                            "image::ResizeMethod",
                                            "method",
                                            "image::ResizeMethod::BILINEAR"
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *rotate(float angle, int width = -1, int height = -1, image::ResizeMethod method = image::ResizeMethod::BILINEAR)"
                                },
                                "mean_pool": {
                                    "type": "func",
                                    "name": "mean_pool",
                                    "doc": {
                                        "brief": "Finds the mean of x_div * y_div squares in the image and returns the modified image composed of the mean of each square.",
                                        "param": {
                                            "x_div": "The width of the squares.",
                                            "y_div": "The height of the squares.",
                                            "copy": "Select whether to return a new image or modify the original image. default is false.\nIf true, returns a new image composed of the mean of each square; If false, returns the modified image composed of the mean of each square."
                                        },
                                        "return": "Returns the image after the operation is completed.",
                                        "maixpy": "maix.image.Image.mean_pool",
                                        "py_doc": "Finds the mean of x_div * y_div squares in the image and returns the modified image composed of the mean of each square.\n\nArgs:\n  - x_div: The width of the squares.\n  - y_div: The height of the squares.\n  - copy: Select whether to return a new image or modify the original image. default is false.\nIf true, returns a new image composed of the mean of each square; If false, returns the modified image composed of the mean of each square.\n\n\nReturns: Returns the image after the operation is completed.\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "x_div",
                                            null
                                        ],
                                        [
                                            "int",
                                            "y_div",
                                            null
                                        ],
                                        [
                                            "bool",
                                            "copy",
                                            "false"
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *mean_pool(int x_div, int y_div, bool copy = false)"
                                },
                                "midpoint_pool": {
                                    "type": "func",
                                    "name": "midpoint_pool",
                                    "doc": {
                                        "brief": "Finds the midpoint of x_div * y_div squares in the image and returns the modified image composed of the mean of each square.",
                                        "param": {
                                            "x_div": "The width of the squares.",
                                            "y_div": "The height of the squares.",
                                            "bias": "The bias of the midpoint. default is 0.5.\nmidpoint value is equal to (max * bias + min * (1 - bias))",
                                            "copy": "Select whether to return a new image or modify the original image. default is false.\nIf true, returns a new image composed of the midpoint of each square; If false, returns the modified image composed of the midpoint of each square."
                                        },
                                        "return": "Returns the image after the operation is completed.",
                                        "maixpy": "maix.image.Image.midpoint_pool",
                                        "py_doc": "Finds the midpoint of x_div * y_div squares in the image and returns the modified image composed of the mean of each square.\n\nArgs:\n  - x_div: The width of the squares.\n  - y_div: The height of the squares.\n  - bias: The bias of the midpoint. default is 0.5.\nmidpoint value is equal to (max * bias + min * (1 - bias))\n  - copy: Select whether to return a new image or modify the original image. default is false.\nIf true, returns a new image composed of the midpoint of each square; If false, returns the modified image composed of the midpoint of each square.\n\n\nReturns: Returns the image after the operation is completed.\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "x_div",
                                            null
                                        ],
                                        [
                                            "int",
                                            "y_div",
                                            null
                                        ],
                                        [
                                            "double",
                                            "bias",
                                            "0.5"
                                        ],
                                        [
                                            "bool",
                                            "copy",
                                            "false"
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *midpoint_pool(int x_div, int y_div, double bias = 0.5, bool copy = false)"
                                },
                                "compress": {
                                    "type": "func",
                                    "name": "compress",
                                    "doc": {
                                        "brief": "JPEG compresses the image in place.",
                                        "param": {
                                            "quality": "The quality of the compressed image. default is 95."
                                        },
                                        "return": "Returns the compressed JPEG image",
                                        "maixpy": "maix.image.Image.compress",
                                        "py_doc": "JPEG compresses the image in place.\n\nArgs:\n  - quality: The quality of the compressed image. default is 95.\n\n\nReturns: Returns the compressed JPEG image\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "quality",
                                            "95"
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *compress(int quality = 95)"
                                },
                                "clear": {
                                    "type": "func",
                                    "name": "clear",
                                    "doc": {
                                        "brief": "Sets all pixels in the image to zero",
                                        "param": {
                                            "mask": "Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None."
                                        },
                                        "return": "Returns the image after the operation is completed.",
                                        "maixpy": "maix.image.Image.clear",
                                        "py_doc": "Sets all pixels in the image to zero\n\nArgs:\n  - mask: Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None.\n\n\nReturns: Returns the image after the operation is completed.\n"
                                    },
                                    "args": [
                                        [
                                            "image::Image *",
                                            "mask",
                                            "nullptr"
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *clear(image::Image *mask = nullptr)"
                                },
                                "mask_rectange": {
                                    "type": "func",
                                    "name": "mask_rectange",
                                    "doc": {
                                        "brief": "Zeros a rectangular part of the image. If no arguments are supplied this method zeros the center of the image.",
                                        "param": {
                                            "x": "The x coordinate of the top left corner of the rectangle.",
                                            "y": "The y coordinate of the top left corner of the rectangle.",
                                            "w": "The width of the rectangle.",
                                            "h": "The height of the rectangle."
                                        },
                                        "return": "Returns the image after the operation is completed.",
                                        "maixpy": "maix.image.Image.mask_rectange",
                                        "py_doc": "Zeros a rectangular part of the image. If no arguments are supplied this method zeros the center of the image.\n\nArgs:\n  - x: The x coordinate of the top left corner of the rectangle.\n  - y: The y coordinate of the top left corner of the rectangle.\n  - w: The width of the rectangle.\n  - h: The height of the rectangle.\n\n\nReturns: Returns the image after the operation is completed.\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "x",
                                            "-1"
                                        ],
                                        [
                                            "int",
                                            "y",
                                            "-1"
                                        ],
                                        [
                                            "int",
                                            "w",
                                            "-1"
                                        ],
                                        [
                                            "int",
                                            "h",
                                            "-1"
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *mask_rectange(int x = -1, int y = -1, int w = -1, int h = -1)"
                                },
                                "mask_circle": {
                                    "type": "func",
                                    "name": "mask_circle",
                                    "doc": {
                                        "brief": "Zeros a circular part of the image. If no arguments are supplied this method zeros the center of the image.",
                                        "param": {
                                            "x": "The x coordinate of the center of the circle.",
                                            "y": "The y coordinate of the center of the circle.",
                                            "radius": "The radius of the circle."
                                        },
                                        "return": "Returns the image after the operation is completed.",
                                        "maixpy": "maix.image.Image.mask_circle",
                                        "py_doc": "Zeros a circular part of the image. If no arguments are supplied this method zeros the center of the image.\n\nArgs:\n  - x: The x coordinate of the center of the circle.\n  - y: The y coordinate of the center of the circle.\n  - radius: The radius of the circle.\n\n\nReturns: Returns the image after the operation is completed.\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "x",
                                            "-1"
                                        ],
                                        [
                                            "int",
                                            "y",
                                            "-1"
                                        ],
                                        [
                                            "int",
                                            "radius",
                                            "-1"
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *mask_circle(int x = -1, int y = -1, int radius = -1)"
                                },
                                "mask_ellipse": {
                                    "type": "func",
                                    "name": "mask_ellipse",
                                    "doc": {
                                        "brief": "Zeros a ellipse part of the image. If no arguments are supplied this method zeros the center of the image.",
                                        "param": {
                                            "x": "The x coordinate of the center of the ellipse.",
                                            "y": "The y coordinate of the center of the ellipse.",
                                            "radius_x": "The radius of the ellipse in the x direction.",
                                            "radius_y": "The radius of the ellipse in the y direction.",
                                            "rotation_angle_in_degrees": "The rotation angle of the ellipse in degrees."
                                        },
                                        "return": "Returns the image after the operation is completed.",
                                        "maixpy": "maix.image.Image.mask_ellipse",
                                        "py_doc": "Zeros a ellipse part of the image. If no arguments are supplied this method zeros the center of the image.\n\nArgs:\n  - x: The x coordinate of the center of the ellipse.\n  - y: The y coordinate of the center of the ellipse.\n  - radius_x: The radius of the ellipse in the x direction.\n  - radius_y: The radius of the ellipse in the y direction.\n  - rotation_angle_in_degrees: The rotation angle of the ellipse in degrees.\n\n\nReturns: Returns the image after the operation is completed.\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "x",
                                            "-1"
                                        ],
                                        [
                                            "int",
                                            "y",
                                            "-1"
                                        ],
                                        [
                                            "int",
                                            "radius_x",
                                            "-1"
                                        ],
                                        [
                                            "int",
                                            "radius_y",
                                            "-1"
                                        ],
                                        [
                                            "float",
                                            "rotation_angle_in_degrees",
                                            "0"
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *mask_ellipse(int x = -1, int y = -1, int radius_x = -1, int radius_y = -1, float rotation_angle_in_degrees = 0)"
                                },
                                "binary": {
                                    "type": "func",
                                    "name": "binary",
                                    "doc": {
                                        "brief": "Sets all pixels in the image to black or white depending on if the pixel is inside of a threshold in the threshold list thresholds or not.",
                                        "param": {
                                            "thresholds": "You can define multiple thresholds.\nFor GRAYSCALE format, you can use {{Lmin, Lmax}, ...} to define one or more thresholds.\nFor RGB888 format, you can use {{Lmin, Lmax, Amin, Amax, Bmin, Bmax}, ...} to define one or more thresholds.\nWhere the upper case L,A,B represent the L,A,B channels of the LAB image format, and min, max represent the minimum and maximum values of the corresponding channels.",
                                            "invert": "If true, the thresholds will be inverted before the operation. default is false.",
                                            "zero": "If zero is true, the image will be set the pixels within the threshold to 0, other pixels remain unchanged. If zero is false, the image will be set to black or white. default is false.",
                                            "mask": "Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None.",
                                            "to_bitmap": "If true, the image will be converted to a bitmap image before thresholding. default is false. TODO: support in the feature",
                                            "copy": "Select whether to return a new image or modify the original image. default is false."
                                        },
                                        "return": "Returns the image after the operation is completed.",
                                        "maixpy": "maix.image.Image.binary",
                                        "py_doc": "Sets all pixels in the image to black or white depending on if the pixel is inside of a threshold in the threshold list thresholds or not.\n\nArgs:\n  - thresholds: You can define multiple thresholds.\nFor GRAYSCALE format, you can use {{Lmin, Lmax}, ...} to define one or more thresholds.\nFor RGB888 format, you can use {{Lmin, Lmax, Amin, Amax, Bmin, Bmax}, ...} to define one or more thresholds.\nWhere the upper case L,A,B represent the L,A,B channels of the LAB image format, and min, max represent the minimum and maximum values of the corresponding channels.\n  - invert: If true, the thresholds will be inverted before the operation. default is false.\n  - zero: If zero is true, the image will be set the pixels within the threshold to 0, other pixels remain unchanged. If zero is false, the image will be set to black or white. default is false.\n  - mask: Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None.\n  - to_bitmap: If true, the image will be converted to a bitmap image before thresholding. default is false. TODO: support in the feature\n  - copy: Select whether to return a new image or modify the original image. default is false.\n\n\nReturns: Returns the image after the operation is completed.\n"
                                    },
                                    "args": [
                                        [
                                            "std::vector<std::vector<int>>",
                                            "thresholds",
                                            "std::vector<std::vector<int>>()"
                                        ],
                                        [
                                            "bool",
                                            "invert",
                                            "false"
                                        ],
                                        [
                                            "bool",
                                            "zero",
                                            "false"
                                        ],
                                        [
                                            "image::Image *",
                                            "mask",
                                            "nullptr"
                                        ],
                                        [
                                            "bool",
                                            "to_bitmap",
                                            "false"
                                        ],
                                        [
                                            "bool",
                                            "copy",
                                            "false"
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *binary(std::vector<std::vector<int>> thresholds = std::vector<std::vector<int>>(), bool invert = false, bool zero = false, image::Image *mask = nullptr, bool to_bitmap = false, bool copy = false)"
                                },
                                "invert": {
                                    "type": "func",
                                    "name": "invert",
                                    "doc": {
                                        "brief": "Inverts the image in place.",
                                        "return": "Returns the image after the operation is completed",
                                        "maixpy": "maix.image.Image.invert",
                                        "py_doc": "Inverts the image in place.\n\nReturns: Returns the image after the operation is completed\n"
                                    },
                                    "args": [],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *invert()"
                                },
                                "b_and": {
                                    "type": "func",
                                    "name": "b_and",
                                    "doc": {
                                        "brief": "Performs a bitwise and operation between the image and the other image.",
                                        "param": {
                                            "other": "The other image should be an image and should be the same size as the image being operated on.        TODO: support path?",
                                            "mask": "Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None."
                                        },
                                        "return": "Returns the image after the operation is completed.",
                                        "maixpy": "maix.image.Image.b_and",
                                        "py_doc": "Performs a bitwise and operation between the image and the other image.\n\nArgs:\n  - other: The other image should be an image and should be the same size as the image being operated on.        TODO: support path?\n  - mask: Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None.\n\n\nReturns: Returns the image after the operation is completed.\n"
                                    },
                                    "args": [
                                        [
                                            "image::Image *",
                                            "other",
                                            null
                                        ],
                                        [
                                            "image::Image *",
                                            "mask",
                                            "nullptr"
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *b_and(image::Image *other, image::Image *mask = nullptr)"
                                },
                                "b_nand": {
                                    "type": "func",
                                    "name": "b_nand",
                                    "doc": {
                                        "brief": "Performs a bitwise nand operation between the image and the other image.",
                                        "param": {
                                            "other": "The other image should be an image and should be the same size as the image being operated on.        TODO: support path?",
                                            "mask": "Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None."
                                        },
                                        "return": "Returns the image after the operation is completed.",
                                        "maixpy": "maix.image.Image.b_nand",
                                        "py_doc": "Performs a bitwise nand operation between the image and the other image.\n\nArgs:\n  - other: The other image should be an image and should be the same size as the image being operated on.        TODO: support path?\n  - mask: Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None.\n\n\nReturns: Returns the image after the operation is completed.\n"
                                    },
                                    "args": [
                                        [
                                            "image::Image *",
                                            "other",
                                            null
                                        ],
                                        [
                                            "image::Image *",
                                            "mask",
                                            "nullptr"
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *b_nand(image::Image *other, image::Image *mask = nullptr)"
                                },
                                "b_or": {
                                    "type": "func",
                                    "name": "b_or",
                                    "doc": {
                                        "brief": "Performs a bitwise or operation between the image and the other image.",
                                        "param": {
                                            "other": "The other image should be an image and should be the same size as the image being operated on.        TODO: support path?",
                                            "mask": "Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None."
                                        },
                                        "return": "Returns the image after the operation is completed.",
                                        "maixpy": "maix.image.Image.b_or",
                                        "py_doc": "Performs a bitwise or operation between the image and the other image.\n\nArgs:\n  - other: The other image should be an image and should be the same size as the image being operated on.        TODO: support path?\n  - mask: Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None.\n\n\nReturns: Returns the image after the operation is completed.\n"
                                    },
                                    "args": [
                                        [
                                            "image::Image *",
                                            "other",
                                            null
                                        ],
                                        [
                                            "image::Image *",
                                            "mask",
                                            "nullptr"
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *b_or(image::Image *other, image::Image *mask = nullptr)"
                                },
                                "b_nor": {
                                    "type": "func",
                                    "name": "b_nor",
                                    "doc": {
                                        "brief": "Performs a bitwise nor operation between the image and the other image.",
                                        "param": {
                                            "other": "The other image should be an image and should be the same size as the image being operated on.        TODO: support path?",
                                            "mask": "Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None."
                                        },
                                        "return": "Returns the image after the operation is completed.",
                                        "maixpy": "maix.image.Image.b_nor",
                                        "py_doc": "Performs a bitwise nor operation between the image and the other image.\n\nArgs:\n  - other: The other image should be an image and should be the same size as the image being operated on.        TODO: support path?\n  - mask: Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None.\n\n\nReturns: Returns the image after the operation is completed.\n"
                                    },
                                    "args": [
                                        [
                                            "image::Image *",
                                            "other",
                                            null
                                        ],
                                        [
                                            "image::Image *",
                                            "mask",
                                            "nullptr"
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *b_nor(image::Image *other, image::Image *mask = nullptr)"
                                },
                                "b_xor": {
                                    "type": "func",
                                    "name": "b_xor",
                                    "doc": {
                                        "brief": "Performs a bitwise xor operation between the image and the other image.",
                                        "param": {
                                            "other": "The other image should be an image and should be the same size as the image being operated on.        TODO: support path?",
                                            "mask": "Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None."
                                        },
                                        "return": "Returns the image after the operation is completed.",
                                        "maixpy": "maix.image.Image.b_xor",
                                        "py_doc": "Performs a bitwise xor operation between the image and the other image.\n\nArgs:\n  - other: The other image should be an image and should be the same size as the image being operated on.        TODO: support path?\n  - mask: Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None.\n\n\nReturns: Returns the image after the operation is completed.\n"
                                    },
                                    "args": [
                                        [
                                            "image::Image *",
                                            "other",
                                            null
                                        ],
                                        [
                                            "image::Image *",
                                            "mask",
                                            "nullptr"
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *b_xor(image::Image *other, image::Image *mask = nullptr)"
                                },
                                "b_xnor": {
                                    "type": "func",
                                    "name": "b_xnor",
                                    "doc": {
                                        "brief": "Performs a bitwise xnor operation between the image and the other image.",
                                        "param": {
                                            "other": "The other image should be an image and should be the same size as the image being operated on.        TODO: support path?",
                                            "mask": "Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None."
                                        },
                                        "return": "Returns the image after the operation is completed.",
                                        "maixpy": "maix.image.Image.b_xnor",
                                        "py_doc": "Performs a bitwise xnor operation between the image and the other image.\n\nArgs:\n  - other: The other image should be an image and should be the same size as the image being operated on.        TODO: support path?\n  - mask: Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None.\n\n\nReturns: Returns the image after the operation is completed.\n"
                                    },
                                    "args": [
                                        [
                                            "image::Image *",
                                            "other",
                                            null
                                        ],
                                        [
                                            "image::Image *",
                                            "mask",
                                            "nullptr"
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *b_xnor(image::Image *other, image::Image *mask = nullptr)"
                                },
                                "awb": {
                                    "type": "func",
                                    "name": "awb",
                                    "doc": {
                                        "brief": "Performs an auto white balance operation on the image. TODO: support in the feature",
                                        "param": {
                                            "max": "if True uses the white-patch algorithm instead. default is false."
                                        },
                                        "return": "Returns the image after the operation is completed.",
                                        "maixpy": "maix.image.Image.awb",
                                        "py_doc": "Performs an auto white balance operation on the image. TODO: support in the feature\n\nArgs:\n  - max: if True uses the white-patch algorithm instead. default is false.\n\n\nReturns: Returns the image after the operation is completed.\n"
                                    },
                                    "args": [
                                        [
                                            "bool",
                                            "max",
                                            "false"
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *awb(bool max = false)"
                                },
                                "ccm": {
                                    "type": "func",
                                    "name": "ccm",
                                    "doc": {
                                        "brief": "Multiples the passed (3x3) or (4x3) floating-point color-correction-matrix with the image.\\nnote: Grayscale format is not support.",
                                        "param": {
                                            "matrix": "The color correction matrix to use. 3x3 or 4x3 matrix.\nWeights may either be positive or negative, and the sum of each column in the 3x3 matrix should generally be 1.\nexample:\n{\n1, 0, 0,\n0, 1, 0,\n0, 0, 1,\n}\nWhere the last row of the 4x3 matrix is an offset per color channel. If you add an offset you may wish to make the\nweights sum to less than 1 to account for the offset.\nexample:\n{\n1, 0, 0,\n0, 1, 0,\n0, 0, 1,\n0, 0, 0,\n}"
                                        },
                                        "return": "Returns the image after the operation is completed.",
                                        "maixpy": "maix.image.Image.ccm",
                                        "py_doc": "Multiples the passed (3x3) or (4x3) floating-point color-correction-matrix with the image.\nnote: Grayscale format is not support.\n\nArgs:\n  - matrix: The color correction matrix to use. 3x3 or 4x3 matrix.\nWeights may either be positive or negative, and the sum of each column in the 3x3 matrix should generally be 1.\nexample:\n{\n1, 0, 0,\n0, 1, 0,\n0, 0, 1,\n}\nWhere the last row of the 4x3 matrix is an offset per color channel. If you add an offset you may wish to make the\nweights sum to less than 1 to account for the offset.\nexample:\n{\n1, 0, 0,\n0, 1, 0,\n0, 0, 1,\n0, 0, 0,\n}\n\n\nReturns: Returns the image after the operation is completed.\n"
                                    },
                                    "args": [
                                        [
                                            "std::vector<float> &",
                                            "matrix",
                                            null
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *ccm(std::vector<float> &matrix)"
                                },
                                "gamma": {
                                    "type": "func",
                                    "name": "gamma",
                                    "doc": {
                                        "brief": "Quickly changes the image gamma, contrast, and brightness. Create a array whose size is usually 255,\\nand use the parameters gamma, contrast, and brightness to calculate the value of the array, and then map the\\nimage pixel value through the value of the array.\\nThe calculation method for array is: array[array_idx] = (powf((array_idx / 255.0), (1 / gamma)) * contrast + brightness) * scale,\\n`powf` is a function used to calculate floating point power.\\n`array` is the array used for mapping.\\n`array_idx` is the index of the array, the maximum value is determined according to the image format, usually 255.\\n`scale` is a constant, the value is determined by the image format, usually 255.\\nMapping method:\\nAssume that a pixel value in the image is 128, then map the pixel value to the value of array[128]\\nUsers can adjust the value of the array through the gamma, contrast, and brightness parameters.",
                                        "param": {
                                            "gamma": "The contrast gamma greater than 1.0 makes the image darker in a non-linear manner while less than 1.0 makes the image brighter. default is 1.0.",
                                            "contrast": "The contrast value greater than 1.0 makes the image brighter in a linear manner while less than 1.0 makes the image darker. default is 1.0.",
                                            "brightness": "The brightness value greater than 0.0 makes the image brighter in a constant manner while less than 0.0 makes the image darker. default is 0.0."
                                        },
                                        "return": "Returns the image after the operation is completed.",
                                        "maixpy": "maix.image.Image.gamma",
                                        "py_doc": "Quickly changes the image gamma, contrast, and brightness. Create a array whose size is usually 255,\nand use the parameters gamma, contrast, and brightness to calculate the value of the array, and then map the\nimage pixel value through the value of the array.\nThe calculation method for array is: array[array_idx] = (powf((array_idx / 255.0), (1 / gamma)) * contrast + brightness) * scale,\n`powf` is a function used to calculate floating point power.\n`array` is the array used for mapping.\n`array_idx` is the index of the array, the maximum value is determined according to the image format, usually 255.\n`scale` is a constant, the value is determined by the image format, usually 255.\nMapping method:\nAssume that a pixel value in the image is 128, then map the pixel value to the value of array[128]\nUsers can adjust the value of the array through the gamma, contrast, and brightness parameters.\n\nArgs:\n  - gamma: The contrast gamma greater than 1.0 makes the image darker in a non-linear manner while less than 1.0 makes the image brighter. default is 1.0.\n  - contrast: The contrast value greater than 1.0 makes the image brighter in a linear manner while less than 1.0 makes the image darker. default is 1.0.\n  - brightness: The brightness value greater than 0.0 makes the image brighter in a constant manner while less than 0.0 makes the image darker. default is 0.0.\n\n\nReturns: Returns the image after the operation is completed.\n"
                                    },
                                    "args": [
                                        [
                                            "double",
                                            "gamma",
                                            "1.0"
                                        ],
                                        [
                                            "double",
                                            "contrast",
                                            "1.0"
                                        ],
                                        [
                                            "double",
                                            "brightness",
                                            "0.0"
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *gamma(double gamma = 1.0, double contrast = 1.0, double brightness = 0.0)"
                                },
                                "gamma_corr": {
                                    "type": "func",
                                    "name": "gamma_corr",
                                    "doc": {
                                        "brief": "Alias for Image.gamma.",
                                        "param": {
                                            "gamma": "The contrast gamma greater than 1.0 makes the image darker in a non-linear manner while less than 1.0 makes the image brighter. default is 1.0.",
                                            "contrast": "The contrast value greater than 1.0 makes the image brighter in a linear manner while less than 1.0 makes the image darker. default is 1.0.",
                                            "brightness": "The brightness value greater than 0.0 makes the image brighter in a constant manner while less than 0.0 makes the image darker. default is 0.0."
                                        },
                                        "return": "Returns the image after the operation is completed.",
                                        "maixpy": "maix.image.Image.gamma_corr",
                                        "py_doc": "Alias for Image.gamma.\n\nArgs:\n  - gamma: The contrast gamma greater than 1.0 makes the image darker in a non-linear manner while less than 1.0 makes the image brighter. default is 1.0.\n  - contrast: The contrast value greater than 1.0 makes the image brighter in a linear manner while less than 1.0 makes the image darker. default is 1.0.\n  - brightness: The brightness value greater than 0.0 makes the image brighter in a constant manner while less than 0.0 makes the image darker. default is 0.0.\n\n\nReturns: Returns the image after the operation is completed.\n"
                                    },
                                    "args": [
                                        [
                                            "double",
                                            "gamma",
                                            null
                                        ],
                                        [
                                            "double",
                                            "contrast",
                                            "1.0"
                                        ],
                                        [
                                            "double",
                                            "brightness",
                                            "0.0"
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *gamma_corr(double gamma, double contrast = 1.0, double brightness = 0.0)"
                                },
                                "negate": {
                                    "type": "func",
                                    "name": "negate",
                                    "doc": {
                                        "brief": "Flips (numerically inverts) all pixels values in an image",
                                        "return": "Returns the image after the operation is completed.",
                                        "maixpy": "maix.image.Image.negate",
                                        "py_doc": "Flips (numerically inverts) all pixels values in an image\n\nReturns: Returns the image after the operation is completed.\n"
                                    },
                                    "args": [],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *negate()"
                                },
                                "replace": {
                                    "type": "func",
                                    "name": "replace",
                                    "doc": {
                                        "brief": "Replaces all pixels in the image with the corresponding pixels in the other image.",
                                        "param": {
                                            "other": "The other image should be an image and should be the same size as the image being operated on.",
                                            "hmirror": "If true, the image will be horizontally mirrored before the operation. default is false.",
                                            "vflip": "If true, the image will be vertically flipped before the operation. default is false.",
                                            "transpose": "If true, the image can be used to rotate 90 degrees or 270 degrees.\nhmirror = false, vflip = false, transpose = false, the image will not be rotated.\nhmirror = false, vflip = true, transpose = true, the image will be rotated 90 degrees.\nhmirror = true, vflip = true, transpose = false, the image will be rotated 180 degrees.\nhmirror = true, vflip = false, transpose = true, the image will be rotated 270 degrees.",
                                            "mask": "Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None."
                                        },
                                        "return": "Returns the image after the operation is completed.",
                                        "maixpy": "maix.image.Image.replace",
                                        "py_doc": "Replaces all pixels in the image with the corresponding pixels in the other image.\n\nArgs:\n  - other: The other image should be an image and should be the same size as the image being operated on.\n  - hmirror: If true, the image will be horizontally mirrored before the operation. default is false.\n  - vflip: If true, the image will be vertically flipped before the operation. default is false.\n  - transpose: If true, the image can be used to rotate 90 degrees or 270 degrees.\nhmirror = false, vflip = false, transpose = false, the image will not be rotated.\nhmirror = false, vflip = true, transpose = true, the image will be rotated 90 degrees.\nhmirror = true, vflip = true, transpose = false, the image will be rotated 180 degrees.\nhmirror = true, vflip = false, transpose = true, the image will be rotated 270 degrees.\n  - mask: Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None.\n\n\nReturns: Returns the image after the operation is completed.\n"
                                    },
                                    "args": [
                                        [
                                            "image::Image *",
                                            "other",
                                            "nullptr"
                                        ],
                                        [
                                            "bool",
                                            "hmirror",
                                            "false"
                                        ],
                                        [
                                            "bool",
                                            "vflip",
                                            "false"
                                        ],
                                        [
                                            "bool",
                                            "transpose",
                                            "false"
                                        ],
                                        [
                                            "image::Image *",
                                            "mask",
                                            "nullptr"
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *replace(image::Image *other = nullptr, bool hmirror = false, bool vflip = false, bool transpose = false, image::Image *mask = nullptr)"
                                },
                                "set": {
                                    "type": "func",
                                    "name": "set",
                                    "doc": {
                                        "brief": "Alias for Image::replace.",
                                        "param": {
                                            "other": "The other image should be an image and should be the same size as the image being operated on.",
                                            "hmirror": "If true, the image will be horizontally mirrored before the operation. default is false.",
                                            "vflip": "If true, the image will be vertically flipped before the operation. default is false.",
                                            "mask": "Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None."
                                        },
                                        "return": "Returns the image after the operation is completed.",
                                        "maixpy": "maix.image.Image.set",
                                        "py_doc": "Alias for Image::replace.\n\nArgs:\n  - other: The other image should be an image and should be the same size as the image being operated on.\n  - hmirror: If true, the image will be horizontally mirrored before the operation. default is false.\n  - vflip: If true, the image will be vertically flipped before the operation. default is false.\n  - mask: Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None.\n\n\nReturns: Returns the image after the operation is completed.\n"
                                    },
                                    "args": [
                                        [
                                            "image::Image *",
                                            "other",
                                            null
                                        ],
                                        [
                                            "bool",
                                            "hmirror",
                                            "false"
                                        ],
                                        [
                                            "bool",
                                            "vflip",
                                            "false"
                                        ],
                                        [
                                            "bool",
                                            "transpose",
                                            "false"
                                        ],
                                        [
                                            "image::Image *",
                                            "mask",
                                            "nullptr"
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *set(image::Image *other, bool hmirror = false, bool vflip = false, bool transpose = false, image::Image *mask = nullptr)"
                                },
                                "add": {
                                    "type": "func",
                                    "name": "add",
                                    "doc": {
                                        "brief": "Adds the other image to the image.",
                                        "param": {
                                            "other": "The other image should be an image and should be the same size as the image being operated on.    TODO: support path?",
                                            "mask": "Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None."
                                        },
                                        "return": "Returns the image after the operation is completed.",
                                        "maixpy": "maix.image.Image.add",
                                        "py_doc": "Adds the other image to the image.\n\nArgs:\n  - other: The other image should be an image and should be the same size as the image being operated on.    TODO: support path?\n  - mask: Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None.\n\n\nReturns: Returns the image after the operation is completed.\n"
                                    },
                                    "args": [
                                        [
                                            "image::Image *",
                                            "other",
                                            null
                                        ],
                                        [
                                            "image::Image *",
                                            "mask",
                                            "nullptr"
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *add(image::Image *other, image::Image *mask = nullptr)"
                                },
                                "sub": {
                                    "type": "func",
                                    "name": "sub",
                                    "doc": {
                                        "brief": "Subtracts the other image from the image.",
                                        "param": {
                                            "other": "The other image should be an image and should be the same size as the image being operated on.    TODO: support path?",
                                            "reverse": "If true, the image will be reversed before the operation. default is false.",
                                            "mask": "Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None."
                                        },
                                        "return": "Returns the image after the operation is completed.",
                                        "maixpy": "maix.image.Image.sub",
                                        "py_doc": "Subtracts the other image from the image.\n\nArgs:\n  - other: The other image should be an image and should be the same size as the image being operated on.    TODO: support path?\n  - reverse: If true, the image will be reversed before the operation. default is false.\n  - mask: Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None.\n\n\nReturns: Returns the image after the operation is completed.\n"
                                    },
                                    "args": [
                                        [
                                            "image::Image *",
                                            "other",
                                            null
                                        ],
                                        [
                                            "bool",
                                            "reverse",
                                            "false"
                                        ],
                                        [
                                            "image::Image *",
                                            "mask",
                                            "nullptr"
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *sub(image::Image *other, bool reverse = false, image::Image *mask = nullptr)"
                                },
                                "mul": {
                                    "type": "func",
                                    "name": "mul",
                                    "doc": {
                                        "brief": "Multiplies the image by the other image.\\nNote: This method is meant for image blending and cannot multiply the pixels in the image by a scalar like 2.",
                                        "param": {
                                            "other": "The other image should be an image and should be the same size as the image being operated on.    TODO: support path?",
                                            "invert": "If true, the image will be change the multiplication operation from a*b to 1/((1/a)*(1/b)).\nIn particular, this lightens the image instead of darkening it (e.g. multiply versus burn operations). default is false.",
                                            "mask": "Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None."
                                        },
                                        "return": "Returns the image after the operation is completed.",
                                        "maixpy": "maix.image.Image.mul",
                                        "py_doc": "Multiplies the image by the other image.\nNote: This method is meant for image blending and cannot multiply the pixels in the image by a scalar like 2.\n\nArgs:\n  - other: The other image should be an image and should be the same size as the image being operated on.    TODO: support path?\n  - invert: If true, the image will be change the multiplication operation from a*b to 1/((1/a)*(1/b)).\nIn particular, this lightens the image instead of darkening it (e.g. multiply versus burn operations). default is false.\n  - mask: Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None.\n\n\nReturns: Returns the image after the operation is completed.\n"
                                    },
                                    "args": [
                                        [
                                            "image::Image *",
                                            "other",
                                            null
                                        ],
                                        [
                                            "bool",
                                            "invert",
                                            "false"
                                        ],
                                        [
                                            "image::Image *",
                                            "mask",
                                            "nullptr"
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *mul(image::Image *other, bool invert = false, image::Image *mask = nullptr)"
                                },
                                "div": {
                                    "type": "func",
                                    "name": "div",
                                    "doc": {
                                        "brief": "Divides the image by the other image.\\nThis method is meant for image blending and cannot divide the pixels in the image by a scalar like 2.",
                                        "param": {
                                            "other": "The other image should be an image and should be the same size as the image being operated on.    TODO: support path?",
                                            "invert": "If true, the image will be change the division direction from a/b to b/a. default is false.",
                                            "mod": "If true, the image will be change the division operation to the modulus operation. default is false.",
                                            "mask": "Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None."
                                        },
                                        "return": "Returns the image after the operation is completed.",
                                        "maixpy": "maix.image.Image.div",
                                        "py_doc": "Divides the image by the other image.\nThis method is meant for image blending and cannot divide the pixels in the image by a scalar like 2.\n\nArgs:\n  - other: The other image should be an image and should be the same size as the image being operated on.    TODO: support path?\n  - invert: If true, the image will be change the division direction from a/b to b/a. default is false.\n  - mod: If true, the image will be change the division operation to the modulus operation. default is false.\n  - mask: Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None.\n\n\nReturns: Returns the image after the operation is completed.\n"
                                    },
                                    "args": [
                                        [
                                            "image::Image *",
                                            "other",
                                            null
                                        ],
                                        [
                                            "bool",
                                            "invert",
                                            "false"
                                        ],
                                        [
                                            "bool",
                                            "mod",
                                            "false"
                                        ],
                                        [
                                            "image::Image *",
                                            "mask",
                                            "nullptr"
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *div(image::Image *other, bool invert = false, bool mod = false, image::Image *mask = nullptr)"
                                },
                                "min": {
                                    "type": "func",
                                    "name": "min",
                                    "doc": {
                                        "brief": "Caculate the minimum of each pixel in the image and the other image.",
                                        "param": {
                                            "other": "The other image should be an image and should be the same size as the image being operated on.",
                                            "mask": "Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None."
                                        },
                                        "return": "Returns the image after the operation is completed.",
                                        "maixpy": "maix.image.Image.min",
                                        "py_doc": "Caculate the minimum of each pixel in the image and the other image.\n\nArgs:\n  - other: The other image should be an image and should be the same size as the image being operated on.\n  - mask: Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None.\n\n\nReturns: Returns the image after the operation is completed.\n"
                                    },
                                    "args": [
                                        [
                                            "image::Image *",
                                            "other",
                                            null
                                        ],
                                        [
                                            "image::Image *",
                                            "mask",
                                            "nullptr"
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *min(image::Image *other, image::Image *mask = nullptr)"
                                },
                                "max": {
                                    "type": "func",
                                    "name": "max",
                                    "doc": {
                                        "brief": "Caculate the maximum of each pixel in the image and the other image.",
                                        "param": {
                                            "other": "The other image should be an image and should be the same size as the image being operated on.",
                                            "mask": "Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None."
                                        },
                                        "return": "Returns the image after the operation is completed.",
                                        "maixpy": "maix.image.Image.max",
                                        "py_doc": "Caculate the maximum of each pixel in the image and the other image.\n\nArgs:\n  - other: The other image should be an image and should be the same size as the image being operated on.\n  - mask: Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None.\n\n\nReturns: Returns the image after the operation is completed.\n"
                                    },
                                    "args": [
                                        [
                                            "image::Image *",
                                            "other",
                                            null
                                        ],
                                        [
                                            "image::Image *",
                                            "mask",
                                            "nullptr"
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *max(image::Image *other, image::Image *mask = nullptr)"
                                },
                                "difference": {
                                    "type": "func",
                                    "name": "difference",
                                    "doc": {
                                        "brief": "Caculate the absolute value of the difference between each pixel in the image and the other image.",
                                        "param": {
                                            "other": "The other image should be an image and should be the same size as the image being operated on.",
                                            "mask": "Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None."
                                        },
                                        "return": "Returns the image after the operation is completed.",
                                        "maixpy": "maix.image.Image.difference",
                                        "py_doc": "Caculate the absolute value of the difference between each pixel in the image and the other image.\n\nArgs:\n  - other: The other image should be an image and should be the same size as the image being operated on.\n  - mask: Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None.\n\n\nReturns: Returns the image after the operation is completed.\n"
                                    },
                                    "args": [
                                        [
                                            "image::Image *",
                                            "other",
                                            null
                                        ],
                                        [
                                            "image::Image *",
                                            "mask",
                                            "nullptr"
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *difference(image::Image *other, image::Image *mask = nullptr)"
                                },
                                "blend": {
                                    "type": "func",
                                    "name": "blend",
                                    "doc": {
                                        "brief": "Blends the image with the other image.\\nres = alpha * this_img / 256 + (256 - alpha) * other_img / 256",
                                        "param": {
                                            "other": "The other image should be an image and should be the same size as the image being operated on.",
                                            "alpha": "The alpha value of the blend, the value range is [0, 256],default is 128.",
                                            "mask": "Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None."
                                        },
                                        "return": "Returns the image after the operation is completed.",
                                        "maixpy": "maix.image.Image.blend",
                                        "py_doc": "Blends the image with the other image.\nres = alpha * this_img / 256 + (256 - alpha) * other_img / 256\n\nArgs:\n  - other: The other image should be an image and should be the same size as the image being operated on.\n  - alpha: The alpha value of the blend, the value range is [0, 256],default is 128.\n  - mask: Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None.\n\n\nReturns: Returns the image after the operation is completed.\n"
                                    },
                                    "args": [
                                        [
                                            "image::Image *",
                                            "other",
                                            null
                                        ],
                                        [
                                            "int",
                                            "alpha",
                                            "128"
                                        ],
                                        [
                                            "image::Image *",
                                            "mask",
                                            "nullptr"
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *blend(image::Image *other, int alpha = 128, image::Image *mask = nullptr)"
                                },
                                "histeq": {
                                    "type": "func",
                                    "name": "histeq",
                                    "doc": {
                                        "brief": "Runs the histogram equalization algorithm on the image.",
                                        "param": {
                                            "adaptive": "If true, an adaptive histogram equalization method will be run on the image instead which as generally better results than non-adaptive histogram qualization but a longer run time. default is false.",
                                            "clip_limit": "Provides a way to limit the contrast of the adaptive histogram qualization. Use a small value for this, like 10, to produce good histogram equalized contrast limited images. default is -1.",
                                            "mask": "Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None."
                                        },
                                        "return": "Returns the image after the operation is completed.",
                                        "maixpy": "maix.image.Image.histeq",
                                        "py_doc": "Runs the histogram equalization algorithm on the image.\n\nArgs:\n  - adaptive: If true, an adaptive histogram equalization method will be run on the image instead which as generally better results than non-adaptive histogram qualization but a longer run time. default is false.\n  - clip_limit: Provides a way to limit the contrast of the adaptive histogram qualization. Use a small value for this, like 10, to produce good histogram equalized contrast limited images. default is -1.\n  - mask: Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None.\n\n\nReturns: Returns the image after the operation is completed.\n"
                                    },
                                    "args": [
                                        [
                                            "bool",
                                            "adaptive",
                                            "false"
                                        ],
                                        [
                                            "int",
                                            "clip_limit",
                                            "-1"
                                        ],
                                        [
                                            "image::Image *",
                                            "mask",
                                            "nullptr"
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *histeq(bool adaptive = false, int clip_limit = -1, image::Image *mask = nullptr)"
                                },
                                "mean": {
                                    "type": "func",
                                    "name": "mean",
                                    "doc": {
                                        "brief": "Standard mean blurring filter using a box filter.\\nThe parameters offset and invert are valid when threshold is True.",
                                        "param": {
                                            "size": "Kernel size. The actual kernel size is ((size * 2) + 1) * ((size * 2) + 1). Use 1(3x3 kernel), 2(5x5 kernel).",
                                            "threshold": "If true, which will enable adaptive thresholding of the image which sets pixels to white or black based on a pixel\u2019s brightness in relation to the brightness of the kernel of pixels around them.\ndefault is false.",
                                            "offset": "The larger the offset value, the lower brightness pixels on the original image will be set to white. default is 0.",
                                            "invert": "If true, the image will be inverted before the operation. default is false.",
                                            "mask": "Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None."
                                        },
                                        "return": "Returns the image after the operation is completed.",
                                        "maixpy": "maix.image.Image.mean",
                                        "py_doc": "Standard mean blurring filter using a box filter.\nThe parameters offset and invert are valid when threshold is True.\n\nArgs:\n  - size: Kernel size. The actual kernel size is ((size * 2) + 1) * ((size * 2) + 1). Use 1(3x3 kernel), 2(5x5 kernel).\n  - threshold: If true, which will enable adaptive thresholding of the image which sets pixels to white or black based on a pixel\u2019s brightness in relation to the brightness of the kernel of pixels around them.\ndefault is false.\n  - offset: The larger the offset value, the lower brightness pixels on the original image will be set to white. default is 0.\n  - invert: If true, the image will be inverted before the operation. default is false.\n  - mask: Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None.\n\n\nReturns: Returns the image after the operation is completed.\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "size",
                                            null
                                        ],
                                        [
                                            "bool",
                                            "threshold",
                                            "false"
                                        ],
                                        [
                                            "int",
                                            "offset",
                                            "0"
                                        ],
                                        [
                                            "bool",
                                            "invert",
                                            "false"
                                        ],
                                        [
                                            "image::Image *",
                                            "mask",
                                            "nullptr"
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *mean(int size, bool threshold = false, int offset = 0, bool invert = false, image::Image *mask = nullptr)"
                                },
                                "median": {
                                    "type": "func",
                                    "name": "median",
                                    "doc": {
                                        "brief": "Runs the median filter on the image. The median filter is the best filter for smoothing surfaces while preserving edges but it is very slow.",
                                        "param": {
                                            "size": "Kernel size. The actual kernel size is ((size * 2) + 1) * ((size * 2) + 1). Use 1(3x3 kernel), 2(5x5 kernel).",
                                            "percentile": "This parameter controls the percentile of the value used in the kernel. You can set this to 0 for a min filter, 0.25 for a lower quartile filter, 0.75 for an upper quartile filter, and 1.0 for a max filter. default is 0.5.",
                                            "threshold": "If true, which will enable adaptive thresholding of the image which sets pixels to white or black based on a pixel\u2019s brightness in relation to the brightness of the kernel of pixels around them.\ndefault is false.",
                                            "offset": "The larger the offset value, the lower brightness pixels on the original image will be set to white. default is 0.",
                                            "invert": "If true, the image will be inverted before the operation. default is false.",
                                            "mask": "Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None."
                                        },
                                        "return": "Returns the image after the operation is completed.",
                                        "maixpy": "maix.image.Image.median",
                                        "py_doc": "Runs the median filter on the image. The median filter is the best filter for smoothing surfaces while preserving edges but it is very slow.\n\nArgs:\n  - size: Kernel size. The actual kernel size is ((size * 2) + 1) * ((size * 2) + 1). Use 1(3x3 kernel), 2(5x5 kernel).\n  - percentile: This parameter controls the percentile of the value used in the kernel. You can set this to 0 for a min filter, 0.25 for a lower quartile filter, 0.75 for an upper quartile filter, and 1.0 for a max filter. default is 0.5.\n  - threshold: If true, which will enable adaptive thresholding of the image which sets pixels to white or black based on a pixel\u2019s brightness in relation to the brightness of the kernel of pixels around them.\ndefault is false.\n  - offset: The larger the offset value, the lower brightness pixels on the original image will be set to white. default is 0.\n  - invert: If true, the image will be inverted before the operation. default is false.\n  - mask: Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None.\n\n\nReturns: Returns the image after the operation is completed.\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "size",
                                            null
                                        ],
                                        [
                                            "double",
                                            "percentile",
                                            "0.5"
                                        ],
                                        [
                                            "bool",
                                            "threshold",
                                            "false"
                                        ],
                                        [
                                            "int",
                                            "offset",
                                            "0"
                                        ],
                                        [
                                            "bool",
                                            "invert",
                                            "false"
                                        ],
                                        [
                                            "image::Image *",
                                            "mask",
                                            "nullptr"
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *median(int size, double percentile = 0.5, bool threshold = false, int offset = 0, bool invert = false, image::Image *mask = nullptr)"
                                },
                                "mode": {
                                    "type": "func",
                                    "name": "mode",
                                    "doc": {
                                        "brief": "Runs the mode filter on the image by replacing each pixel with the mode of their neighbors.",
                                        "param": {
                                            "size": "Kernel size. The actual kernel size is ((size * 2) + 1) * ((size * 2) + 1). Use 1(3x3 kernel), 2(5x5 kernel).",
                                            "threshold": "If true, which will enable adaptive thresholding of the image which sets pixels to white or black based on a pixel\u2019s brightness in relation to the brightness of the kernel of pixels around them.\ndefault is false.",
                                            "offset": "The larger the offset value, the lower brightness pixels on the original image will be set to white. default is 0.",
                                            "invert": "If true, the image will be inverted before the operation. default is false.",
                                            "mask": "Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None."
                                        },
                                        "return": "Returns the image after the operation is completed.",
                                        "maixpy": "maix.image.Image.mode",
                                        "py_doc": "Runs the mode filter on the image by replacing each pixel with the mode of their neighbors.\n\nArgs:\n  - size: Kernel size. The actual kernel size is ((size * 2) + 1) * ((size * 2) + 1). Use 1(3x3 kernel), 2(5x5 kernel).\n  - threshold: If true, which will enable adaptive thresholding of the image which sets pixels to white or black based on a pixel\u2019s brightness in relation to the brightness of the kernel of pixels around them.\ndefault is false.\n  - offset: The larger the offset value, the lower brightness pixels on the original image will be set to white. default is 0.\n  - invert: If true, the image will be inverted before the operation. default is false.\n  - mask: Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None.\n\n\nReturns: Returns the image after the operation is completed.\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "size",
                                            null
                                        ],
                                        [
                                            "bool",
                                            "threshold",
                                            "false"
                                        ],
                                        [
                                            "int",
                                            "offset",
                                            "0"
                                        ],
                                        [
                                            "bool",
                                            "invert",
                                            "false"
                                        ],
                                        [
                                            "image::Image *",
                                            "mask",
                                            "nullptr"
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *mode(int size, bool threshold = false, int offset = 0, bool invert = false, image::Image *mask = nullptr)"
                                },
                                "midpoint": {
                                    "type": "func",
                                    "name": "midpoint",
                                    "doc": {
                                        "brief": "Runs the midpoint filter on the image.This filter finds the midpoint (max * bias + min * (1 - bias)) of each pixel neighborhood in the image.",
                                        "param": {
                                            "size": "Kernel size. The actual kernel size is ((size * 2) + 1) * ((size * 2) + 1). Use 1(3x3 kernel), 2(5x5 kernel).",
                                            "bias": "The bias of the midpoint. default is 0.5.",
                                            "threshold": "If true, which will enable adaptive thresholding of the image which sets pixels to white or black based on a pixel\u2019s brightness in relation to the brightness of the kernel of pixels around them.\ndefault is false.",
                                            "offset": "The larger the offset value, the lower brightness pixels on the original image will be set to white. default is 0.",
                                            "invert": "If true, the image will be inverted before the operation. default is false.",
                                            "mask": "Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None."
                                        },
                                        "return": "Returns the image after the operation is completed.",
                                        "maixpy": "maix.image.Image.midpoint",
                                        "py_doc": "Runs the midpoint filter on the image.This filter finds the midpoint (max * bias + min * (1 - bias)) of each pixel neighborhood in the image.\n\nArgs:\n  - size: Kernel size. The actual kernel size is ((size * 2) + 1) * ((size * 2) + 1). Use 1(3x3 kernel), 2(5x5 kernel).\n  - bias: The bias of the midpoint. default is 0.5.\n  - threshold: If true, which will enable adaptive thresholding of the image which sets pixels to white or black based on a pixel\u2019s brightness in relation to the brightness of the kernel of pixels around them.\ndefault is false.\n  - offset: The larger the offset value, the lower brightness pixels on the original image will be set to white. default is 0.\n  - invert: If true, the image will be inverted before the operation. default is false.\n  - mask: Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None.\n\n\nReturns: Returns the image after the operation is completed.\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "size",
                                            null
                                        ],
                                        [
                                            "double",
                                            "bias",
                                            "0.5"
                                        ],
                                        [
                                            "bool",
                                            "threshold",
                                            "false"
                                        ],
                                        [
                                            "int",
                                            "offset",
                                            "0"
                                        ],
                                        [
                                            "bool",
                                            "invert",
                                            "false"
                                        ],
                                        [
                                            "image::Image *",
                                            "mask",
                                            "nullptr"
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *midpoint(int size, double bias = 0.5, bool threshold = false, int offset = 0, bool invert = false, image::Image *mask = nullptr)"
                                },
                                "morph": {
                                    "type": "func",
                                    "name": "morph",
                                    "doc": {
                                        "brief": "Convolves the image by a filter kernel. This allows you to do general purpose convolutions on an image.",
                                        "param": {
                                            "size": "Kernel size. The actual kernel size is ((size * 2) + 1) * ((size * 2) + 1). Use 1(3x3 kernel), 2(5x5 kernel).",
                                            "kernel": "The kernel used for convolution. The kernel should be a list of lists of numbers. The kernel should be the same size as the actual kernel size.",
                                            "mul": "This parameter is used to multiply the convolved pixel results. default is auto.",
                                            "add": "This parameter is the value to be added to each convolution pixel result. default is 0.0.",
                                            "threshold": "If true, which will enable adaptive thresholding of the image which sets pixels to white or black based on a pixel\u2019s brightness in relation to the brightness of the kernel of pixels around them.\ndefault is false.",
                                            "offset": "The larger the offset value, the lower brightness pixels on the original image will be set to white. default is 0.",
                                            "invert": "If true, the image will be inverted before the operation. default is false.",
                                            "mask": "Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None."
                                        },
                                        "return": "Returns the image after the operation is completed.",
                                        "maixpy": "maix.image.Image.morph",
                                        "py_doc": "Convolves the image by a filter kernel. This allows you to do general purpose convolutions on an image.\n\nArgs:\n  - size: Kernel size. The actual kernel size is ((size * 2) + 1) * ((size * 2) + 1). Use 1(3x3 kernel), 2(5x5 kernel).\n  - kernel: The kernel used for convolution. The kernel should be a list of lists of numbers. The kernel should be the same size as the actual kernel size.\n  - mul: This parameter is used to multiply the convolved pixel results. default is auto.\n  - add: This parameter is the value to be added to each convolution pixel result. default is 0.0.\n  - threshold: If true, which will enable adaptive thresholding of the image which sets pixels to white or black based on a pixel\u2019s brightness in relation to the brightness of the kernel of pixels around them.\ndefault is false.\n  - offset: The larger the offset value, the lower brightness pixels on the original image will be set to white. default is 0.\n  - invert: If true, the image will be inverted before the operation. default is false.\n  - mask: Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None.\n\n\nReturns: Returns the image after the operation is completed.\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "size",
                                            null
                                        ],
                                        [
                                            "std::vector<int>",
                                            "kernel",
                                            null
                                        ],
                                        [
                                            "float",
                                            "mul",
                                            "-1"
                                        ],
                                        [
                                            "float",
                                            "add",
                                            "0.0"
                                        ],
                                        [
                                            "bool",
                                            "threshold",
                                            "false"
                                        ],
                                        [
                                            "int",
                                            "offset",
                                            "0"
                                        ],
                                        [
                                            "bool",
                                            "invert",
                                            "false"
                                        ],
                                        [
                                            "image::Image *",
                                            "mask",
                                            "nullptr"
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *morph(int size, std::vector<int> kernel, float mul = -1, float add = 0.0, bool threshold = false, int offset = 0, bool invert = false, image::Image *mask = nullptr)"
                                },
                                "gaussian": {
                                    "type": "func",
                                    "name": "gaussian",
                                    "doc": {
                                        "brief": "Convolves the image by a smoothing guassian kernel.",
                                        "param": {
                                            "size": "Kernel size. The actual kernel size is ((size * 2) + 1) * ((size * 2) + 1). Use 1(3x3 kernel), 2(5x5 kernel).",
                                            "unsharp": "If true, this method will perform an unsharp mask operation instead of gaussian filtering operation, this improves the clarity of image edges. default is false.",
                                            "mul": "This parameter is used to multiply the convolved pixel results. default is auto.",
                                            "add": "This parameter is the value to be added to each convolution pixel result. default is 0.0.",
                                            "threshold": "If true, which will enable adaptive thresholding of the image which sets pixels to white or black based on a pixel\u2019s brightness in relation to the brightness of the kernel of pixels around them.\ndefault is false.",
                                            "offset": "The larger the offset value, the lower brightness pixels on the original image will be set to white. default is 0.",
                                            "invert": "If true, the image will be inverted before the operation. default is false.",
                                            "mask": "Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None."
                                        },
                                        "return": "Returns the image after the operation is completed.",
                                        "maixpy": "maix.image.Image.gaussian",
                                        "py_doc": "Convolves the image by a smoothing guassian kernel.\n\nArgs:\n  - size: Kernel size. The actual kernel size is ((size * 2) + 1) * ((size * 2) + 1). Use 1(3x3 kernel), 2(5x5 kernel).\n  - unsharp: If true, this method will perform an unsharp mask operation instead of gaussian filtering operation, this improves the clarity of image edges. default is false.\n  - mul: This parameter is used to multiply the convolved pixel results. default is auto.\n  - add: This parameter is the value to be added to each convolution pixel result. default is 0.0.\n  - threshold: If true, which will enable adaptive thresholding of the image which sets pixels to white or black based on a pixel\u2019s brightness in relation to the brightness of the kernel of pixels around them.\ndefault is false.\n  - offset: The larger the offset value, the lower brightness pixels on the original image will be set to white. default is 0.\n  - invert: If true, the image will be inverted before the operation. default is false.\n  - mask: Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None.\n\n\nReturns: Returns the image after the operation is completed.\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "size",
                                            null
                                        ],
                                        [
                                            "bool",
                                            "unsharp",
                                            "false"
                                        ],
                                        [
                                            "float",
                                            "mul",
                                            "-1"
                                        ],
                                        [
                                            "float",
                                            "add",
                                            "0.0"
                                        ],
                                        [
                                            "bool",
                                            "threshold",
                                            "false"
                                        ],
                                        [
                                            "int",
                                            "offset",
                                            "0"
                                        ],
                                        [
                                            "bool",
                                            "invert",
                                            "false"
                                        ],
                                        [
                                            "image::Image *",
                                            "mask",
                                            "nullptr"
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *gaussian(int size, bool unsharp = false, float mul = -1, float add = 0.0, bool threshold = false, int offset = 0, bool invert = false, image::Image *mask = nullptr)"
                                },
                                "laplacian": {
                                    "type": "func",
                                    "name": "laplacian",
                                    "doc": {
                                        "brief": "Convolves the image by a edge detecting laplacian kernel.",
                                        "param": {
                                            "size": "Kernel size. The actual kernel size is ((size * 2) + 1) * ((size * 2) + 1). Use 1(3x3 kernel), 2(5x5 kernel).",
                                            "sharpen": "If True, this method will sharpen the image instead of an unthresholded edge detection image. Then increase the kernel size to improve image clarity. default is false.",
                                            "mul": "This parameter is used to multiply the convolved pixel results. default is auto.",
                                            "add": "This parameter is the value to be added to each convolution pixel result. default is 0.0.",
                                            "threshold": "If true, which will enable adaptive thresholding of the image which sets pixels to white or black based on a pixel\u2019s brightness in relation to the brightness of the kernel of pixels around them.\ndefault is false.",
                                            "offset": "The larger the offset value, the lower brightness pixels on the original image will be set to white. default is 0.",
                                            "invert": "If true, the image will be inverted before the operation. default is false.",
                                            "mask": "Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None."
                                        },
                                        "return": "Returns the image after the operation is completed.",
                                        "maixpy": "maix.image.Image.laplacian",
                                        "py_doc": "Convolves the image by a edge detecting laplacian kernel.\n\nArgs:\n  - size: Kernel size. The actual kernel size is ((size * 2) + 1) * ((size * 2) + 1). Use 1(3x3 kernel), 2(5x5 kernel).\n  - sharpen: If True, this method will sharpen the image instead of an unthresholded edge detection image. Then increase the kernel size to improve image clarity. default is false.\n  - mul: This parameter is used to multiply the convolved pixel results. default is auto.\n  - add: This parameter is the value to be added to each convolution pixel result. default is 0.0.\n  - threshold: If true, which will enable adaptive thresholding of the image which sets pixels to white or black based on a pixel\u2019s brightness in relation to the brightness of the kernel of pixels around them.\ndefault is false.\n  - offset: The larger the offset value, the lower brightness pixels on the original image will be set to white. default is 0.\n  - invert: If true, the image will be inverted before the operation. default is false.\n  - mask: Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None.\n\n\nReturns: Returns the image after the operation is completed.\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "size",
                                            null
                                        ],
                                        [
                                            "bool",
                                            "sharpen",
                                            "false"
                                        ],
                                        [
                                            "float",
                                            "mul",
                                            "-1"
                                        ],
                                        [
                                            "float",
                                            "add",
                                            "0.0"
                                        ],
                                        [
                                            "bool",
                                            "threshold",
                                            "false"
                                        ],
                                        [
                                            "int",
                                            "offset",
                                            "0"
                                        ],
                                        [
                                            "bool",
                                            "invert",
                                            "false"
                                        ],
                                        [
                                            "image::Image *",
                                            "mask",
                                            "nullptr"
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *laplacian(int size, bool sharpen = false, float mul = -1, float add = 0.0, bool threshold = false, int offset = 0, bool invert = false, image::Image *mask = nullptr)"
                                },
                                "bilateral": {
                                    "type": "func",
                                    "name": "bilateral",
                                    "doc": {
                                        "brief": "Convolves the image by a bilateral filter.",
                                        "param": {
                                            "size": "Kernel size. The actual kernel size is ((size * 2) + 1) * ((size * 2) + 1). Use 1(3x3 kernel), 2(5x5 kernel).",
                                            "color_sigma": "Controls how closely colors are matched using the bilateral filter. default is 0.1.",
                                            "space_sigma": "Controls how closely pixels space-wise are blurred with each other. default is 1.",
                                            "threshold": "If true, which will enable adaptive thresholding of the image which sets pixels to white or black based on a pixel\u2019s brightness in relation to the brightness of the kernel of pixels around them.\ndefault is false.",
                                            "offset": "The larger the offset value, the lower brightness pixels on the original image will be set to white. default is 0.",
                                            "invert": "If true, the image will be inverted before the operation. default is false.",
                                            "mask": "Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None."
                                        },
                                        "return": "Returns the image after the operation is completed.",
                                        "maixpy": "maix.image.Image.bilateral",
                                        "py_doc": "Convolves the image by a bilateral filter.\n\nArgs:\n  - size: Kernel size. The actual kernel size is ((size * 2) + 1) * ((size * 2) + 1). Use 1(3x3 kernel), 2(5x5 kernel).\n  - color_sigma: Controls how closely colors are matched using the bilateral filter. default is 0.1.\n  - space_sigma: Controls how closely pixels space-wise are blurred with each other. default is 1.\n  - threshold: If true, which will enable adaptive thresholding of the image which sets pixels to white or black based on a pixel\u2019s brightness in relation to the brightness of the kernel of pixels around them.\ndefault is false.\n  - offset: The larger the offset value, the lower brightness pixels on the original image will be set to white. default is 0.\n  - invert: If true, the image will be inverted before the operation. default is false.\n  - mask: Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None.\n\n\nReturns: Returns the image after the operation is completed.\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "size",
                                            null
                                        ],
                                        [
                                            "double",
                                            "color_sigma",
                                            "0.1"
                                        ],
                                        [
                                            "double",
                                            "space_sigma",
                                            "1"
                                        ],
                                        [
                                            "bool",
                                            "threshold",
                                            "false"
                                        ],
                                        [
                                            "int",
                                            "offset",
                                            "0"
                                        ],
                                        [
                                            "bool",
                                            "invert",
                                            "false"
                                        ],
                                        [
                                            "image::Image *",
                                            "mask",
                                            "nullptr"
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *bilateral(int size, double color_sigma = 0.1, double space_sigma = 1, bool threshold = false, int offset = 0, bool invert = false, image::Image *mask = nullptr)"
                                },
                                "linpolar": {
                                    "type": "func",
                                    "name": "linpolar",
                                    "doc": {
                                        "brief": "Re-project\u2019s and image from cartessian coordinates to linear polar coordinates.",
                                        "param": {
                                            "reverse": "If true, the image will be reverse polar transformed. default is false."
                                        },
                                        "return": "Returns the image after the operation is completed.",
                                        "maixpy": "maix.image.Image.linpolar",
                                        "py_doc": "Re-project\u2019s and image from cartessian coordinates to linear polar coordinates.\n\nArgs:\n  - reverse: If true, the image will be reverse polar transformed. default is false.\n\n\nReturns: Returns the image after the operation is completed.\n"
                                    },
                                    "args": [
                                        [
                                            "bool",
                                            "reverse",
                                            "false"
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *linpolar(bool reverse = false)"
                                },
                                "logpolar": {
                                    "type": "func",
                                    "name": "logpolar",
                                    "doc": {
                                        "brief": "Re-project\u2019s and image from cartessian coordinates to log polar coordinates.",
                                        "param": {
                                            "reverse": "If true, the image will be reverse polar transformed. default is false."
                                        },
                                        "return": "Returns the image after the operation is completed.",
                                        "maixpy": "maix.image.Image.logpolar",
                                        "py_doc": "Re-project\u2019s and image from cartessian coordinates to log polar coordinates.\n\nArgs:\n  - reverse: If true, the image will be reverse polar transformed. default is false.\n\n\nReturns: Returns the image after the operation is completed.\n"
                                    },
                                    "args": [
                                        [
                                            "bool",
                                            "reverse",
                                            "false"
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *logpolar(bool reverse = false)"
                                },
                                "lens_corr": {
                                    "type": "func",
                                    "name": "lens_corr",
                                    "doc": {
                                        "brief": "Performs a lens correction operation on the image. TODO: support in the feature",
                                        "param": {
                                            "strength": "The strength of the lens correction. default is 1.8.",
                                            "zoom": "The zoom of the lens correction. default is 1.0.",
                                            "x_corr": "The x correction of the lens correction. default is 0.5.",
                                            "y_corr": "The y correction of the lens correction. default is 0.5."
                                        },
                                        "return": "Returns the image after the operation is completed.",
                                        "maixpy": "maix.image.Image.lens_corr",
                                        "py_doc": "Performs a lens correction operation on the image. TODO: support in the feature\n\nArgs:\n  - strength: The strength of the lens correction. default is 1.8.\n  - zoom: The zoom of the lens correction. default is 1.0.\n  - x_corr: The x correction of the lens correction. default is 0.5.\n  - y_corr: The y correction of the lens correction. default is 0.5.\n\n\nReturns: Returns the image after the operation is completed.\n"
                                    },
                                    "args": [
                                        [
                                            "double",
                                            "strength",
                                            "1.8"
                                        ],
                                        [
                                            "double",
                                            "zoom",
                                            "1.0"
                                        ],
                                        [
                                            "double",
                                            "x_corr",
                                            "0.5"
                                        ],
                                        [
                                            "double",
                                            "y_corr",
                                            "0.5"
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *lens_corr(double strength = 1.8, double zoom = 1.0, double x_corr = 0.5, double y_corr = 0.5)"
                                },
                                "rotation_corr": {
                                    "type": "func",
                                    "name": "rotation_corr",
                                    "doc": {
                                        "brief": "Performs a rotation correction operation on the image. TODO: support in the feature",
                                        "param": {
                                            "x_rotation": "The x rotation of the rotation correction. default is 0.0.",
                                            "y_rotation": "The y rotation of the rotation correction. default is 0.0.",
                                            "z_rotation": "The z rotation of the rotation correction. default is 0.0.",
                                            "x_translation": "The x translation of the rotation correction. default is 0.0.",
                                            "y_translation": "The y translation of the rotation correction. default is 0.0.",
                                            "zoom": "The zoom of the rotation correction. default is 1.0.",
                                            "fov": "The fov of the rotation correction. default is 60.0.",
                                            "corners": "The corners of the rotation correction. default is None."
                                        },
                                        "return": "Returns the image after the operation is completed.",
                                        "maixpy": "maix.image.Image.rotation_corr",
                                        "py_doc": "Performs a rotation correction operation on the image. TODO: support in the feature\n\nArgs:\n  - x_rotation: The x rotation of the rotation correction. default is 0.0.\n  - y_rotation: The y rotation of the rotation correction. default is 0.0.\n  - z_rotation: The z rotation of the rotation correction. default is 0.0.\n  - x_translation: The x translation of the rotation correction. default is 0.0.\n  - y_translation: The y translation of the rotation correction. default is 0.0.\n  - zoom: The zoom of the rotation correction. default is 1.0.\n  - fov: The fov of the rotation correction. default is 60.0.\n  - corners: The corners of the rotation correction. default is None.\n\n\nReturns: Returns the image after the operation is completed.\n"
                                    },
                                    "args": [
                                        [
                                            "double",
                                            "x_rotation",
                                            "0.0"
                                        ],
                                        [
                                            "double",
                                            "y_rotation",
                                            "0.0"
                                        ],
                                        [
                                            "double",
                                            "z_rotation",
                                            "0.0"
                                        ],
                                        [
                                            "double",
                                            "x_translation",
                                            "0.0"
                                        ],
                                        [
                                            "double",
                                            "y_translation",
                                            "0.0"
                                        ],
                                        [
                                            "double",
                                            "zoom",
                                            "1.0"
                                        ],
                                        [
                                            "double",
                                            "fov",
                                            "60.0"
                                        ],
                                        [
                                            "std::vector<float>",
                                            "corners",
                                            "std::vector<float>()"
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *rotation_corr(double x_rotation = 0.0, double y_rotation = 0.0, double z_rotation = 0.0, double x_translation = 0.0, double y_translation = 0.0, double zoom = 1.0, double fov = 60.0, std::vector<float> corners = std::vector<float>())"
                                },
                                "get_histogram": {
                                    "type": "func",
                                    "name": "get_histogram",
                                    "doc": {
                                        "brief": "Gets the histogram of the image.",
                                        "param": {
                                            "thresholds": "You can define multiple thresholds.\nFor GRAYSCALE format, you can use {{Lmin, Lmax}, ...} to define one or more thresholds.\nFor RGB888 format, you can use {{Lmin, Lmax, Amin, Amax, Bmin, Bmax}, ...} to define one or more thresholds.\nWhere the upper case L,A,B represent the L,A,B channels of the LAB image format, and min, max represent the minimum and maximum values of the corresponding channels.",
                                            "invert": "If true, the thresholds will be inverted before the operation. default is false.",
                                            "roi": "The region of interest, input in the format of (x, y, w, h), x and y are the coordinates of the upper left corner, w and h are the width and height of roi.\ndefault is None, means whole image.",
                                            "bins": "The number of bins to use for the histogram.\nIn GRAYSCALE format, setting range is [2, 256], default is 100.\nIn rgb888 format, setting range is [2, 100], default is 100.",
                                            "l_bins": "The number of bins to use for the l channel of the histogram. Only valid in RGB888 format.\nIf an invalid value is set, bins will be used instead. The setting range is [2, 100], default is 100.",
                                            "a_bins": "The number of bins to use for the a channel of the histogram.\nOnly valid in RGB888 format.The setting range is [2, 256],  default is 256.",
                                            "b_bins": "The number of bins to use for the b channel of the histogram.\nOnly valid in RGB888 format. The setting range is [2, 256], default is 256.",
                                            "difference": "difference may be set to an image object to cause this method to operate on the difference image between the current image and the difference image object.\ndefault is None."
                                        },
                                        "return": "Returns the histogram of the image",
                                        "maixpy": "maix.image.Image.get_histogram",
                                        "py_doc": "Gets the histogram of the image.\n\nArgs:\n  - thresholds: You can define multiple thresholds.\nFor GRAYSCALE format, you can use {{Lmin, Lmax}, ...} to define one or more thresholds.\nFor RGB888 format, you can use {{Lmin, Lmax, Amin, Amax, Bmin, Bmax}, ...} to define one or more thresholds.\nWhere the upper case L,A,B represent the L,A,B channels of the LAB image format, and min, max represent the minimum and maximum values of the corresponding channels.\n  - invert: If true, the thresholds will be inverted before the operation. default is false.\n  - roi: The region of interest, input in the format of (x, y, w, h), x and y are the coordinates of the upper left corner, w and h are the width and height of roi.\ndefault is None, means whole image.\n  - bins: The number of bins to use for the histogram.\nIn GRAYSCALE format, setting range is [2, 256], default is 100.\nIn rgb888 format, setting range is [2, 100], default is 100.\n  - l_bins: The number of bins to use for the l channel of the histogram. Only valid in RGB888 format.\nIf an invalid value is set, bins will be used instead. The setting range is [2, 100], default is 100.\n  - a_bins: The number of bins to use for the a channel of the histogram.\nOnly valid in RGB888 format.The setting range is [2, 256],  default is 256.\n  - b_bins: The number of bins to use for the b channel of the histogram.\nOnly valid in RGB888 format. The setting range is [2, 256], default is 256.\n  - difference: difference may be set to an image object to cause this method to operate on the difference image between the current image and the difference image object.\ndefault is None.\n\n\nReturns: Returns the histogram of the image\n"
                                    },
                                    "args": [
                                        [
                                            "std::vector<std::vector<int>>",
                                            "thresholds",
                                            "std::vector<std::vector<int>>()"
                                        ],
                                        [
                                            "bool",
                                            "invert",
                                            "false"
                                        ],
                                        [
                                            "std::vector<int>",
                                            "roi",
                                            "std::vector<int>()"
                                        ],
                                        [
                                            "int",
                                            "bins",
                                            "-1"
                                        ],
                                        [
                                            "int",
                                            "l_bins",
                                            "100"
                                        ],
                                        [
                                            "int",
                                            "a_bins",
                                            "256"
                                        ],
                                        [
                                            "int",
                                            "b_bins",
                                            "256"
                                        ],
                                        [
                                            "image::Image *",
                                            "difference",
                                            "nullptr"
                                        ]
                                    ],
                                    "ret_type": "std::map<std::string, std::vector<float>>",
                                    "static": false,
                                    "def": "std::map<std::string, std::vector<float>> get_histogram(std::vector<std::vector<int>> thresholds = std::vector<std::vector<int>>(), bool invert = false, std::vector<int> roi = std::vector<int>(), int bins = -1, int l_bins = 100, int a_bins = 256, int b_bins = 256, image::Image *difference = nullptr)"
                                },
                                "get_statistics": {
                                    "type": "func",
                                    "name": "get_statistics",
                                    "doc": {
                                        "brief": "Gets the statistics of the image. TODO: support in the feature",
                                        "param": {
                                            "thresholds": "You can define multiple thresholds.\nFor GRAYSCALE format, you can use {{Lmin, Lmax}, ...} to define one or more thresholds.\nFor RGB888 format, you can use {{Lmin, Lmax, Amin, Amax, Bmin, Bmax}, ...} to define one or more thresholds.\nWhere the upper case L,A,B represent the L,A,B channels of the LAB image format, and min, max represent the minimum and maximum values of the corresponding channels.",
                                            "invert": "If true, the image will be inverted before the operation. default is false.",
                                            "roi": "The region of interest, input in the format of (x, y, w, h), x and y are the coordinates of the upper left corner, w and h are the width and height of roi.\ndefault is None, means whole image.",
                                            "bins": "The number of bins to use for the statistics. default is -1.",
                                            "l_bins": "The number of bins to use for the l channel of the statistics. default is -1.",
                                            "a_bins": "The number of bins to use for the a channel of the statistics. default is -1.",
                                            "b_bins": "The number of bins to use for the b channel of the statistics. default is -1.",
                                            "difference": "The difference image to use for the statistics. default is None."
                                        },
                                        "return": "Returns the statistics of the image",
                                        "maixpy": "maix.image.Image.get_statistics",
                                        "py_doc": "Gets the statistics of the image. TODO: support in the feature\n\nArgs:\n  - thresholds: You can define multiple thresholds.\nFor GRAYSCALE format, you can use {{Lmin, Lmax}, ...} to define one or more thresholds.\nFor RGB888 format, you can use {{Lmin, Lmax, Amin, Amax, Bmin, Bmax}, ...} to define one or more thresholds.\nWhere the upper case L,A,B represent the L,A,B channels of the LAB image format, and min, max represent the minimum and maximum values of the corresponding channels.\n  - invert: If true, the image will be inverted before the operation. default is false.\n  - roi: The region of interest, input in the format of (x, y, w, h), x and y are the coordinates of the upper left corner, w and h are the width and height of roi.\ndefault is None, means whole image.\n  - bins: The number of bins to use for the statistics. default is -1.\n  - l_bins: The number of bins to use for the l channel of the statistics. default is -1.\n  - a_bins: The number of bins to use for the a channel of the statistics. default is -1.\n  - b_bins: The number of bins to use for the b channel of the statistics. default is -1.\n  - difference: The difference image to use for the statistics. default is None.\n\n\nReturns: Returns the statistics of the image\n"
                                    },
                                    "args": [
                                        [
                                            "std::vector<std::vector<int>>",
                                            "thresholds",
                                            "std::vector<std::vector<int>>()"
                                        ],
                                        [
                                            "bool",
                                            "invert",
                                            "false"
                                        ],
                                        [
                                            "std::vector<int>",
                                            "roi",
                                            "std::vector<int>()"
                                        ],
                                        [
                                            "int",
                                            "bins",
                                            "-1"
                                        ],
                                        [
                                            "int",
                                            "l_bins",
                                            "-1"
                                        ],
                                        [
                                            "int",
                                            "a_bins",
                                            "-1"
                                        ],
                                        [
                                            "int",
                                            "b_bins",
                                            "-1"
                                        ],
                                        [
                                            "image::Image *",
                                            "difference",
                                            "nullptr"
                                        ]
                                    ],
                                    "ret_type": "image::Statistics",
                                    "static": false,
                                    "def": "image::Statistics get_statistics(std::vector<std::vector<int>> thresholds = std::vector<std::vector<int>>(), bool invert = false, std::vector<int> roi = std::vector<int>(), int bins = -1, int l_bins = -1, int a_bins = -1, int b_bins = -1, image::Image *difference = nullptr)"
                                },
                                "get_regression": {
                                    "type": "func",
                                    "name": "get_regression",
                                    "doc": {
                                        "brief": "Gets the regression of the image.",
                                        "param": {
                                            "thresholds": "You can define multiple thresholds.\nFor GRAYSCALE format, you can use {{Lmin, Lmax}, ...} to define one or more thresholds.\nFor RGB888 format, you can use {{Lmin, Lmax, Amin, Amax, Bmin, Bmax}, ...} to define one or more thresholds.\nWhere the upper case L,A,B represent the L,A,B channels of the LAB image format, and min, max represent the minimum and maximum values of the corresponding channels.",
                                            "invert": "If true, the image will be inverted before the operation. default is false.",
                                            "roi": "The region of interest, input in the format of (x, y, w, h), x and y are the coordinates of the upper left corner, w and h are the width and height of roi.\ndefault is None, means whole image.",
                                            "x_stride": "The x stride to use for the regression. default is 2.",
                                            "y_stride": "The y stride to use for the regression. default is 1.",
                                            "area_threshold": "The area threshold to use for the regression. default is 10.",
                                            "pixels_threshold": "The pixels threshold to use for the regression. default is 10.",
                                            "robust": "If true, the regression will be robust. default is false."
                                        },
                                        "return": "Returns the regression of the image",
                                        "maixpy": "maix.image.Image.get_regression",
                                        "py_doc": "Gets the regression of the image.\n\nArgs:\n  - thresholds: You can define multiple thresholds.\nFor GRAYSCALE format, you can use {{Lmin, Lmax}, ...} to define one or more thresholds.\nFor RGB888 format, you can use {{Lmin, Lmax, Amin, Amax, Bmin, Bmax}, ...} to define one or more thresholds.\nWhere the upper case L,A,B represent the L,A,B channels of the LAB image format, and min, max represent the minimum and maximum values of the corresponding channels.\n  - invert: If true, the image will be inverted before the operation. default is false.\n  - roi: The region of interest, input in the format of (x, y, w, h), x and y are the coordinates of the upper left corner, w and h are the width and height of roi.\ndefault is None, means whole image.\n  - x_stride: The x stride to use for the regression. default is 2.\n  - y_stride: The y stride to use for the regression. default is 1.\n  - area_threshold: The area threshold to use for the regression. default is 10.\n  - pixels_threshold: The pixels threshold to use for the regression. default is 10.\n  - robust: If true, the regression will be robust. default is false.\n\n\nReturns: Returns the regression of the image\n"
                                    },
                                    "args": [
                                        [
                                            "std::vector<std::vector<int>>",
                                            "thresholds",
                                            "std::vector<std::vector<int>>()"
                                        ],
                                        [
                                            "bool",
                                            "invert",
                                            "false"
                                        ],
                                        [
                                            "std::vector<int>",
                                            "roi",
                                            "std::vector<int>()"
                                        ],
                                        [
                                            "int",
                                            "x_stride",
                                            "2"
                                        ],
                                        [
                                            "int",
                                            "y_stride",
                                            "1"
                                        ],
                                        [
                                            "int",
                                            "area_threshold",
                                            "10"
                                        ],
                                        [
                                            "int",
                                            "pixels_threshold",
                                            "10"
                                        ],
                                        [
                                            "bool",
                                            "robust",
                                            "false"
                                        ]
                                    ],
                                    "ret_type": "std::vector<image::Line>",
                                    "static": false,
                                    "def": "std::vector<image::Line> get_regression(std::vector<std::vector<int>> thresholds = std::vector<std::vector<int>>(), bool invert = false, std::vector<int> roi = std::vector<int>(), int x_stride = 2, int y_stride = 1, int area_threshold = 10, int pixels_threshold = 10, bool robust = false)"
                                },
                                "save": {
                                    "type": "func",
                                    "name": "save",
                                    "doc": {
                                        "brief": "Save image to file",
                                        "param": {
                                            "path": "file path",
                                            "quality": "image quality, by default(value is 95), support jpeg and png format"
                                        },
                                        "return": "error code, err::ERR_NONE is ok, other is error",
                                        "maixpy": "maix.image.Image.save",
                                        "py_doc": "Save image to file\n\nArgs:\n  - path: file path\n  - quality: image quality, by default(value is 95), support jpeg and png format\n\n\nReturns: error code, err::ERR_NONE is ok, other is error\n"
                                    },
                                    "args": [
                                        [
                                            "const char *",
                                            "path",
                                            null
                                        ],
                                        [
                                            "int",
                                            "quality",
                                            "95"
                                        ]
                                    ],
                                    "ret_type": "err::Err",
                                    "static": false,
                                    "def": "err::Err save(const char *path, int quality = 95)"
                                },
                                "flood_fill": {
                                    "type": "func",
                                    "name": "flood_fill",
                                    "doc": {
                                        "brief": "Flood fills a region of the image starting from location x, y.",
                                        "param": {
                                            "x": "The x coordinate of the seed point.",
                                            "y": "The y coordinate of the seed point.",
                                            "seed_threshold": "The seed_threshold value controls how different any pixel in the fill area may be from the original starting pixel. default is 0.05.",
                                            "floating_threshold": "The floating_threshold value controls how different any pixel in the fill area may be from any neighbor pixels. default is 0.05.",
                                            "color": "The color to fill the region with. default is white.",
                                            "invert": "If true, the image will be inverted before the operation. default is false.",
                                            "clear_background": "If true, the background will be cleared before the operation. default is false.",
                                            "mask": "Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None. FIXME: the mask image works abnormally"
                                        },
                                        "return": "Returns the image after the operation is completed.",
                                        "maixpy": "maix.image.Image.flood_fill",
                                        "py_doc": "Flood fills a region of the image starting from location x, y.\n\nArgs:\n  - x: The x coordinate of the seed point.\n  - y: The y coordinate of the seed point.\n  - seed_threshold: The seed_threshold value controls how different any pixel in the fill area may be from the original starting pixel. default is 0.05.\n  - floating_threshold: The floating_threshold value controls how different any pixel in the fill area may be from any neighbor pixels. default is 0.05.\n  - color: The color to fill the region with. default is white.\n  - invert: If true, the image will be inverted before the operation. default is false.\n  - clear_background: If true, the background will be cleared before the operation. default is false.\n  - mask: Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None. FIXME: the mask image works abnormally\n\n\nReturns: Returns the image after the operation is completed.\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "x",
                                            null
                                        ],
                                        [
                                            "int",
                                            "y",
                                            null
                                        ],
                                        [
                                            "float",
                                            "seed_threshold",
                                            "0.05"
                                        ],
                                        [
                                            "float",
                                            "floating_threshold",
                                            "0.05"
                                        ],
                                        [
                                            "image::Color",
                                            "color",
                                            "image::COLOR_WHITE"
                                        ],
                                        [
                                            "bool",
                                            "invert",
                                            "false"
                                        ],
                                        [
                                            "bool",
                                            "clear_background",
                                            "false"
                                        ],
                                        [
                                            "image::Image *",
                                            "mask",
                                            "nullptr"
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *flood_fill(int x, int y, float seed_threshold = 0.05, float floating_threshold = 0.05, image::Color color = image::COLOR_WHITE, bool invert = false, bool clear_background = false, image::Image *mask = nullptr)"
                                },
                                "erode": {
                                    "type": "func",
                                    "name": "erode",
                                    "doc": {
                                        "brief": "Erodes the image in place.",
                                        "param": {
                                            "size": "Kernel size. The actual kernel size is ((size * 2) + 1) * ((size * 2) + 1). Use 1(3x3 kernel), 2(5x5 kernel).",
                                            "threshold": "The number of pixels in the kernel that are not 0. If it is less than or equal to the threshold, set the center pixel to black. default is (kernel_size - 1).",
                                            "mask": "Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None."
                                        },
                                        "return": "Returns the image after the operation is completed.",
                                        "maixpy": "maix.image.Image.erode",
                                        "py_doc": "Erodes the image in place.\n\nArgs:\n  - size: Kernel size. The actual kernel size is ((size * 2) + 1) * ((size * 2) + 1). Use 1(3x3 kernel), 2(5x5 kernel).\n  - threshold: The number of pixels in the kernel that are not 0. If it is less than or equal to the threshold, set the center pixel to black. default is (kernel_size - 1).\n  - mask: Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None.\n\n\nReturns: Returns the image after the operation is completed.\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "size",
                                            null
                                        ],
                                        [
                                            "int",
                                            "threshold",
                                            "-1"
                                        ],
                                        [
                                            "image::Image *",
                                            "mask",
                                            "nullptr"
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *erode(int size, int threshold = -1, image::Image *mask = nullptr)"
                                },
                                "dilate": {
                                    "type": "func",
                                    "name": "dilate",
                                    "doc": {
                                        "brief": "Dilates the image in place.",
                                        "param": {
                                            "size": "Kernel size. The actual kernel size is ((size * 2) + 1) * ((size * 2) + 1). Use 1(3x3 kernel), 2(5x5 kernel).",
                                            "threshold": "The number of pixels in the kernel that are not 0. If it is greater than or equal to the threshold, set the center pixel to white. default is 0.",
                                            "mask": "Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None."
                                        },
                                        "return": "Returns the image after the operation is completed.",
                                        "maixpy": "maix.image.Image.dilate",
                                        "py_doc": "Dilates the image in place.\n\nArgs:\n  - size: Kernel size. The actual kernel size is ((size * 2) + 1) * ((size * 2) + 1). Use 1(3x3 kernel), 2(5x5 kernel).\n  - threshold: The number of pixels in the kernel that are not 0. If it is greater than or equal to the threshold, set the center pixel to white. default is 0.\n  - mask: Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None.\n\n\nReturns: Returns the image after the operation is completed.\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "size",
                                            null
                                        ],
                                        [
                                            "int",
                                            "threshold",
                                            "0"
                                        ],
                                        [
                                            "image::Image *",
                                            "mask",
                                            "nullptr"
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *dilate(int size, int threshold = 0, image::Image *mask = nullptr)"
                                },
                                "open": {
                                    "type": "func",
                                    "name": "open",
                                    "doc": {
                                        "brief": "Performs erosion and dilation on an image in order.",
                                        "param": {
                                            "size": "Kernel size. The actual kernel size is ((size * 2) + 1) * ((size * 2) + 1). Use 1(3x3 kernel), 2(5x5 kernel).",
                                            "threshold": "As the threshold for erosion and dilation, the actual threshold for erosion is (kernel_size - 1 - threshold), the actual threshold for dialation is threshold. default is 0.",
                                            "mask": "Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None."
                                        },
                                        "return": "Returns the image after the operation is completed.",
                                        "maixpy": "maix.image.Image.open",
                                        "py_doc": "Performs erosion and dilation on an image in order.\n\nArgs:\n  - size: Kernel size. The actual kernel size is ((size * 2) + 1) * ((size * 2) + 1). Use 1(3x3 kernel), 2(5x5 kernel).\n  - threshold: As the threshold for erosion and dilation, the actual threshold for erosion is (kernel_size - 1 - threshold), the actual threshold for dialation is threshold. default is 0.\n  - mask: Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None.\n\n\nReturns: Returns the image after the operation is completed.\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "size",
                                            null
                                        ],
                                        [
                                            "int",
                                            "threshold",
                                            "0"
                                        ],
                                        [
                                            "image::Image *",
                                            "mask",
                                            "nullptr"
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *open(int size, int threshold = 0, image::Image *mask = nullptr)"
                                },
                                "close": {
                                    "type": "func",
                                    "name": "close",
                                    "doc": {
                                        "brief": "Performs dilation and erosion on an image in order.",
                                        "param": {
                                            "size": "Kernel size. The actual kernel size is ((size * 2) + 1) * ((size * 2) + 1). Use 1(3x3 kernel), 2(5x5 kernel).",
                                            "threshold": "As the threshold for erosion and dilation, the actual threshold for erosion is (kernel_size - 1 - threshold), the actual threshold for dialation is threshold. default is 0.",
                                            "mask": "Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None."
                                        },
                                        "return": "Returns the image after the operation is completed.",
                                        "maixpy": "maix.image.Image.close",
                                        "py_doc": "Performs dilation and erosion on an image in order.\n\nArgs:\n  - size: Kernel size. The actual kernel size is ((size * 2) + 1) * ((size * 2) + 1). Use 1(3x3 kernel), 2(5x5 kernel).\n  - threshold: As the threshold for erosion and dilation, the actual threshold for erosion is (kernel_size - 1 - threshold), the actual threshold for dialation is threshold. default is 0.\n  - mask: Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None.\n\n\nReturns: Returns the image after the operation is completed.\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "size",
                                            null
                                        ],
                                        [
                                            "int",
                                            "threshold",
                                            "0"
                                        ],
                                        [
                                            "image::Image *",
                                            "mask",
                                            "nullptr"
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *close(int size, int threshold = 0, image::Image *mask = nullptr)"
                                },
                                "top_hat": {
                                    "type": "func",
                                    "name": "top_hat",
                                    "doc": {
                                        "brief": "Returns the image difference of the image and Image.open()\u2019ed image.",
                                        "param": {
                                            "size": "Kernel size. The actual kernel size is ((size * 2) + 1) * ((size * 2) + 1). Use 1(3x3 kernel), 2(5x5 kernel).",
                                            "threshold": "As the threshold for open method. default is 0.",
                                            "mask": "Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None."
                                        },
                                        "return": "Returns the image after the operation is completed.",
                                        "maixpy": "maix.image.Image.top_hat",
                                        "py_doc": "Returns the image difference of the image and Image.open()\u2019ed image.\n\nArgs:\n  - size: Kernel size. The actual kernel size is ((size * 2) + 1) * ((size * 2) + 1). Use 1(3x3 kernel), 2(5x5 kernel).\n  - threshold: As the threshold for open method. default is 0.\n  - mask: Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None.\n\n\nReturns: Returns the image after the operation is completed.\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "size",
                                            null
                                        ],
                                        [
                                            "int",
                                            "threshold",
                                            "0"
                                        ],
                                        [
                                            "image::Image *",
                                            "mask",
                                            "nullptr"
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *top_hat(int size, int threshold = 0, image::Image *mask = nullptr)"
                                },
                                "black_hat": {
                                    "type": "func",
                                    "name": "black_hat",
                                    "doc": {
                                        "brief": "Returns the image difference of the image and Image.close()\u2019ed image.",
                                        "param": {
                                            "size": "Kernel size. The actual kernel size is ((size * 2) + 1) * ((size * 2) + 1). Use 1(3x3 kernel), 2(5x5 kernel).",
                                            "threshold": "As the threshold for close method. default is 0.",
                                            "mask": "Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None."
                                        },
                                        "return": "Returns the image after the operation is completed.",
                                        "maixpy": "maix.image.Image.black_hat",
                                        "py_doc": "Returns the image difference of the image and Image.close()\u2019ed image.\n\nArgs:\n  - size: Kernel size. The actual kernel size is ((size * 2) + 1) * ((size * 2) + 1). Use 1(3x3 kernel), 2(5x5 kernel).\n  - threshold: As the threshold for close method. default is 0.\n  - mask: Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None.\n\n\nReturns: Returns the image after the operation is completed.\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "size",
                                            null
                                        ],
                                        [
                                            "int",
                                            "threshold",
                                            "0"
                                        ],
                                        [
                                            "image::Image *",
                                            "mask",
                                            "nullptr"
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *black_hat(int size, int threshold = 0, image::Image *mask = nullptr)"
                                },
                                "find_blobs": {
                                    "type": "func",
                                    "name": "find_blobs",
                                    "doc": {
                                        "brief": "Finds all blobs in the image and returns a list of image.Blob class which describe each Blob.\\nPlease see the image.Blob object more more information.",
                                        "param": {
                                            "thresholds": "You can define multiple thresholds.\nFor GRAYSCALE format, you can use {{Lmin, Lmax}, ...} to define one or more thresholds.\nFor RGB888 format, you can use {{Lmin, Lmax, Amin, Amax, Bmin, Bmax}, ...} to define one or more thresholds.\nWhere the upper case L,A,B represent the L,A,B channels of the LAB image format, and min, max represent the minimum and maximum values of the corresponding channels.",
                                            "invert": "if true, will invert thresholds before find blobs, default is false",
                                            "roi": "The region of interest, input in the format of (x, y, w, h), x and y are the coordinates of the upper left corner, w and h are the width and height of roi.\ndefault is None, means whole image.",
                                            "x_stride": "x stride is the number of x pixels to skip when doing the hough transform. default is 2",
                                            "y_stride": "y_stride is the number of y pixels to skip when doing the hough transform. default is 1",
                                            "area_threshold": "area threshold, if the blob area is smaller than area_threshold, the blob is not returned, default is 10",
                                            "pixels_threshold": "pixels threshold, if the blob pixels is smaller than area_threshold, the blob is not returned,, default is 10.\nwhen x_stride and y_stride is equal to 1, pixels_threshold is equivalent to area_threshold",
                                            "merge": "if True merges all not filtered out blobs whos bounding rectangles intersect each other. default is false",
                                            "margin": "margin can be used to increase or decrease the size of the bounding rectangles for blobs during the intersection test.\nFor example, with a margin of 1 blobs whos bounding rectangles are 1 pixel away from each other will be merged. default is 0",
                                            "x_hist_bins_max": "if set to non-zero populates a histogram buffer in each blob object with an x_histogram projection of all columns in the object. This value then sets the number of bins for that projection.",
                                            "y_hist_bins_max": "if set to non-zero populates a histogram buffer in each blob object with an y_histogram projection of all rows in the object. This value then sets the number of bins for that projection."
                                        },
                                        "return": "Return the blob when found blobs, format is (blob1, blob2, ...), you can use blob class methods to do more operations.",
                                        "maixpy": "maix.image.Image.find_blobs",
                                        "py_doc": "Finds all blobs in the image and returns a list of image.Blob class which describe each Blob.\nPlease see the image.Blob object more more information.\n\nArgs:\n  - thresholds: You can define multiple thresholds.\nFor GRAYSCALE format, you can use {{Lmin, Lmax}, ...} to define one or more thresholds.\nFor RGB888 format, you can use {{Lmin, Lmax, Amin, Amax, Bmin, Bmax}, ...} to define one or more thresholds.\nWhere the upper case L,A,B represent the L,A,B channels of the LAB image format, and min, max represent the minimum and maximum values of the corresponding channels.\n  - invert: if true, will invert thresholds before find blobs, default is false\n  - roi: The region of interest, input in the format of (x, y, w, h), x and y are the coordinates of the upper left corner, w and h are the width and height of roi.\ndefault is None, means whole image.\n  - x_stride: x stride is the number of x pixels to skip when doing the hough transform. default is 2\n  - y_stride: y_stride is the number of y pixels to skip when doing the hough transform. default is 1\n  - area_threshold: area threshold, if the blob area is smaller than area_threshold, the blob is not returned, default is 10\n  - pixels_threshold: pixels threshold, if the blob pixels is smaller than area_threshold, the blob is not returned,, default is 10.\nwhen x_stride and y_stride is equal to 1, pixels_threshold is equivalent to area_threshold\n  - merge: if True merges all not filtered out blobs whos bounding rectangles intersect each other. default is false\n  - margin: margin can be used to increase or decrease the size of the bounding rectangles for blobs during the intersection test.\nFor example, with a margin of 1 blobs whos bounding rectangles are 1 pixel away from each other will be merged. default is 0\n  - x_hist_bins_max: if set to non-zero populates a histogram buffer in each blob object with an x_histogram projection of all columns in the object. This value then sets the number of bins for that projection.\n  - y_hist_bins_max: if set to non-zero populates a histogram buffer in each blob object with an y_histogram projection of all rows in the object. This value then sets the number of bins for that projection.\n\n\nReturns: Return the blob when found blobs, format is (blob1, blob2, ...), you can use blob class methods to do more operations.\n"
                                    },
                                    "args": [
                                        [
                                            "std::vector<std::vector<int>>",
                                            "thresholds",
                                            "std::vector<std::vector<int>>()"
                                        ],
                                        [
                                            "bool",
                                            "invert",
                                            "false"
                                        ],
                                        [
                                            "std::vector<int>",
                                            "roi",
                                            "std::vector<int>()"
                                        ],
                                        [
                                            "int",
                                            "x_stride",
                                            "2"
                                        ],
                                        [
                                            "int",
                                            "y_stride",
                                            "1"
                                        ],
                                        [
                                            "int",
                                            "area_threshold",
                                            "10"
                                        ],
                                        [
                                            "int",
                                            "pixels_threshold",
                                            "10"
                                        ],
                                        [
                                            "bool",
                                            "merge",
                                            "false"
                                        ],
                                        [
                                            "int",
                                            "margin",
                                            "0"
                                        ],
                                        [
                                            "int",
                                            "x_hist_bins_max",
                                            "0"
                                        ],
                                        [
                                            "int",
                                            "y_hist_bins_max",
                                            "0"
                                        ]
                                    ],
                                    "ret_type": "std::vector<image::Blob>",
                                    "static": false,
                                    "def": "std::vector<image::Blob> find_blobs(std::vector<std::vector<int>> thresholds = std::vector<std::vector<int>>(), bool invert = false, std::vector<int> roi = std::vector<int>(), int x_stride = 2, int y_stride = 1, int area_threshold = 10, int pixels_threshold = 10, bool merge = false, int margin = 0, int x_hist_bins_max = 0, int y_hist_bins_max = 0)"
                                },
                                "find_lines": {
                                    "type": "func",
                                    "name": "find_lines",
                                    "doc": {
                                        "brief": "Find lines in image",
                                        "param": {
                                            "roi": "The region of interest, input in the format of (x, y, w, h), x and y are the coordinates of the upper left corner, w and h are the width and height of roi.\ndefault is None, means whole image.",
                                            "x_stride": "x stride is the number of x pixels to skip when doing the hough transform. default is 2",
                                            "y_stride": "y_stride is the number of y pixels to skip when doing the hough transform. default is 1",
                                            "threshold": "threshold threshold controls what lines are detected from the hough transform. Only lines with a magnitude greater than or equal to threshold are returned.\nThe right value of threshold for your application is image dependent. default is 1000.",
                                            "theta_margin": "theta_margin controls the merging of detected lines. default is 25.",
                                            "rho_margin": "rho_margin controls the merging of detected lines. default is 25."
                                        },
                                        "return": "Return the line when found lines, format is (line1, line2, ...), you can use line class methods to do more operations",
                                        "maixpy": "maix.image.Image.find_lines",
                                        "py_doc": "Find lines in image\n\nArgs:\n  - roi: The region of interest, input in the format of (x, y, w, h), x and y are the coordinates of the upper left corner, w and h are the width and height of roi.\ndefault is None, means whole image.\n  - x_stride: x stride is the number of x pixels to skip when doing the hough transform. default is 2\n  - y_stride: y_stride is the number of y pixels to skip when doing the hough transform. default is 1\n  - threshold: threshold threshold controls what lines are detected from the hough transform. Only lines with a magnitude greater than or equal to threshold are returned.\nThe right value of threshold for your application is image dependent. default is 1000.\n  - theta_margin: theta_margin controls the merging of detected lines. default is 25.\n  - rho_margin: rho_margin controls the merging of detected lines. default is 25.\n\n\nReturns: Return the line when found lines, format is (line1, line2, ...), you can use line class methods to do more operations\n"
                                    },
                                    "args": [
                                        [
                                            "std::vector<int>",
                                            "roi",
                                            "std::vector<int>()"
                                        ],
                                        [
                                            "int",
                                            "x_stride",
                                            "2"
                                        ],
                                        [
                                            "int",
                                            "y_stride",
                                            "1"
                                        ],
                                        [
                                            "double",
                                            "threshold",
                                            "1000"
                                        ],
                                        [
                                            "double",
                                            "theta_margin",
                                            "25"
                                        ],
                                        [
                                            "double",
                                            "rho_margin",
                                            "25"
                                        ]
                                    ],
                                    "ret_type": "std::vector<image::Line>",
                                    "static": false,
                                    "def": "std::vector<image::Line> find_lines(std::vector<int> roi = std::vector<int>(), int x_stride = 2, int y_stride = 1, double threshold = 1000, double theta_margin = 25, double rho_margin = 25)"
                                },
                                "find_line_segments": {
                                    "type": "func",
                                    "name": "find_line_segments",
                                    "doc": {
                                        "brief": "Finds all line segments in the image.",
                                        "param": {
                                            "roi": "The region of interest, input in the format of (x, y, w, h), x and y are the coordinates of the upper left corner, w and h are the width and height of roi.\ndefault is None, means whole image.",
                                            "merge_distance": "The maximum distance between two lines to merge them. default is 0.",
                                            "max_theta_difference": "The maximum difference between two lines to merge them. default is 15."
                                        },
                                        "return": "Return the line when found lines, format is (line1, line2, ...), you can use line class methods to do more operations",
                                        "maixpy": "maix.image.Image.find_line_segments",
                                        "py_doc": "Finds all line segments in the image.\n\nArgs:\n  - roi: The region of interest, input in the format of (x, y, w, h), x and y are the coordinates of the upper left corner, w and h are the width and height of roi.\ndefault is None, means whole image.\n  - merge_distance: The maximum distance between two lines to merge them. default is 0.\n  - max_theta_difference: The maximum difference between two lines to merge them. default is 15.\n\n\nReturns: Return the line when found lines, format is (line1, line2, ...), you can use line class methods to do more operations\n"
                                    },
                                    "args": [
                                        [
                                            "std::vector<int>",
                                            "roi",
                                            "std::vector<int>()"
                                        ],
                                        [
                                            "int",
                                            "merge_distance",
                                            "0"
                                        ],
                                        [
                                            "int",
                                            "max_theta_difference",
                                            "15"
                                        ]
                                    ],
                                    "ret_type": "std::vector<image::Line>",
                                    "static": false,
                                    "def": "std::vector<image::Line> find_line_segments(std::vector<int> roi = std::vector<int>(), int merge_distance = 0, int max_theta_difference = 15)"
                                },
                                "find_circles": {
                                    "type": "func",
                                    "name": "find_circles",
                                    "doc": {
                                        "brief": "Find circles in image",
                                        "param": {
                                            "roi": "The region of interest, input in the format of (x, y, w, h), x and y are the coordinates of the upper left corner, w and h are the width and height of roi.\ndefault is None, means whole image.",
                                            "x_stride": "x stride is the number of x pixels to skip when doing the hough transform. default is 2",
                                            "y_stride": "y_stride is the number of y pixels to skip when doing the hough transform. default is 1",
                                            "threshold": "threshold controls what circles are detected from the hough transform. Only circles with a magnitude greater than or equal to threshold are returned.\nThe right value of threshold for your application is image dependent.",
                                            "x_margin": "x_margin controls the merging of detected circles. Circles which are x_margin, y_margin, and r_margin pixels apart are merged. default is 10",
                                            "y_margin": "y_margin controls the merging of detected circles. Circles which are x_margin, y_margin, and r_margin pixels apart are merged. default is 10",
                                            "r_margin": "r_margin controls the merging of detected circles. Circles which are x_margin, y_margin, and r_margin pixels apart are merged. default is 10",
                                            "r_min": "r_min controls the minimum circle radius detected. Increase this to speed up the algorithm. default is 2",
                                            "r_max": "r_max controls the maximum circle radius detected. Decrease this to speed up the algorithm. default is min(roi.w / 2, roi.h / 2)",
                                            "r_step": "r_step controls how to step the radius detection by. default is 2."
                                        },
                                        "return": "Return the circle when found circles, format is (circle1, circle2, ...), you can use circle class methods to do more operations",
                                        "maixpy": "maix.image.Image.find_circles",
                                        "py_doc": "Find circles in image\n\nArgs:\n  - roi: The region of interest, input in the format of (x, y, w, h), x and y are the coordinates of the upper left corner, w and h are the width and height of roi.\ndefault is None, means whole image.\n  - x_stride: x stride is the number of x pixels to skip when doing the hough transform. default is 2\n  - y_stride: y_stride is the number of y pixels to skip when doing the hough transform. default is 1\n  - threshold: threshold controls what circles are detected from the hough transform. Only circles with a magnitude greater than or equal to threshold are returned.\nThe right value of threshold for your application is image dependent.\n  - x_margin: x_margin controls the merging of detected circles. Circles which are x_margin, y_margin, and r_margin pixels apart are merged. default is 10\n  - y_margin: y_margin controls the merging of detected circles. Circles which are x_margin, y_margin, and r_margin pixels apart are merged. default is 10\n  - r_margin: r_margin controls the merging of detected circles. Circles which are x_margin, y_margin, and r_margin pixels apart are merged. default is 10\n  - r_min: r_min controls the minimum circle radius detected. Increase this to speed up the algorithm. default is 2\n  - r_max: r_max controls the maximum circle radius detected. Decrease this to speed up the algorithm. default is min(roi.w / 2, roi.h / 2)\n  - r_step: r_step controls how to step the radius detection by. default is 2.\n\n\nReturns: Return the circle when found circles, format is (circle1, circle2, ...), you can use circle class methods to do more operations\n"
                                    },
                                    "args": [
                                        [
                                            "std::vector<int>",
                                            "roi",
                                            "std::vector<int>()"
                                        ],
                                        [
                                            "int",
                                            "x_stride",
                                            "2"
                                        ],
                                        [
                                            "int",
                                            "y_stride",
                                            "1"
                                        ],
                                        [
                                            "int",
                                            "threshold",
                                            "2000"
                                        ],
                                        [
                                            "int",
                                            "x_margin",
                                            "10"
                                        ],
                                        [
                                            "int",
                                            "y_margin",
                                            "10"
                                        ],
                                        [
                                            "int",
                                            "r_margin",
                                            "10"
                                        ],
                                        [
                                            "int",
                                            "r_min",
                                            "2"
                                        ],
                                        [
                                            "int",
                                            "r_max",
                                            "-1"
                                        ],
                                        [
                                            "int",
                                            "r_step",
                                            "2"
                                        ]
                                    ],
                                    "ret_type": "std::vector<image::Circle>",
                                    "static": false,
                                    "def": "std::vector<image::Circle> find_circles(std::vector<int> roi = std::vector<int>(), int x_stride = 2, int y_stride = 1, int threshold = 2000, int x_margin = 10, int y_margin = 10, int r_margin = 10, int r_min = 2, int r_max = -1, int r_step = 2)"
                                },
                                "find_rects": {
                                    "type": "func",
                                    "name": "find_rects",
                                    "doc": {
                                        "brief": "Finds all rects in the image.",
                                        "param": {
                                            "roi": "The region of interest, input in the format of (x, y, w, h), x and y are the coordinates of the upper left corner, w and h are the width and height of roi.\ndefault is None, means whole image.",
                                            "threshold": "The threshold to use for the rects. default is 10000."
                                        },
                                        "return": "Returns the rects of the image",
                                        "maixpy": "maix.image.Image.find_rects",
                                        "py_doc": "Finds all rects in the image.\n\nArgs:\n  - roi: The region of interest, input in the format of (x, y, w, h), x and y are the coordinates of the upper left corner, w and h are the width and height of roi.\ndefault is None, means whole image.\n  - threshold: The threshold to use for the rects. default is 10000.\n\n\nReturns: Returns the rects of the image\n"
                                    },
                                    "args": [
                                        [
                                            "std::vector<int>",
                                            "roi",
                                            "std::vector<int>()"
                                        ],
                                        [
                                            "int",
                                            "threshold",
                                            "10000"
                                        ]
                                    ],
                                    "ret_type": "std::vector<image::Rect>",
                                    "static": false,
                                    "def": "std::vector<image::Rect> find_rects(std::vector<int> roi = std::vector<int>(), int threshold = 10000)"
                                },
                                "find_qrcodes": {
                                    "type": "func",
                                    "name": "find_qrcodes",
                                    "doc": {
                                        "brief": "Finds all qrcodes in the image.",
                                        "param": {
                                            "roi": "The region of interest, input in the format of (x, y, w, h), x and y are the coordinates of the upper left corner, w and h are the width and height of roi.\ndefault is None, means whole image."
                                        },
                                        "return": "Returns the qrcodes of the image",
                                        "maixpy": "maix.image.Image.find_qrcodes",
                                        "py_doc": "Finds all qrcodes in the image.\n\nArgs:\n  - roi: The region of interest, input in the format of (x, y, w, h), x and y are the coordinates of the upper left corner, w and h are the width and height of roi.\ndefault is None, means whole image.\n\n\nReturns: Returns the qrcodes of the image\n"
                                    },
                                    "args": [
                                        [
                                            "std::vector<int>",
                                            "roi",
                                            "std::vector<int>()"
                                        ]
                                    ],
                                    "ret_type": "std::vector<image::QRCode>",
                                    "static": false,
                                    "def": "std::vector<image::QRCode> find_qrcodes(std::vector<int> roi = std::vector<int>())"
                                },
                                "find_apriltags": {
                                    "type": "func",
                                    "name": "find_apriltags",
                                    "doc": {
                                        "brief": "Finds all apriltags in the image.",
                                        "param": {
                                            "roi": "The region of interest, input in the format of (x, y, w, h), x and y are the coordinates of the upper left corner, w and h are the width and height of roi.\ndefault is None, means whole image.",
                                            "families": "The families to use for the apriltags. default is TAG36H11.",
                                            "fx": "The camera X focal length in pixels, default is -1.",
                                            "fy": "The camera Y focal length in pixels, default is -1.",
                                            "cx": "The camera X center in pixels, default is image.width / 2.",
                                            "cy": "The camera Y center in pixels, default is image.height / 2."
                                        },
                                        "return": "Returns the apriltags of the image",
                                        "maixpy": "maix.image.Image.find_apriltags",
                                        "py_doc": "Finds all apriltags in the image.\n\nArgs:\n  - roi: The region of interest, input in the format of (x, y, w, h), x and y are the coordinates of the upper left corner, w and h are the width and height of roi.\ndefault is None, means whole image.\n  - families: The families to use for the apriltags. default is TAG36H11.\n  - fx: The camera X focal length in pixels, default is -1.\n  - fy: The camera Y focal length in pixels, default is -1.\n  - cx: The camera X center in pixels, default is image.width / 2.\n  - cy: The camera Y center in pixels, default is image.height / 2.\n\n\nReturns: Returns the apriltags of the image\n"
                                    },
                                    "args": [
                                        [
                                            "std::vector<int>",
                                            "roi",
                                            "std::vector<int>()"
                                        ],
                                        [
                                            "image::ApriltagFamilies",
                                            "families",
                                            "image::ApriltagFamilies::TAG36H11"
                                        ],
                                        [
                                            "float",
                                            "fx",
                                            "-1"
                                        ],
                                        [
                                            "float",
                                            "fy",
                                            "-1"
                                        ],
                                        [
                                            "int",
                                            "cx",
                                            "-1"
                                        ],
                                        [
                                            "int",
                                            "cy",
                                            "-1"
                                        ]
                                    ],
                                    "ret_type": "std::vector<image::AprilTag>",
                                    "static": false,
                                    "def": "std::vector<image::AprilTag> find_apriltags(std::vector<int> roi = std::vector<int>(), image::ApriltagFamilies families = image::ApriltagFamilies::TAG36H11, float fx = -1, float fy = -1, int cx = -1, int cy = -1)"
                                },
                                "find_datamatrices": {
                                    "type": "func",
                                    "name": "find_datamatrices",
                                    "doc": {
                                        "brief": "Finds all datamatrices in the image.",
                                        "param": {
                                            "roi": "The region of interest, input in the format of (x, y, w, h), x and y are the coordinates of the upper left corner, w and h are the width and height of roi.\ndefault is None, means whole image.",
                                            "effort": "Controls how much time to spend trying to find data matrix matches. default is 200."
                                        },
                                        "return": "Returns the datamatrices of the image",
                                        "maixpy": "maix.image.Image.find_datamatrices",
                                        "py_doc": "Finds all datamatrices in the image.\n\nArgs:\n  - roi: The region of interest, input in the format of (x, y, w, h), x and y are the coordinates of the upper left corner, w and h are the width and height of roi.\ndefault is None, means whole image.\n  - effort: Controls how much time to spend trying to find data matrix matches. default is 200.\n\n\nReturns: Returns the datamatrices of the image\n"
                                    },
                                    "args": [
                                        [
                                            "std::vector<int>",
                                            "roi",
                                            "std::vector<int>()"
                                        ],
                                        [
                                            "int",
                                            "effort",
                                            "200"
                                        ]
                                    ],
                                    "ret_type": "std::vector<image::DataMatrix>",
                                    "static": false,
                                    "def": "std::vector<image::DataMatrix> find_datamatrices(std::vector<int> roi = std::vector<int>(), int effort = 200)"
                                },
                                "find_barcodes": {
                                    "type": "func",
                                    "name": "find_barcodes",
                                    "doc": {
                                        "brief": "Finds all barcodes in the image.",
                                        "param": {
                                            "roi": "The region of interest, input in the format of (x, y, w, h), x and y are the coordinates of the upper left corner, w and h are the width and height of roi.\ndefault is None, means whole image."
                                        },
                                        "return": "Returns the barcodes of the image",
                                        "maixpy": "maix.image.Image.find_barcodes",
                                        "py_doc": "Finds all barcodes in the image.\n\nArgs:\n  - roi: The region of interest, input in the format of (x, y, w, h), x and y are the coordinates of the upper left corner, w and h are the width and height of roi.\ndefault is None, means whole image.\n\n\nReturns: Returns the barcodes of the image\n"
                                    },
                                    "args": [
                                        [
                                            "std::vector<int>",
                                            "roi",
                                            "std::vector<int>()"
                                        ]
                                    ],
                                    "ret_type": "std::vector<image::BarCode>",
                                    "static": false,
                                    "def": "std::vector<image::BarCode> find_barcodes(std::vector<int> roi = std::vector<int>())"
                                },
                                "find_displacement": {
                                    "type": "func",
                                    "name": "find_displacement",
                                    "doc": {
                                        "brief": "Finds the displacement between the image and the template.    TODO: support in the feature\\nnote: this method must be used on power-of-2 image sizes",
                                        "param": {
                                            "template_image": "The template image.",
                                            "roi": "The region of interest, input in the format of (x, y, w, h), x and y are the coordinates of the upper left corner, w and h are the width and height of roi.\ndefault is None, means whole image.",
                                            "template_roi": "The region-of-interest rectangle (x, y, w, h) to work in. If not specified, it is equal to the image rectangle.",
                                            "logpolar": "If true, it will instead find rotation and scale changes between the two images. default is false."
                                        },
                                        "return": "Returns the displacement of the image",
                                        "maixpy": "maix.image.Image.find_displacement",
                                        "py_doc": "Finds the displacement between the image and the template.    TODO: support in the feature\nnote: this method must be used on power-of-2 image sizes\n\nArgs:\n  - template_image: The template image.\n  - roi: The region of interest, input in the format of (x, y, w, h), x and y are the coordinates of the upper left corner, w and h are the width and height of roi.\ndefault is None, means whole image.\n  - template_roi: The region-of-interest rectangle (x, y, w, h) to work in. If not specified, it is equal to the image rectangle.\n  - logpolar: If true, it will instead find rotation and scale changes between the two images. default is false.\n\n\nReturns: Returns the displacement of the image\n"
                                    },
                                    "args": [
                                        [
                                            "image::Image &",
                                            "template_image",
                                            null
                                        ],
                                        [
                                            "std::vector<int>",
                                            "roi",
                                            "std::vector<int>()"
                                        ],
                                        [
                                            "std::vector<int>",
                                            "template_roi",
                                            "std::vector<int>()"
                                        ],
                                        [
                                            "bool",
                                            "logpolar",
                                            "false"
                                        ]
                                    ],
                                    "ret_type": "image::Displacement",
                                    "static": false,
                                    "def": "image::Displacement find_displacement(image::Image &template_image, std::vector<int> roi = std::vector<int>(), std::vector<int> template_roi = std::vector<int>(), bool logpolar = false)"
                                },
                                "find_template": {
                                    "type": "func",
                                    "name": "find_template",
                                    "doc": {
                                        "brief": "Finds the template in the image.",
                                        "param": {
                                            "template_image": "The template image.",
                                            "threshold": "Threshold is floating point number (0.0-1.0) where a higher threshold prevents false positives while lowering the detection rate while a lower threshold does the opposite.",
                                            "roi": "The region of interest, input in the format of (x, y, w, h), x and y are the coordinates of the upper left corner, w and h are the width and height of roi.\ndefault is None, means whole image. Only valid in SEARCH_EX mode.",
                                            "step": "The step size to use for the template. default is 2. Only valid in SEARCH_EX mode",
                                            "search": "The search method to use for the template. default is SEARCH_EX."
                                        },
                                        "return": "Returns a bounding box tuple (x, y, w, h) for the matching location otherwise None.",
                                        "maixpy": "maix.image.Image.find_template",
                                        "py_doc": "Finds the template in the image.\n\nArgs:\n  - template_image: The template image.\n  - threshold: Threshold is floating point number (0.0-1.0) where a higher threshold prevents false positives while lowering the detection rate while a lower threshold does the opposite.\n  - roi: The region of interest, input in the format of (x, y, w, h), x and y are the coordinates of the upper left corner, w and h are the width and height of roi.\ndefault is None, means whole image. Only valid in SEARCH_EX mode.\n  - step: The step size to use for the template. default is 2. Only valid in SEARCH_EX mode\n  - search: The search method to use for the template. default is SEARCH_EX.\n\n\nReturns: Returns a bounding box tuple (x, y, w, h) for the matching location otherwise None.\n"
                                    },
                                    "args": [
                                        [
                                            "image::Image &",
                                            "template_image",
                                            null
                                        ],
                                        [
                                            "float",
                                            "threshold",
                                            null
                                        ],
                                        [
                                            "std::vector<int>",
                                            "roi",
                                            "std::vector<int>()"
                                        ],
                                        [
                                            "int",
                                            "step",
                                            "2"
                                        ],
                                        [
                                            "image::TemplateMatch",
                                            "search",
                                            "image::TemplateMatch::SEARCH_EX"
                                        ]
                                    ],
                                    "ret_type": "std::vector<int>",
                                    "static": false,
                                    "def": "std::vector<int> find_template(image::Image &template_image, float threshold, std::vector<int> roi = std::vector<int>(), int step = 2, image::TemplateMatch search = image::TemplateMatch::SEARCH_EX)"
                                },
                                "find_features": {
                                    "type": "func",
                                    "name": "find_features",
                                    "doc": {
                                        "brief": "Finds the features in the image.  TODO: support in the feature",
                                        "param": {
                                            "cascade": "The cascade to use for the features. default is CASCADE_FRONTALFACE_ALT.",
                                            "threshold": "The threshold to use for the features. default is 0.5.",
                                            "scale": "The scale to use for the features. default is 1.5.",
                                            "roi": "The region of interest, input in the format of (x, y, w, h), x and y are the coordinates of the upper left corner, w and h are the width and height of roi.\ndefault is None, means whole image."
                                        },
                                        "return": "Returns the features of the image",
                                        "maixpy": "maix.image.Image.find_features",
                                        "py_doc": "Finds the features in the image.  TODO: support in the feature\n\nArgs:\n  - cascade: The cascade to use for the features. default is CASCADE_FRONTALFACE_ALT.\n  - threshold: The threshold to use for the features. default is 0.5.\n  - scale: The scale to use for the features. default is 1.5.\n  - roi: The region of interest, input in the format of (x, y, w, h), x and y are the coordinates of the upper left corner, w and h are the width and height of roi.\ndefault is None, means whole image.\n\n\nReturns: Returns the features of the image\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "cascade",
                                            null
                                        ],
                                        [
                                            "float",
                                            "threshold",
                                            "0.5"
                                        ],
                                        [
                                            "float",
                                            "scale",
                                            "1.5"
                                        ],
                                        [
                                            "std::vector<int>",
                                            "roi",
                                            "std::vector<int>()"
                                        ]
                                    ],
                                    "ret_type": "std::vector<int>",
                                    "static": false,
                                    "def": "std::vector<int> find_features(int cascade, float threshold = 0.5, float scale = 1.5, std::vector<int> roi = std::vector<int>())"
                                },
                                "find_lbp": {
                                    "type": "func",
                                    "name": "find_lbp",
                                    "doc": {
                                        "brief": "Finds the lbp in the image. TODO: support in the feature.",
                                        "param": {
                                            "roi": "The region of interest, input in the format of (x, y, w, h), x and y are the coordinates of the upper left corner, w and h are the width and height of roi.\ndefault is None, means whole image."
                                        },
                                        "return": "Returns the lbp of the image",
                                        "maixpy": "maix.image.Image.find_lbp",
                                        "py_doc": "Finds the lbp in the image. TODO: support in the feature.\n\nArgs:\n  - roi: The region of interest, input in the format of (x, y, w, h), x and y are the coordinates of the upper left corner, w and h are the width and height of roi.\ndefault is None, means whole image.\n\n\nReturns: Returns the lbp of the image\n"
                                    },
                                    "args": [
                                        [
                                            "std::vector<int>",
                                            "roi",
                                            "std::vector<int>()"
                                        ]
                                    ],
                                    "ret_type": "image::LBPKeyPoint",
                                    "static": false,
                                    "def": "image::LBPKeyPoint find_lbp(std::vector<int> roi = std::vector<int>())"
                                },
                                "find_keypoints": {
                                    "type": "func",
                                    "name": "find_keypoints",
                                    "doc": {
                                        "brief": "Finds the keypoints in the image. TODO: support in the feature.",
                                        "param": {
                                            "roi": "The region of interest, input in the format of (x, y, w, h), x and y are the coordinates of the upper left corner, w and h are the width and height of roi.\ndefault is None, means whole image.",
                                            "threshold": "The threshold to use for the keypoints. default is 20.",
                                            "normalized": "If true, the image will be normalized before the operation. default is false.",
                                            "scale_factor": "The scale factor to use for the keypoints. default is 1.5.",
                                            "max_keypoints": "The maximum number of keypoints to use for the keypoints. default is 100.",
                                            "corner_detector": "The corner detector to use for the keypoints. default is CORNER_AGAST."
                                        },
                                        "return": "Returns the keypoints of the image",
                                        "maixpy": "maix.image.Image.find_keypoints",
                                        "py_doc": "Finds the keypoints in the image. TODO: support in the feature.\n\nArgs:\n  - roi: The region of interest, input in the format of (x, y, w, h), x and y are the coordinates of the upper left corner, w and h are the width and height of roi.\ndefault is None, means whole image.\n  - threshold: The threshold to use for the keypoints. default is 20.\n  - normalized: If true, the image will be normalized before the operation. default is false.\n  - scale_factor: The scale factor to use for the keypoints. default is 1.5.\n  - max_keypoints: The maximum number of keypoints to use for the keypoints. default is 100.\n  - corner_detector: The corner detector to use for the keypoints. default is CORNER_AGAST.\n\n\nReturns: Returns the keypoints of the image\n"
                                    },
                                    "args": [
                                        [
                                            "std::vector<int>",
                                            "roi",
                                            "std::vector<int>()"
                                        ],
                                        [
                                            "int",
                                            "threshold",
                                            "20"
                                        ],
                                        [
                                            "bool",
                                            "normalized",
                                            "false"
                                        ],
                                        [
                                            "float",
                                            "scale_factor",
                                            "1.5"
                                        ],
                                        [
                                            "int",
                                            "max_keypoints",
                                            "100"
                                        ],
                                        [
                                            "image::CornerDetector",
                                            "corner_detector",
                                            "image::CornerDetector::CORNER_AGAST"
                                        ]
                                    ],
                                    "ret_type": "image::ORBKeyPoint",
                                    "static": false,
                                    "def": "image::ORBKeyPoint find_keypoints(std::vector<int> roi = std::vector<int>(), int threshold = 20, bool normalized = false, float scale_factor = 1.5, int max_keypoints = 100, image::CornerDetector corner_detector = image::CornerDetector::CORNER_AGAST)"
                                },
                                "find_edges": {
                                    "type": "func",
                                    "name": "find_edges",
                                    "doc": {
                                        "brief": "Finds the edges in the image.",
                                        "param": {
                                            "edge_type": "The edge type to use for the edges. default is EDGE_CANNY.",
                                            "roi": "The region of interest, input in the format of (x, y, w, h), x and y are the coordinates of the upper left corner, w and h are the width and height of roi.\ndefault is None, means whole image.",
                                            "threshold": "The threshold to use for the edges. default is 20."
                                        },
                                        "return": "Returns the edges of the image",
                                        "maixpy": "maix.image.Image.find_edges",
                                        "py_doc": "Finds the edges in the image.\n\nArgs:\n  - edge_type: The edge type to use for the edges. default is EDGE_CANNY.\n  - roi: The region of interest, input in the format of (x, y, w, h), x and y are the coordinates of the upper left corner, w and h are the width and height of roi.\ndefault is None, means whole image.\n  - threshold: The threshold to use for the edges. default is 20.\n\n\nReturns: Returns the edges of the image\n"
                                    },
                                    "args": [
                                        [
                                            "image::EdgeDetector",
                                            "edge_type",
                                            null
                                        ],
                                        [
                                            "std::vector<int>",
                                            "roi",
                                            "std::vector<int>()"
                                        ],
                                        [
                                            "std::vector<int>",
                                            "threshold",
                                            "std::vector<int>({100, 200})"
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image* find_edges(image::EdgeDetector edge_type, std::vector<int> roi = std::vector<int>(), std::vector<int> threshold = std::vector<int>({100, 200}))"
                                },
                                "find_hog": {
                                    "type": "func",
                                    "name": "find_hog",
                                    "doc": {
                                        "brief": "Finds the hog in the image.   TODO: support in the feature",
                                        "param": {
                                            "roi": "The region of interest, input in the format of (x, y, w, h), x and y are the coordinates of the upper left corner, w and h are the width and height of roi.\ndefault is None, means whole image.",
                                            "size": "The size to use for the hog. default is 8."
                                        },
                                        "return": "Returns the hog of the image",
                                        "maixpy": "maix.image.Image.find_hog",
                                        "py_doc": "Finds the hog in the image.   TODO: support in the feature\n\nArgs:\n  - roi: The region of interest, input in the format of (x, y, w, h), x and y are the coordinates of the upper left corner, w and h are the width and height of roi.\ndefault is None, means whole image.\n  - size: The size to use for the hog. default is 8.\n\n\nReturns: Returns the hog of the image\n"
                                    },
                                    "args": [
                                        [
                                            "std::vector<int>",
                                            "roi",
                                            "std::vector<int>()"
                                        ],
                                        [
                                            "int",
                                            "size",
                                            "8"
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image* find_hog(std::vector<int> roi = std::vector<int>(), int size = 8)"
                                },
                                "match_lbp_descriptor": {
                                    "type": "func",
                                    "name": "match_lbp_descriptor",
                                    "doc": {
                                        "brief": "Matches the lbp descriptor of the image.  TODO: support in the feature",
                                        "param": {
                                            "desc1": "The descriptor to use for the match.",
                                            "desc2": "The descriptor to use for the match."
                                        },
                                        "return": "Returns the match of the image",
                                        "maixpy": "maix.image.Image.match_lbp_descriptor",
                                        "py_doc": "Matches the lbp descriptor of the image.  TODO: support in the feature\n\nArgs:\n  - desc1: The descriptor to use for the match.\n  - desc2: The descriptor to use for the match.\n\n\nReturns: Returns the match of the image\n"
                                    },
                                    "args": [
                                        [
                                            "image::LBPKeyPoint &",
                                            "desc1",
                                            null
                                        ],
                                        [
                                            "image::LBPKeyPoint &",
                                            "desc2",
                                            null
                                        ]
                                    ],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int match_lbp_descriptor(image::LBPKeyPoint &desc1, image::LBPKeyPoint &desc2)"
                                },
                                "match_orb_descriptor": {
                                    "type": "func",
                                    "name": "match_orb_descriptor",
                                    "doc": {
                                        "brief": "Matches the orb descriptor of the image. TODO: support in the feature",
                                        "param": {
                                            "desc1": "The descriptor to use for the match.",
                                            "desc2": "The descriptor to use for the match.",
                                            "threshold": "The threshold to use for the match. default is 95.",
                                            "filter_outliers": "If true, the image will be filter_outliers before the operation. default is false."
                                        },
                                        "return": "Returns the match of the image",
                                        "maixpy": "maix.image.Image.match_orb_descriptor",
                                        "py_doc": "Matches the orb descriptor of the image. TODO: support in the feature\n\nArgs:\n  - desc1: The descriptor to use for the match.\n  - desc2: The descriptor to use for the match.\n  - threshold: The threshold to use for the match. default is 95.\n  - filter_outliers: If true, the image will be filter_outliers before the operation. default is false.\n\n\nReturns: Returns the match of the image\n"
                                    },
                                    "args": [
                                        [
                                            "image::ORBKeyPoint &",
                                            "desc1",
                                            null
                                        ],
                                        [
                                            "image::ORBKeyPoint &",
                                            "desc2",
                                            null
                                        ],
                                        [
                                            "int",
                                            "threshold",
                                            "95"
                                        ],
                                        [
                                            "bool",
                                            "filter_outliers",
                                            "false"
                                        ]
                                    ],
                                    "ret_type": "image::KPTMatch",
                                    "static": false,
                                    "def": "image::KPTMatch match_orb_descriptor(image::ORBKeyPoint &desc1, image::ORBKeyPoint &desc2, int threshold = 95, bool filter_outliers = false)"
                                }
                            },
                            "def": "class Image"
                        },
                        "load": {
                            "type": "func",
                            "name": "load",
                            "doc": {
                                "brief": "Load image from file, and convert to Image object",
                                "param": {
                                    "path": "image file path",
                                    "format": "read as this format, if not match, will convert to this format, by default is RGB888"
                                },
                                "return": "Image object",
                                "maixpy": "maix.image.load",
                                "py_doc": "Load image from file, and convert to Image object\n\nArgs:\n  - path: image file path\n  - format: read as this format, if not match, will convert to this format, by default is RGB888\n\n\nReturns: Image object\n"
                            },
                            "args": [
                                [
                                    "const char *",
                                    "path",
                                    null
                                ],
                                [
                                    "image::Format",
                                    "format",
                                    "image::Format::FMT_RGB888"
                                ]
                            ],
                            "ret_type": "image::Image*",
                            "static": false,
                            "def": "image::Image *load(const char *path, image::Format format = image::Format::FMT_RGB888)"
                        },
                        "load_font": {
                            "type": "func",
                            "name": "load_font",
                            "doc": {
                                "brief": "Load font from file",
                                "param": {
                                    "name": "font name, used to identify font",
                                    "path": "font file path, support ttf, ttc, otf",
                                    "size": "font size, font height, by default is 16"
                                },
                                "return": "error code, err::ERR_NONE is ok, other is error",
                                "maixpy": "maix.image.load_font",
                                "py_doc": "Load font from file\n\nArgs:\n  - name: font name, used to identify font\n  - path: font file path, support ttf, ttc, otf\n  - size: font size, font height, by default is 16\n\n\nReturns: error code, err::ERR_NONE is ok, other is error\n"
                            },
                            "args": [
                                [
                                    "const std::string &",
                                    "name",
                                    null
                                ],
                                [
                                    "const char *",
                                    "path",
                                    null
                                ],
                                [
                                    "int",
                                    "size",
                                    "16"
                                ]
                            ],
                            "ret_type": "err::Err",
                            "static": false,
                            "def": "err::Err load_font(const std::string &name, const char *path, int size = 16)"
                        },
                        "set_default_font": {
                            "type": "func",
                            "name": "set_default_font",
                            "doc": {
                                "brief": "Set default font, if not call this method, default is hershey_plain",
                                "param": {
                                    "name": "font name, supported names can be get by fonts()"
                                },
                                "return": "error code, err::ERR_NONE is ok, other is error",
                                "maixpy": "maix.image.set_default_font",
                                "py_doc": "Set default font, if not call this method, default is hershey_plain\n\nArgs:\n  - name: font name, supported names can be get by fonts()\n\n\nReturns: error code, err::ERR_NONE is ok, other is error\n"
                            },
                            "args": [
                                [
                                    "const std::string &",
                                    "name",
                                    null
                                ]
                            ],
                            "ret_type": "err::Err",
                            "static": false,
                            "def": "err::Err set_default_font(const std::string &name)"
                        },
                        "fonts": {
                            "type": "func",
                            "name": "fonts",
                            "doc": {
                                "brief": "Get all loaded fonts",
                                "return": "all loaded fonts, string list type",
                                "maixpy": "maix.image.fonts",
                                "py_doc": "Get all loaded fonts\n\nReturns: all loaded fonts, string list type\n"
                            },
                            "args": [],
                            "ret_type": "std::vector<std::string>*",
                            "static": false,
                            "def": "std::vector<std::string> *fonts()"
                        },
                        "text_size": {
                            "type": "func",
                            "name": "text_size",
                            "doc": {
                                "brief": "Get text rendered width and height",
                                "param": {
                                    "text": "text content",
                                    "scale": "font scale, by default(value is 1)",
                                    "thickness": "text thickness(line width), by default(value is 1)"
                                },
                                "return": "text rendered width and height, [width, height]",
                                "maixpy": "maix.image.text_size",
                                "py_doc": "Get text rendered width and height\n\nArgs:\n  - text: text content\n  - scale: font scale, by default(value is 1)\n  - thickness: text thickness(line width), by default(value is 1)\n\n\nReturns: text rendered width and height, [width, height]\n"
                            },
                            "args": [
                                [
                                    "std::string",
                                    "text",
                                    null
                                ],
                                [
                                    "float",
                                    "scale",
                                    "1"
                                ],
                                [
                                    "int",
                                    "thickness",
                                    "1"
                                ],
                                [
                                    "const std::string &",
                                    "font",
                                    "\"\""
                                ]
                            ],
                            "ret_type": "image::Size",
                            "static": false,
                            "def": "image::Size text_size(std::string text, float scale = 1, int thickness = 1, const std::string &font = \"\")"
                        },
                        "cv2image": {
                            "type": "func",
                            "name": "cv2image",
                            "doc": {
                                "brief": "OpenCV Mat(numpy array object) to Image object",
                                "param": {
                                    "array": "numpy array object, must be a 3-dim or 2-dim continuous array with shape hwc or hw"
                                },
                                "return": "Image object",
                                "maixpy": "maix.image.cv2image",
                                "py_doc": "OpenCV Mat(numpy array object) to Image object\n\nArgs:\n  - array: numpy array object, must be a 3-dim or 2-dim continuous array with shape hwc or hw\n\n\nReturns: Image object\n"
                            },
                            "args": [
                                [
                                    "py::array_t<uint8_t, py::array::c_style>",
                                    "array",
                                    null
                                ],
                                [
                                    "bool",
                                    "bgr",
                                    "true"
                                ],
                                [
                                    "bool",
                                    "copy",
                                    "true"
                                ]
                            ],
                            "ret_type": "image::Image*",
                            "static": false,
                            "def": "image::Image *cv2image(py::array_t<uint8_t, py::array::c_style> array, bool bgr = true, bool copy = true)"
                        },
                        "image2cv": {
                            "type": "func",
                            "name": "image2cv",
                            "doc": {
                                "brief": "Image object to OpenCV Mat(numpy array object)",
                                "param": {
                                    "img": "Image object"
                                },
                                "return": "numpy array object",
                                "maixpy": "maix.image.image2cv",
                                "py_doc": "Image object to OpenCV Mat(numpy array object)\n\nArgs:\n  - img: Image object\n\n\nReturns: numpy array object\n"
                            },
                            "args": [
                                [
                                    "image::Image *",
                                    "img",
                                    null
                                ],
                                [
                                    "bool",
                                    "bgr",
                                    "true"
                                ],
                                [
                                    "bool",
                                    "copy",
                                    "true"
                                ]
                            ],
                            "ret_type": "py::array_t<uint8_t, py::array::c_style>",
                            "static": false,
                            "def": "py::array_t<uint8_t, py::array::c_style> image2cv(image::Image *img, bool bgr = true, bool copy = true)"
                        }
                    },
                    "auto_add": true
                },
                "camera": {
                    "type": "module",
                    "doc": {
                        "brief": "maix.camera module, access camera device and get image from it",
                        "maixpy": "maix.camera",
                        "py_doc": "maix.camera module, access camera device and get image from it"
                    },
                    "members": {
                        "list_devices": {
                            "type": "func",
                            "name": "list_devices",
                            "doc": {
                                "brief": "List all supported camera devices.",
                                "return": "Returns the path to the camera device.",
                                "maixpy": "maix.camera.list_devices",
                                "py_doc": "List all supported camera devices.\n\nReturns: Returns the path to the camera device.\n"
                            },
                            "args": [],
                            "ret_type": "std::vector<std::string>",
                            "static": false,
                            "def": "std::vector<std::string> list_devices()"
                        },
                        "set_regs_enable": {
                            "type": "func",
                            "name": "set_regs_enable",
                            "doc": {
                                "brief": "Enable set camera registers, default is false, if set to true, will not set camera registers, you can manually set registers by write_reg API.",
                                "param": {
                                    "enable": "enable/disable set camera registers"
                                },
                                "maixpy": "maix.camera.set_regs_enable",
                                "py_doc": "Enable set camera registers, default is false, if set to true, will not set camera registers, you can manually set registers by write_reg API.\n\nArgs:\n  - enable: enable/disable set camera registers\n"
                            },
                            "args": [
                                [
                                    "bool",
                                    "enable",
                                    "true"
                                ]
                            ],
                            "ret_type": "void",
                            "static": false,
                            "def": "void set_regs_enable(bool enable = true)"
                        },
                        "Camera": {
                            "type": "class",
                            "name": "Camera",
                            "doc": {
                                "brief": "Camera class",
                                "maixpy": "maix.camera.Camera",
                                "py_doc": "Camera class"
                            },
                            "members": {
                                "__init__": {
                                    "type": "func",
                                    "name": "Camera",
                                    "doc": {
                                        "brief": "Construct a new Camera object",
                                        "param": {
                                            "width": "camera width, default is -1, means auto, mostly means max width of camera support",
                                            "height": "camera height, default is -1, means auto, mostly means max height of camera support",
                                            "format": "camera output format, default is image.Format.FMT_RGB888",
                                            "device": "camera device path, you can get devices by list_devices method, by default(value is NULL(None in MaixPy)) means the first device",
                                            "fps": "camera fps, default is -1, means auto, mostly means max fps of camera support",
                                            "buff_num": "camera buffer number, default is 3, means 3 buffer, one used by user, one used for cache the next frame,\nmore than one buffer will accelerate image read speed, but will cost more memory.",
                                            "open": "If true, camera will automatically call open() after creation. default is true."
                                        },
                                        "maixpy": "maix.camera.Camera.__init__",
                                        "maixcdk": "maix.camera.Camera.Camera",
                                        "py_doc": "Construct a new Camera object\n\nArgs:\n  - width: camera width, default is -1, means auto, mostly means max width of camera support\n  - height: camera height, default is -1, means auto, mostly means max height of camera support\n  - format: camera output format, default is image.Format.FMT_RGB888\n  - device: camera device path, you can get devices by list_devices method, by default(value is NULL(None in MaixPy)) means the first device\n  - fps: camera fps, default is -1, means auto, mostly means max fps of camera support\n  - buff_num: camera buffer number, default is 3, means 3 buffer, one used by user, one used for cache the next frame,\nmore than one buffer will accelerate image read speed, but will cost more memory.\n  - open: If true, camera will automatically call open() after creation. default is true.\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "width",
                                            "-1"
                                        ],
                                        [
                                            "int",
                                            "height",
                                            "-1"
                                        ],
                                        [
                                            "image::Format",
                                            "format",
                                            "image::FMT_RGB888"
                                        ],
                                        [
                                            "const char *",
                                            "device",
                                            "nullptr"
                                        ],
                                        [
                                            "int",
                                            "fps",
                                            "-1"
                                        ],
                                        [
                                            "int",
                                            "buff_num",
                                            "3"
                                        ],
                                        [
                                            "bool",
                                            "open",
                                            "true"
                                        ]
                                    ],
                                    "ret_type": null,
                                    "static": false,
                                    "def": "Camera(int width = -1, int height = -1, image::Format format = image::FMT_RGB888, const char *device = nullptr, int fps = -1, int buff_num = 3, bool open = true)"
                                },
                                "get_ch_nums": {
                                    "type": "func",
                                    "name": "get_ch_nums",
                                    "doc": {
                                        "brief": "Get the number of channels supported by the camera.",
                                        "return": "Returns the maximum number of channels.",
                                        "maixpy": "maix.camera.Camera.get_ch_nums",
                                        "py_doc": "Get the number of channels supported by the camera.\n\nReturns: Returns the maximum number of channels.\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int get_ch_nums()"
                                },
                                "open": {
                                    "type": "func",
                                    "name": "open",
                                    "doc": {
                                        "brief": "Open camera and run",
                                        "param": {
                                            "width": "camera width, default is -1, means auto, mostly means max width of camera support",
                                            "height": "camera height, default is -1, means auto, mostly means max height of camera support",
                                            "format": "camera output format, default same as the constructor's format argument",
                                            "fps": "camera fps, default is -1, means auto, mostly means max fps of camera support",
                                            "buff_num": "camera buffer number, default is 3, means 3 buffer, one used by user, one used for cache the next frame,\nmore than one buffer will accelerate image read speed, but will cost more memory."
                                        },
                                        "return": "error code, err::ERR_NONE means success, others means failed",
                                        "maixpy": "maix.camera.Camera.open",
                                        "py_doc": "Open camera and run\n\nArgs:\n  - width: camera width, default is -1, means auto, mostly means max width of camera support\n  - height: camera height, default is -1, means auto, mostly means max height of camera support\n  - format: camera output format, default same as the constructor's format argument\n  - fps: camera fps, default is -1, means auto, mostly means max fps of camera support\n  - buff_num: camera buffer number, default is 3, means 3 buffer, one used by user, one used for cache the next frame,\nmore than one buffer will accelerate image read speed, but will cost more memory.\n\n\nReturns: error code, err::ERR_NONE means success, others means failed\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "width",
                                            "-1"
                                        ],
                                        [
                                            "int",
                                            "height",
                                            "-1"
                                        ],
                                        [
                                            "image::Format",
                                            "format",
                                            "image::FMT_INVALID"
                                        ],
                                        [
                                            "int",
                                            "fps",
                                            "-1"
                                        ],
                                        [
                                            "int",
                                            "buff_num",
                                            "-1"
                                        ]
                                    ],
                                    "ret_type": "err::Err",
                                    "static": false,
                                    "def": "err::Err open(int width = -1, int height = -1, image::Format format = image::FMT_INVALID, int fps = -1, int buff_num = -1)"
                                },
                                "read": {
                                    "type": "func",
                                    "name": "read",
                                    "doc": {
                                        "brief": "Get one frame image from camera buffer, must call open method before read.\\nIf open method not called, will call it automatically, if open failed, will throw exception!\\nSo call open method before read is recommended.",
                                        "param": {
                                            "buff": "buffer to store image data, if buff is nullptr, will alloc memory automatically.\nIn MaixPy, default to None, you can create a image.Image object, then pass img.data() to buff.",
                                            "block": "block read, default is true, means block util read image successfully,\nif set to false, will return nullptr if no image in buffer"
                                        },
                                        "return": "image::Image object, if failed, return nullptr, you should delete if manually in C++",
                                        "maixpy": "maix.camera.Camera.read",
                                        "py_doc": "Get one frame image from camera buffer, must call open method before read.\nIf open method not called, will call it automatically, if open failed, will throw exception!\nSo call open method before read is recommended.\n\nArgs:\n  - buff: buffer to store image data, if buff is nullptr, will alloc memory automatically.\nIn MaixPy, default to None, you can create a image.Image object, then pass img.data() to buff.\n  - block: block read, default is true, means block util read image successfully,\nif set to false, will return nullptr if no image in buffer\n\n\nReturns: image::Image object, if failed, return nullptr, you should delete if manually in C++\n"
                                    },
                                    "args": [
                                        [
                                            "void *",
                                            "buff",
                                            "nullptr"
                                        ],
                                        [
                                            "size_t",
                                            "buff_size",
                                            "0"
                                        ],
                                        [
                                            "bool",
                                            "block",
                                            "true"
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *read(void *buff = nullptr, size_t buff_size = 0, bool block = true)"
                                },
                                "clear_buff": {
                                    "type": "func",
                                    "name": "clear_buff",
                                    "doc": {
                                        "brief": "Clear buff to ensure the next read image is the latest image",
                                        "maixpy": "maix.camera.Camera.clear_buff",
                                        "py_doc": "Clear buff to ensure the next read image is the latest image"
                                    },
                                    "args": [],
                                    "ret_type": "void",
                                    "static": false,
                                    "def": "void clear_buff()"
                                },
                                "skip_frames": {
                                    "type": "func",
                                    "name": "skip_frames",
                                    "doc": {
                                        "brief": "Read some frames and drop, this is usually used avoid read not stable image when camera just opened.",
                                        "param": {
                                            "num": "number of frames to read and drop"
                                        },
                                        "maixpy": "maix.camera.Camera.skip_frames",
                                        "py_doc": "Read some frames and drop, this is usually used avoid read not stable image when camera just opened.\n\nArgs:\n  - num: number of frames to read and drop\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "num",
                                            null
                                        ]
                                    ],
                                    "ret_type": "void",
                                    "static": false,
                                    "def": "void skip_frames(int num)"
                                },
                                "close": {
                                    "type": "func",
                                    "name": "close",
                                    "doc": {
                                        "brief": "Close camera",
                                        "maixpy": "maix.camera.Camera.close",
                                        "py_doc": "Close camera"
                                    },
                                    "args": [],
                                    "ret_type": "void",
                                    "static": false,
                                    "def": "void close()"
                                },
                                "add_channel": {
                                    "type": "func",
                                    "name": "add_channel",
                                    "doc": {
                                        "brief": "Add a new channel and return a new Camera object, you can use close() to close this channel.",
                                        "param": {
                                            "width": "camera width, default is -1, means auto, mostly means max width of camera support",
                                            "height": "camera height, default is -1, means auto, mostly means max height of camera support",
                                            "format": "camera output format, default is RGB888",
                                            "fps": "camera fps, default is -1, means auto, mostly means max fps of camera support",
                                            "buff_num": "camera buffer number, default is 3, means 3 buffer, one used by user, one used for cache the next frame,\nmore than one buffer will accelerate image read speed, but will cost more memory.",
                                            "open": "If true, camera will automatically call open() after creation. default is true."
                                        },
                                        "return": "new Camera object",
                                        "maixpy": "maix.camera.Camera.add_channel",
                                        "py_doc": "Add a new channel and return a new Camera object, you can use close() to close this channel.\n\nArgs:\n  - width: camera width, default is -1, means auto, mostly means max width of camera support\n  - height: camera height, default is -1, means auto, mostly means max height of camera support\n  - format: camera output format, default is RGB888\n  - fps: camera fps, default is -1, means auto, mostly means max fps of camera support\n  - buff_num: camera buffer number, default is 3, means 3 buffer, one used by user, one used for cache the next frame,\nmore than one buffer will accelerate image read speed, but will cost more memory.\n  - open: If true, camera will automatically call open() after creation. default is true.\n\n\nReturns: new Camera object\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "width",
                                            "-1"
                                        ],
                                        [
                                            "int",
                                            "height",
                                            "-1"
                                        ],
                                        [
                                            "image::Format",
                                            "format",
                                            "image::FMT_RGB888"
                                        ],
                                        [
                                            "int",
                                            "fps",
                                            "-1"
                                        ],
                                        [
                                            "int",
                                            "buff_num",
                                            "3"
                                        ],
                                        [
                                            "bool",
                                            "open",
                                            "true"
                                        ]
                                    ],
                                    "ret_type": "camera::Camera*",
                                    "static": false,
                                    "def": "camera::Camera *add_channel(int width = -1, int height = -1, image::Format format = image::FMT_RGB888, int fps = -1, int buff_num = 3, bool open = true)"
                                },
                                "is_opened": {
                                    "type": "func",
                                    "name": "is_opened",
                                    "doc": {
                                        "brief": "Check if camera is opened",
                                        "return": "true if camera is opened, false if not",
                                        "maixpy": "maix.camera.Camera.is_opened",
                                        "py_doc": "Check if camera is opened\n\nReturns: true if camera is opened, false if not\n"
                                    },
                                    "args": [],
                                    "ret_type": "bool",
                                    "static": false,
                                    "def": "bool is_opened()"
                                },
                                "is_closed": {
                                    "type": "func",
                                    "name": "is_closed",
                                    "doc": {
                                        "brief": "check camera device is closed or not",
                                        "return": "closed or not, bool type",
                                        "maixpy": "maix.camera.Camera.is_closed",
                                        "py_doc": "check camera device is closed or not\n\nReturns: closed or not, bool type\n"
                                    },
                                    "args": [],
                                    "ret_type": "bool",
                                    "static": false,
                                    "def": "bool is_closed()"
                                },
                                "width": {
                                    "type": "func",
                                    "name": "width",
                                    "doc": {
                                        "brief": "Get camera width",
                                        "return": "camera width",
                                        "maixpy": "maix.camera.Camera.width",
                                        "py_doc": "Get camera width\n\nReturns: camera width\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int width()"
                                },
                                "height": {
                                    "type": "func",
                                    "name": "height",
                                    "doc": {
                                        "brief": "Get camera height",
                                        "return": "camera height",
                                        "maixpy": "maix.camera.Camera.height",
                                        "py_doc": "Get camera height\n\nReturns: camera height\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int height()"
                                },
                                "fps": {
                                    "type": "func",
                                    "name": "fps",
                                    "doc": {
                                        "brief": "Get camera fps",
                                        "return": "camera fps",
                                        "maixpy": "maix.camera.Camera.fps",
                                        "py_doc": "Get camera fps\n\nReturns: camera fps\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int fps()"
                                },
                                "format": {
                                    "type": "func",
                                    "name": "format",
                                    "doc": {
                                        "brief": "Get camera output format",
                                        "return": "camera output format, image::Format object",
                                        "maixpy": "maix.camera.Camera.format",
                                        "py_doc": "Get camera output format\n\nReturns: camera output format, image::Format object\n"
                                    },
                                    "args": [],
                                    "ret_type": "image::Format",
                                    "static": false,
                                    "def": "image::Format format()"
                                },
                                "buff_num": {
                                    "type": "func",
                                    "name": "buff_num",
                                    "doc": {
                                        "brief": "Get camera buffer number",
                                        "return": "camera buffer number",
                                        "maixpy": "maix.camera.Camera.buff_num",
                                        "py_doc": "Get camera buffer number\n\nReturns: camera buffer number\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int buff_num()"
                                },
                                "hmirror": {
                                    "type": "func",
                                    "name": "hmirror",
                                    "doc": {
                                        "brief": "Get camera horizontal mirror",
                                        "return": "camera horizontal mirror",
                                        "maixpy": "maix.camera.Camera.hmirror",
                                        "py_doc": "Get camera horizontal mirror\n\nReturns: camera horizontal mirror\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "value",
                                            "-1"
                                        ]
                                    ],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int hmirror(int value = -1)"
                                },
                                "vflip": {
                                    "type": "func",
                                    "name": "vflip",
                                    "doc": {
                                        "brief": "Get camera vertical flip",
                                        "return": "camera vertical flip",
                                        "maixpy": "maix.camera.Camera.vflip",
                                        "py_doc": "Get camera vertical flip\n\nReturns: camera vertical flip\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "value",
                                            "-1"
                                        ]
                                    ],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int vflip(int value = -1)"
                                },
                                "exposure": {
                                    "type": "func",
                                    "name": "exposure",
                                    "doc": {
                                        "brief": "Get camera exposure",
                                        "return": "camera exposure",
                                        "maixpy": "maix.camera.Camera.exposure",
                                        "py_doc": "Get camera exposure\n\nReturns: camera exposure\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "value",
                                            "-1"
                                        ]
                                    ],
                                    "ret_type": "float",
                                    "static": false,
                                    "def": "float exposure(int value = -1)"
                                },
                                "gain": {
                                    "type": "func",
                                    "name": "gain",
                                    "doc": {
                                        "brief": "Get camera gain",
                                        "return": "camera gain",
                                        "maixpy": "maix.camera.Camera.gain",
                                        "py_doc": "Get camera gain\n\nReturns: camera gain\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "value",
                                            "-1"
                                        ]
                                    ],
                                    "ret_type": "float",
                                    "static": false,
                                    "def": "float gain(int value = -1)"
                                },
                                "device": {
                                    "type": "func",
                                    "name": "device",
                                    "doc": {
                                        "brief": "Get camera device path",
                                        "return": "camera device path",
                                        "maixpy": "maix.camera.Camera.device",
                                        "py_doc": "Get camera device path\n\nReturns: camera device path\n"
                                    },
                                    "args": [],
                                    "ret_type": "std::string",
                                    "static": false,
                                    "def": "std::string device()"
                                },
                                "write_reg": {
                                    "type": "func",
                                    "name": "write_reg",
                                    "doc": {
                                        "brief": "Write camera register",
                                        "param": {
                                            "addr": "register address",
                                            "data": "register data",
                                            "bit_width": "register data bit width, default is 8"
                                        },
                                        "return": "error code, err::ERR_NONE means success, others means failed",
                                        "maixpy": "maix.camera.Camera.write_reg",
                                        "py_doc": "Write camera register\n\nArgs:\n  - addr: register address\n  - data: register data\n  - bit_width: register data bit width, default is 8\n\n\nReturns: error code, err::ERR_NONE means success, others means failed\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "addr",
                                            null
                                        ],
                                        [
                                            "int",
                                            "data",
                                            null
                                        ],
                                        [
                                            "int",
                                            "bit_width",
                                            "8"
                                        ]
                                    ],
                                    "ret_type": "err::Err",
                                    "static": false,
                                    "def": "err::Err write_reg(int addr, int data, int bit_width = 8)"
                                },
                                "read_reg": {
                                    "type": "func",
                                    "name": "read_reg",
                                    "doc": {
                                        "brief": "Read camera register",
                                        "param": {
                                            "addr": "register address",
                                            "bit_width": "register data bit width, default is 8"
                                        },
                                        "return": "register data, -1 means failed",
                                        "maixpy": "maix.camera.Camera.read_reg",
                                        "py_doc": "Read camera register\n\nArgs:\n  - addr: register address\n  - bit_width: register data bit width, default is 8\n\n\nReturns: register data, -1 means failed\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "addr",
                                            null
                                        ],
                                        [
                                            "int",
                                            "bit_width",
                                            "8"
                                        ]
                                    ],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int read_reg(int addr, int bit_width = 8)"
                                },
                                "show_colorbar": {
                                    "type": "func",
                                    "name": "show_colorbar",
                                    "doc": {
                                        "brief": "Camera output color bar image for test",
                                        "param": {
                                            "enable": "enable/disable color bar"
                                        },
                                        "return": "error code, err::ERR_NONE means success, others means failed",
                                        "maixpy": "maix.camera.Camera.show_colorbar",
                                        "py_doc": "Camera output color bar image for test\n\nArgs:\n  - enable: enable/disable color bar\n\n\nReturns: error code, err::ERR_NONE means success, others means failed\n"
                                    },
                                    "args": [
                                        [
                                            "bool",
                                            "enable",
                                            null
                                        ]
                                    ],
                                    "ret_type": "err::Err",
                                    "static": false,
                                    "def": "err::Err show_colorbar(bool enable)"
                                }
                            },
                            "def": "class Camera"
                        }
                    },
                    "auto_add": false
                },
                "display": {
                    "type": "module",
                    "doc": {
                        "brief": "maix.display module, control display device and show image on it",
                        "maixpy": "maix.display",
                        "py_doc": "maix.display module, control display device and show image on it"
                    },
                    "members": {
                        "Display": {
                            "type": "class",
                            "name": "Display",
                            "doc": {
                                "brief": "Display class",
                                "maixpy": "maix.display.Display",
                                "py_doc": "Display class"
                            },
                            "members": {
                                "__init__": {
                                    "type": "func",
                                    "name": "Display",
                                    "doc": {
                                        "brief": "Construct a new Display object",
                                        "param": {
                                            "width": "display width, by default(value is -1) means auto detect,\nif width > max device supported width, will auto set to max device supported width",
                                            "height": "display height, by default(value is -1) means auto detect,\nif height > max device supported height, will auto set to max device supported height",
                                            "device": "display device name, you can get devices by list_devices method, by default(value is NULL(None in MaixPy)) means the first device",
                                            "open": "If true, display will automatically call open() after creation. default is true."
                                        },
                                        "maixpy": "maix.display.Display.__init__",
                                        "maixcdk": "maix.display.Display.Display",
                                        "py_doc": "Construct a new Display object\n\nArgs:\n  - width: display width, by default(value is -1) means auto detect,\nif width > max device supported width, will auto set to max device supported width\n  - height: display height, by default(value is -1) means auto detect,\nif height > max device supported height, will auto set to max device supported height\n  - device: display device name, you can get devices by list_devices method, by default(value is NULL(None in MaixPy)) means the first device\n  - open: If true, display will automatically call open() after creation. default is true.\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "width",
                                            "-1"
                                        ],
                                        [
                                            "int",
                                            "height",
                                            "-1"
                                        ],
                                        [
                                            "image::Format",
                                            "format",
                                            "image::FMT_RGB888"
                                        ],
                                        [
                                            "const char *",
                                            "device",
                                            "nullptr"
                                        ],
                                        [
                                            "bool",
                                            "open",
                                            "true"
                                        ]
                                    ],
                                    "ret_type": null,
                                    "static": false,
                                    "def": "Display(int width = -1, int height = -1, image::Format format = image::FMT_RGB888, const char *device = nullptr, bool open = true)"
                                },
                                "width": {
                                    "type": "func",
                                    "name": "width",
                                    "doc": {
                                        "brief": "Get display width",
                                        "return": "width",
                                        "maixpy": "maix.display.Display.width",
                                        "py_doc": "Get display width\n\nReturns: width\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int width()"
                                },
                                "height": {
                                    "type": "func",
                                    "name": "height",
                                    "doc": {
                                        "brief": "Get display height",
                                        "param": {
                                            "ch": "channel to get, by default(value is 0) means the first channel"
                                        },
                                        "return": "height",
                                        "maixpy": "maix.display.Display.height",
                                        "py_doc": "Get display height\n\nArgs:\n  - ch: channel to get, by default(value is 0) means the first channel\n\n\nReturns: height\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int height()"
                                },
                                "size": {
                                    "type": "func",
                                    "name": "size",
                                    "doc": {
                                        "brief": "Get display size",
                                        "param": {
                                            "ch": "channel to get, by default(value is 0) means the first channel"
                                        },
                                        "return": "size A list type in MaixPy, [width, height]",
                                        "maixpy": "maix.display.Display.size",
                                        "py_doc": "Get display size\n\nArgs:\n  - ch: channel to get, by default(value is 0) means the first channel\n\n\nReturns: size A list type in MaixPy, [width, height]\n"
                                    },
                                    "args": [],
                                    "ret_type": "std::vector<int>",
                                    "static": false,
                                    "def": "std::vector<int> size()"
                                },
                                "format": {
                                    "type": "func",
                                    "name": "format",
                                    "doc": {
                                        "brief": "Get display format",
                                        "return": "format",
                                        "maixpy": "maix.display.Display.format",
                                        "py_doc": "Get display format\n\nReturns: format\n"
                                    },
                                    "args": [],
                                    "ret_type": "image::Format",
                                    "static": false,
                                    "def": "image::Format format()"
                                },
                                "open": {
                                    "type": "func",
                                    "name": "open",
                                    "doc": {
                                        "brief": "open display device, if already opened, will return err.ERR_NONE.",
                                        "param": {
                                            "width": "display width, default is -1, means auto, mostly means max width of display support",
                                            "height": "display height, default is -1, means auto, mostly means max height of display support",
                                            "format": "display output format, default is RGB888"
                                        },
                                        "return": "error code",
                                        "maixpy": "maix.display.Display.open",
                                        "py_doc": "open display device, if already opened, will return err.ERR_NONE.\n\nArgs:\n  - width: display width, default is -1, means auto, mostly means max width of display support\n  - height: display height, default is -1, means auto, mostly means max height of display support\n  - format: display output format, default is RGB888\n\n\nReturns: error code\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "width",
                                            "-1"
                                        ],
                                        [
                                            "int",
                                            "height",
                                            "-1"
                                        ],
                                        [
                                            "image::Format",
                                            "format",
                                            "image::FMT_INVALID"
                                        ]
                                    ],
                                    "ret_type": "err::Err",
                                    "static": false,
                                    "def": "err::Err open(int width = -1, int height = -1, image::Format format = image::FMT_INVALID)"
                                },
                                "close": {
                                    "type": "func",
                                    "name": "close",
                                    "doc": {
                                        "brief": "close display device",
                                        "return": "error code",
                                        "maixpy": "maix.display.Display.close",
                                        "py_doc": "close display device\n\nReturns: error code\n"
                                    },
                                    "args": [],
                                    "ret_type": "err::Err",
                                    "static": false,
                                    "def": "err::Err close()"
                                },
                                "add_channel": {
                                    "type": "func",
                                    "name": "add_channel",
                                    "doc": {
                                        "brief": "Add a new channel and return a new Display object, you can use close() to close this channel.",
                                        "param": {
                                            "width": "display width, default is -1, means auto, mostly means max width of display support",
                                            "height": "display height, default is -1, means auto, mostly means max height of display support",
                                            "format": "display output format, default is RGB888",
                                            "open": "If true, display will automatically call open() after creation. default is true."
                                        },
                                        "return": "new Display object",
                                        "maixpy": "maix.display.Display.add_channel",
                                        "py_doc": "Add a new channel and return a new Display object, you can use close() to close this channel.\n\nArgs:\n  - width: display width, default is -1, means auto, mostly means max width of display support\n  - height: display height, default is -1, means auto, mostly means max height of display support\n  - format: display output format, default is RGB888\n  - open: If true, display will automatically call open() after creation. default is true.\n\n\nReturns: new Display object\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "width",
                                            "-1"
                                        ],
                                        [
                                            "int",
                                            "height",
                                            "-1"
                                        ],
                                        [
                                            "image::Format",
                                            "format",
                                            "image::FMT_RGB888"
                                        ],
                                        [
                                            "bool",
                                            "open",
                                            "true"
                                        ]
                                    ],
                                    "ret_type": "display::Display*",
                                    "static": false,
                                    "def": "display::Display *add_channel(int width = -1, int height = -1, image::Format format = image::FMT_RGB888, bool open = true)"
                                },
                                "is_opened": {
                                    "type": "func",
                                    "name": "is_opened",
                                    "doc": {
                                        "brief": "check display device is opened or not",
                                        "return": "opened or not, bool type",
                                        "maixpy": "maix.display.Display.is_opened",
                                        "py_doc": "check display device is opened or not\n\nReturns: opened or not, bool type\n"
                                    },
                                    "args": [],
                                    "ret_type": "bool",
                                    "static": false,
                                    "def": "bool is_opened()"
                                },
                                "is_closed": {
                                    "type": "func",
                                    "name": "is_closed",
                                    "doc": {
                                        "brief": "check display device is closed or not",
                                        "return": "closed or not, bool type",
                                        "maixpy": "maix.display.Display.is_closed",
                                        "py_doc": "check display device is closed or not\n\nReturns: closed or not, bool type\n"
                                    },
                                    "args": [],
                                    "ret_type": "bool",
                                    "static": false,
                                    "def": "bool is_closed()"
                                },
                                "show": {
                                    "type": "func",
                                    "name": "show",
                                    "doc": {
                                        "brief": "show image on display device, and will also send to MaixVision work station if connected.",
                                        "param": {
                                            "img": "image to show, image.Image object,\nif the size of image smaller than display size, will show in the center of display;\nif the size of image bigger than display size, will auto resize to display size and keep ratio, fill blank with black color.",
                                            "fit": "image in screen fit mode, by default(value is image.FIT_CONTAIN), @see image.Fit for more details\ne.g. image.FIT_CONTAIN means resize image to fit display size and keep ratio, fill blank with black color."
                                        },
                                        "return": "error code",
                                        "maixpy": "maix.display.Display.show",
                                        "py_doc": "show image on display device, and will also send to MaixVision work station if connected.\n\nArgs:\n  - img: image to show, image.Image object,\nif the size of image smaller than display size, will show in the center of display;\nif the size of image bigger than display size, will auto resize to display size and keep ratio, fill blank with black color.\n  - fit: image in screen fit mode, by default(value is image.FIT_CONTAIN), @see image.Fit for more details\ne.g. image.FIT_CONTAIN means resize image to fit display size and keep ratio, fill blank with black color.\n\n\nReturns: error code\n"
                                    },
                                    "args": [
                                        [
                                            "image::Image &",
                                            "img",
                                            null
                                        ],
                                        [
                                            "image::Fit",
                                            "fit",
                                            "image::FIT_CONTAIN"
                                        ]
                                    ],
                                    "ret_type": "err::Err",
                                    "static": false,
                                    "def": "err::Err show(image::Image &img, image::Fit fit = image::FIT_CONTAIN)"
                                },
                                "device": {
                                    "type": "func",
                                    "name": "device",
                                    "doc": {
                                        "brief": "Get display device path",
                                        "return": "display device path",
                                        "maixpy": "maix.display.Display.device",
                                        "py_doc": "Get display device path\n\nReturns: display device path\n"
                                    },
                                    "args": [],
                                    "ret_type": "std::string",
                                    "static": false,
                                    "def": "std::string device()"
                                }
                            },
                            "def": "class Display"
                        },
                        "send_to_maixvision": {
                            "type": "func",
                            "name": "send_to_maixvision",
                            "doc": {
                                "brief": "Send image to MaixVision work station if connected.\\nIf you want to debug your program an don't want to initialize display, use this method.",
                                "param": {
                                    "img": "image to send, image.Image object"
                                },
                                "maixpy": "maix.display.send_to_maixvision",
                                "py_doc": "Send image to MaixVision work station if connected.\nIf you want to debug your program an don't want to initialize display, use this method.\n\nArgs:\n  - img: image to send, image.Image object\n"
                            },
                            "args": [
                                [
                                    "image::Image &",
                                    "img",
                                    null
                                ]
                            ],
                            "ret_type": "void",
                            "static": false,
                            "def": "void send_to_maixvision(image::Image &img)"
                        }
                    },
                    "auto_add": false
                },
                "comm": {
                    "type": "module",
                    "doc": {
                        "brief": "maix.comm module"
                    },
                    "members": {
                        "CommProtocol": {
                            "type": "class",
                            "name": "CommProtocol",
                            "doc": {
                                "brief": "Class for communication protocol",
                                "maixpy": "maix.comm.CommProtocol",
                                "py_doc": "Class for communication protocol"
                            },
                            "members": {
                                "__init__": {
                                    "type": "func",
                                    "name": "CommProtocol",
                                    "doc": {
                                        "brief": "Construct a new CommProtocol object",
                                        "param": {
                                            "buff_size": "buffer size, default to 1024 bytes"
                                        },
                                        "maixpy": "maix.comm.CommProtocol.__init__",
                                        "maixcdk": "maix.comm.CommProtocol.CommProtocol",
                                        "py_doc": "Construct a new CommProtocol object\n\nArgs:\n  - buff_size: buffer size, default to 1024 bytes\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "buff_size",
                                            "1024"
                                        ]
                                    ],
                                    "ret_type": null,
                                    "static": false,
                                    "def": "CommProtocol(int buff_size = 1024)"
                                },
                                "get_msg": {
                                    "type": "func",
                                    "name": "get_msg",
                                    "doc": {
                                        "brief": "Read data to buffer, and try to decode it as maix.protocol.MSG object",
                                        "return": "decoded data, if nullptr, means no valid frame found.\nAttentioin, delete it after use in C++.",
                                        "maixpy": "maix.comm.CommProtocol.get_msg",
                                        "py_doc": "Read data to buffer, and try to decode it as maix.protocol.MSG object\n\nReturns: decoded data, if nullptr, means no valid frame found.\nAttentioin, delete it after use in C++.\n"
                                    },
                                    "args": [],
                                    "ret_type": "protocol::MSG*",
                                    "static": false,
                                    "def": "protocol::MSG *get_msg()"
                                },
                                "resp_ok": {
                                    "type": "func",
                                    "name": "resp_ok",
                                    "doc": {
                                        "brief": "Send response ok(success) message",
                                        "param": {
                                            "cmd": "CMD value",
                                            "body": "response body, can be null"
                                        },
                                        "return": "encoded data, if nullptr, means error, and the error code is -err.Err.\nAttentioin, delete it after use in C++.",
                                        "maixpy": "maix.comm.CommProtocol.resp_ok",
                                        "py_doc": "Send response ok(success) message\n\nArgs:\n  - cmd: CMD value\n  - body: response body, can be null\n\n\nReturns: encoded data, if nullptr, means error, and the error code is -err.Err.\nAttentioin, delete it after use in C++.\n"
                                    },
                                    "args": [
                                        [
                                            "uint8_t",
                                            "cmd",
                                            null
                                        ],
                                        [
                                            "Bytes *",
                                            "body",
                                            "nullptr"
                                        ]
                                    ],
                                    "ret_type": "err::Err",
                                    "static": false,
                                    "def": "err::Err resp_ok(uint8_t cmd, Bytes *body = nullptr)"
                                },
                                "report": {
                                    "type": "func",
                                    "name": "report",
                                    "doc": {
                                        "brief": "Send report message",
                                        "param": {
                                            "cmd": "CMD value",
                                            "body": "report body, can be null"
                                        },
                                        "return": "encoded data, if nullptr, means error, and the error code is -err.Err.\nAttentioin, delete it after use in C++.",
                                        "maixpy": "maix.comm.CommProtocol.report",
                                        "py_doc": "Send report message\n\nArgs:\n  - cmd: CMD value\n  - body: report body, can be null\n\n\nReturns: encoded data, if nullptr, means error, and the error code is -err.Err.\nAttentioin, delete it after use in C++.\n"
                                    },
                                    "args": [
                                        [
                                            "uint8_t",
                                            "cmd",
                                            null
                                        ],
                                        [
                                            "Bytes *",
                                            "body",
                                            "nullptr"
                                        ]
                                    ],
                                    "ret_type": "err::Err",
                                    "static": false,
                                    "def": "err::Err report(uint8_t cmd, Bytes *body = nullptr)"
                                },
                                "resp_err": {
                                    "type": "func",
                                    "name": "resp_err",
                                    "doc": {
                                        "brief": "Encode response error message to buffer",
                                        "param": {
                                            "cmd": "CMD value",
                                            "code": "error code",
                                            "msg": "error message"
                                        },
                                        "return": "encoded data, if nullptr, means error, and the error code is -err.Err.\nAttentioin, delete it after use in C++.",
                                        "maixpy": "maix.comm.CommProtocol.resp_err",
                                        "py_doc": "Encode response error message to buffer\n\nArgs:\n  - cmd: CMD value\n  - code: error code\n  - msg: error message\n\n\nReturns: encoded data, if nullptr, means error, and the error code is -err.Err.\nAttentioin, delete it after use in C++.\n"
                                    },
                                    "args": [
                                        [
                                            "uint8_t",
                                            "cmd",
                                            null
                                        ],
                                        [
                                            "err::Err",
                                            "code",
                                            null
                                        ],
                                        [
                                            "const std::string &",
                                            "msg",
                                            null
                                        ]
                                    ],
                                    "ret_type": "err::Err",
                                    "static": false,
                                    "def": "err::Err resp_err(uint8_t cmd, err::Err code, const std::string &msg)"
                                }
                            },
                            "def": "class CommProtocol"
                        }
                    },
                    "auto_add": true
                },
                "thread": {
                    "type": "module",
                    "doc": {
                        "brief": "maix.thread module"
                    },
                    "members": {
                        "Thread": {
                            "type": "class",
                            "name": "Thread",
                            "doc": {
                                "brief": "thread class",
                                "maixpy": "maix.thread.Thread",
                                "py_doc": "thread class"
                            },
                            "members": {
                                "__init__": {
                                    "type": "func",
                                    "name": "Thread",
                                    "doc": {
                                        "brief": "create thread",
                                        "param": {
                                            "func": "direction [in], thread function, one `args` parameter, void* type, no return value",
                                            "args": "direction [in], thread function parameter"
                                        },
                                        "maixpy": "maix.thread.Thread.__init__",
                                        "maixcdk": "maix.thread.Thread.Thread",
                                        "py_doc": "create thread\n\nArgs:\n  - func: direction [in], thread function, one `args` parameter, void* type, no return value\n  - args: direction [in], thread function parameter\n"
                                    },
                                    "args": [
                                        [
                                            "std::function<void(void *)>",
                                            "func",
                                            null
                                        ],
                                        [
                                            "void *",
                                            "args",
                                            "nullptr"
                                        ]
                                    ],
                                    "ret_type": null,
                                    "static": false,
                                    "def": "Thread(std::function<void(void *)> func, void *args = nullptr)"
                                },
                                "join": {
                                    "type": "func",
                                    "name": "join",
                                    "doc": {
                                        "brief": "wait thread exit",
                                        "maixpy": "maix.thread.Thread.join",
                                        "py_doc": "wait thread exit"
                                    },
                                    "args": [],
                                    "ret_type": "void",
                                    "static": false,
                                    "def": "void join()"
                                },
                                "detach": {
                                    "type": "func",
                                    "name": "detach",
                                    "doc": {
                                        "brief": "detach thread",
                                        "maixpy": "maix.thread.Thread.detach",
                                        "py_doc": "detach thread"
                                    },
                                    "args": [],
                                    "ret_type": "void",
                                    "static": false,
                                    "def": "void detach()"
                                },
                                "joinable": {
                                    "type": "func",
                                    "name": "joinable",
                                    "doc": {
                                        "brief": "Check if thread is joinable",
                                        "return": "true if thread is joinable",
                                        "maixpy": "maix.thread.Thread.joinable",
                                        "py_doc": "Check if thread is joinable\n\nReturns: true if thread is joinable\n"
                                    },
                                    "args": [],
                                    "ret_type": "bool",
                                    "static": false,
                                    "def": "bool joinable()"
                                }
                            },
                            "def": "class Thread"
                        }
                    },
                    "auto_add": true
                },
                "fs": {
                    "type": "module",
                    "doc": {
                        "brief": "maix.fs module"
                    },
                    "members": {
                        "SEEK": {
                            "type": "enum",
                            "name": "SEEK",
                            "doc": {
                                "brief": "SEEK enums",
                                "maixpy": "maix.fs.SEEK",
                                "py_doc": "SEEK enums"
                            },
                            "values": [
                                [
                                    "SEEK_SET",
                                    "0",
                                    "Seek from beginning of file."
                                ],
                                [
                                    "SEEK_CUR",
                                    "1",
                                    "Seek from current position."
                                ],
                                [
                                    "SEEK_END",
                                    "2",
                                    "Seek from end of file."
                                ]
                            ],
                            "def": "enum SEEK\n    {\n        SEEK_SET = 0,  // Seek from beginning of file.\n        SEEK_CUR = 1,  // Seek from current position.\n        SEEK_END = 2,  // Seek from end of file.\n    }"
                        },
                        "isabs": {
                            "type": "func",
                            "name": "isabs",
                            "doc": {
                                "brief": "Check if the path is absolute path",
                                "param": {
                                    "path": "path to check"
                                },
                                "return": "true if path is absolute path",
                                "maixpy": "maix.fs.isabs",
                                "py_doc": "Check if the path is absolute path\n\nArgs:\n  - path: path to check\n\n\nReturns: true if path is absolute path\n"
                            },
                            "args": [
                                [
                                    "const std::string &",
                                    "path",
                                    null
                                ]
                            ],
                            "ret_type": "bool",
                            "static": false,
                            "def": "bool isabs(const std::string &path)"
                        },
                        "isdir": {
                            "type": "func",
                            "name": "isdir",
                            "doc": {
                                "brief": "Check if the path is a directory, if not exist, throw exception",
                                "param": {
                                    "path": "path to check"
                                },
                                "return": "true if path is a directory",
                                "maixpy": "maix.fs.isdir",
                                "py_doc": "Check if the path is a directory, if not exist, throw exception\n\nArgs:\n  - path: path to check\n\n\nReturns: true if path is a directory\n"
                            },
                            "args": [
                                [
                                    "const std::string &",
                                    "path",
                                    null
                                ]
                            ],
                            "ret_type": "bool",
                            "static": false,
                            "def": "bool isdir(const std::string &path)"
                        },
                        "isfile": {
                            "type": "func",
                            "name": "isfile",
                            "doc": {
                                "brief": "Check if the path is a file, if not exist, throw exception",
                                "param": {
                                    "path": "path to check"
                                },
                                "return": "true if path is a file",
                                "maixpy": "maix.fs.isfile",
                                "py_doc": "Check if the path is a file, if not exist, throw exception\n\nArgs:\n  - path: path to check\n\n\nReturns: true if path is a file\n"
                            },
                            "args": [
                                [
                                    "const std::string &",
                                    "path",
                                    null
                                ]
                            ],
                            "ret_type": "bool",
                            "static": false,
                            "def": "bool isfile(const std::string &path)"
                        },
                        "islink": {
                            "type": "func",
                            "name": "islink",
                            "doc": {
                                "brief": "Check if the path is a link, if not exist, throw exception",
                                "param": {
                                    "path": "path to check"
                                },
                                "return": "true if path is a link",
                                "maixpy": "maix.fs.islink",
                                "py_doc": "Check if the path is a link, if not exist, throw exception\n\nArgs:\n  - path: path to check\n\n\nReturns: true if path is a link\n"
                            },
                            "args": [
                                [
                                    "const std::string &",
                                    "path",
                                    null
                                ]
                            ],
                            "ret_type": "bool",
                            "static": false,
                            "def": "bool islink(const std::string &path)"
                        },
                        "exists": {
                            "type": "func",
                            "name": "exists",
                            "doc": {
                                "brief": "Check if the path exists",
                                "param": {
                                    "path": "path to check"
                                },
                                "return": "true if path exists",
                                "maixpy": "maix.fs.exists",
                                "py_doc": "Check if the path exists\n\nArgs:\n  - path: path to check\n\n\nReturns: true if path exists\n"
                            },
                            "args": [
                                [
                                    "const std::string &",
                                    "path",
                                    null
                                ]
                            ],
                            "ret_type": "bool",
                            "static": false,
                            "def": "bool exists(const std::string &path)"
                        },
                        "mkdir": {
                            "type": "func",
                            "name": "mkdir",
                            "doc": {
                                "brief": "Create a directory recursively",
                                "param": {
                                    "path": "path to create",
                                    "exist_ok": "if true, also return true if directory already exists",
                                    "recursive": "if true, create directory recursively, otherwise, only create one directory, default is true"
                                },
                                "return": "err::ERR_NONE(err.Err.ERR_NONE in MaixPy) if success, other error code if failed",
                                "maixpy": "maix.fs.mkdir",
                                "py_doc": "Create a directory recursively\n\nArgs:\n  - path: path to create\n  - exist_ok: if true, also return true if directory already exists\n  - recursive: if true, create directory recursively, otherwise, only create one directory, default is true\n\n\nReturns: err::ERR_NONE(err.Err.ERR_NONE in MaixPy) if success, other error code if failed\n"
                            },
                            "args": [
                                [
                                    "const std::string &",
                                    "path",
                                    null
                                ],
                                [
                                    "bool",
                                    "exist_ok",
                                    "true"
                                ],
                                [
                                    "bool",
                                    "recursive",
                                    "true"
                                ]
                            ],
                            "ret_type": "err::Err",
                            "static": false,
                            "def": "err::Err mkdir(const std::string &path, bool exist_ok = true, bool recursive = true)"
                        },
                        "rmdir": {
                            "type": "func",
                            "name": "rmdir",
                            "doc": {
                                "brief": "Remove a directory",
                                "param": {
                                    "path": "path to remove",
                                    "recursive": "if true, remove directory recursively, otherwise, only remove empty directory, default is false"
                                },
                                "return": "err::ERR_NONE(err.Err.ERR_NONE in MaixPy) if success, other error code if failed",
                                "maixpy": "maix.fs.rmdir",
                                "py_doc": "Remove a directory\n\nArgs:\n  - path: path to remove\n  - recursive: if true, remove directory recursively, otherwise, only remove empty directory, default is false\n\n\nReturns: err::ERR_NONE(err.Err.ERR_NONE in MaixPy) if success, other error code if failed\n"
                            },
                            "args": [
                                [
                                    "const std::string &",
                                    "path",
                                    null
                                ],
                                [
                                    "bool",
                                    "recursive",
                                    "false"
                                ]
                            ],
                            "ret_type": "err::Err",
                            "static": false,
                            "def": "err::Err rmdir(const std::string &path, bool recursive = false)"
                        },
                        "remove": {
                            "type": "func",
                            "name": "remove",
                            "doc": {
                                "brief": "Remove a file",
                                "param": {
                                    "path": "path to remove"
                                },
                                "return": "err::ERR_NONE(err.Err.ERR_NONE in MaixPy) if success, other error code if failed",
                                "maixpy": "maix.fs.remove",
                                "py_doc": "Remove a file\n\nArgs:\n  - path: path to remove\n\n\nReturns: err::ERR_NONE(err.Err.ERR_NONE in MaixPy) if success, other error code if failed\n"
                            },
                            "args": [
                                [
                                    "const std::string &",
                                    "path",
                                    null
                                ]
                            ],
                            "ret_type": "err::Err",
                            "static": false,
                            "def": "err::Err remove(const std::string &path)"
                        },
                        "rename": {
                            "type": "func",
                            "name": "rename",
                            "doc": {
                                "brief": "Rename a file or directory",
                                "param": {
                                    "src": "source path",
                                    "dst": "destination path, if destination dirs not exist, will auto create"
                                },
                                "return": "err::ERR_NONE(err.Err.ERR_NONE in MaixPy) if success, other error code if failed",
                                "maixpy": "maix.fs.rename",
                                "py_doc": "Rename a file or directory\n\nArgs:\n  - src: source path\n  - dst: destination path, if destination dirs not exist, will auto create\n\n\nReturns: err::ERR_NONE(err.Err.ERR_NONE in MaixPy) if success, other error code if failed\n"
                            },
                            "args": [
                                [
                                    "const std::string &",
                                    "src",
                                    null
                                ],
                                [
                                    "const std::string &",
                                    "dst",
                                    null
                                ]
                            ],
                            "ret_type": "err::Err",
                            "static": false,
                            "def": "err::Err rename(const std::string &src, const std::string &dst)"
                        },
                        "getsize": {
                            "type": "func",
                            "name": "getsize",
                            "doc": {
                                "brief": "Get file size",
                                "param": {
                                    "path": "path to get size"
                                },
                                "return": "file size if success, -err::Err code if failed",
                                "maixpy": "maix.fs.getsize",
                                "py_doc": "Get file size\n\nArgs:\n  - path: path to get size\n\n\nReturns: file size if success, -err::Err code if failed\n"
                            },
                            "args": [
                                [
                                    "const std::string &",
                                    "path",
                                    null
                                ]
                            ],
                            "ret_type": "int",
                            "static": false,
                            "def": "int getsize(const std::string &path)"
                        },
                        "dirname": {
                            "type": "func",
                            "name": "dirname",
                            "doc": {
                                "brief": "Get directory name of path",
                                "param": {
                                    "path": "path to get dirname"
                                },
                                "return": "dirname if success, empty string if failed",
                                "maixpy": "maix.fs.dirname",
                                "py_doc": "Get directory name of path\n\nArgs:\n  - path: path to get dirname\n\n\nReturns: dirname if success, empty string if failed\n"
                            },
                            "args": [
                                [
                                    "const std::string &",
                                    "path",
                                    null
                                ]
                            ],
                            "ret_type": "std::string",
                            "static": false,
                            "def": "std::string dirname(const std::string &path)"
                        },
                        "basename": {
                            "type": "func",
                            "name": "basename",
                            "doc": {
                                "brief": "Get base name of path",
                                "param": {
                                    "path": "path to get basename"
                                },
                                "return": "basename if success, empty string if failed",
                                "maixpy": "maix.fs.basename",
                                "py_doc": "Get base name of path\n\nArgs:\n  - path: path to get basename\n\n\nReturns: basename if success, empty string if failed\n"
                            },
                            "args": [
                                [
                                    "const std::string &",
                                    "path",
                                    null
                                ]
                            ],
                            "ret_type": "std::string",
                            "static": false,
                            "def": "std::string basename(const std::string &path)"
                        },
                        "abspath": {
                            "type": "func",
                            "name": "abspath",
                            "doc": {
                                "brief": "Get absolute path",
                                "param": {
                                    "path": "path to get absolute path"
                                },
                                "return": "absolute path if success, empty string if failed",
                                "maixpy": "maix.fs.abspath",
                                "py_doc": "Get absolute path\n\nArgs:\n  - path: path to get absolute path\n\n\nReturns: absolute path if success, empty string if failed\n"
                            },
                            "args": [
                                [
                                    "const std::string &",
                                    "path",
                                    null
                                ]
                            ],
                            "ret_type": "std::string",
                            "static": false,
                            "def": "std::string abspath(const std::string &path)"
                        },
                        "getcwd": {
                            "type": "func",
                            "name": "getcwd",
                            "doc": {
                                "brief": "Get current working directory",
                                "return": "current working directory absolute path",
                                "maixpy": "maix.fs.getcwd",
                                "py_doc": "Get current working directory\n\nReturns: current working directory absolute path\n"
                            },
                            "args": [],
                            "ret_type": "std::string",
                            "static": false,
                            "def": "std::string getcwd()"
                        },
                        "realpath": {
                            "type": "func",
                            "name": "realpath",
                            "doc": {
                                "brief": "Get realpath of path",
                                "param": {
                                    "path": "path to get realpath"
                                },
                                "return": "realpath if success, empty string if failed",
                                "maixpy": "maix.fs.realpath",
                                "py_doc": "Get realpath of path\n\nArgs:\n  - path: path to get realpath\n\n\nReturns: realpath if success, empty string if failed\n"
                            },
                            "args": [
                                [
                                    "const std::string &",
                                    "path",
                                    null
                                ]
                            ],
                            "ret_type": "std::string",
                            "static": false,
                            "def": "std::string realpath(const std::string &path)"
                        },
                        "splitext": {
                            "type": "func",
                            "name": "splitext",
                            "doc": {
                                "brief": "Get file extension",
                                "param": {
                                    "path": "path to get extension"
                                },
                                "return": "extension if success, empty string if failed",
                                "maixpy": "maix.fs.splitext",
                                "py_doc": "Get file extension\n\nArgs:\n  - path: path to get extension\n\n\nReturns: extension if success, empty string if failed\n"
                            },
                            "args": [
                                [
                                    "const std::string &",
                                    "path",
                                    null
                                ]
                            ],
                            "ret_type": "std::string",
                            "static": false,
                            "def": "std::string splitext(const std::string &path)"
                        },
                        "listdir": {
                            "type": "func",
                            "name": "listdir",
                            "doc": {
                                "brief": "List files in directory",
                                "param": {
                                    "path": "path to list",
                                    "recursive": "if true, list recursively, otherwise, only list current directory, default is false",
                                    "full_path": "if true, return full path, otherwise, only return basename, default is false"
                                },
                                "return": "files list if success, nullptr if failed",
                                "maixpy": "maix.fs.listdir",
                                "py_doc": "List files in directory\n\nArgs:\n  - path: path to list\n  - recursive: if true, list recursively, otherwise, only list current directory, default is false\n  - full_path: if true, return full path, otherwise, only return basename, default is false\n\n\nReturns: files list if success, nullptr if failed\n"
                            },
                            "args": [
                                [
                                    "const std::string &",
                                    "path",
                                    null
                                ],
                                [
                                    "bool",
                                    "recursive",
                                    "false"
                                ],
                                [
                                    "bool",
                                    "full_path",
                                    "false"
                                ]
                            ],
                            "ret_type": "std::vector<std::string>*",
                            "static": false,
                            "def": "std::vector<std::string> *listdir(const std::string &path, bool recursive = false, bool full_path = false)"
                        },
                        "File": {
                            "type": "class",
                            "name": "File",
                            "doc": {
                                "brief": "File read write ops",
                                "maixpy": "maix.fs.File",
                                "py_doc": "File read write ops"
                            },
                            "members": {
                                "open": {
                                    "type": "func",
                                    "name": "open",
                                    "doc": {
                                        "brief": "Open a file",
                                        "param": {
                                            "path": "path to open",
                                            "mode": "open mode, support \"r\", \"w\", \"a\", \"r+\", \"w+\", \"a+\", \"rb\", \"wb\", \"ab\", \"rb+\", \"wb+\", \"ab+\""
                                        },
                                        "return": "err::ERR_NONE(err.Err.ERR_NONE in MaixPy) if success, other error code if failed",
                                        "maixpy": "maix.fs.File.open",
                                        "py_doc": "Open a file\n\nArgs:\n  - path: path to open\n  - mode: open mode, support \"r\", \"w\", \"a\", \"r+\", \"w+\", \"a+\", \"rb\", \"wb\", \"ab\", \"rb+\", \"wb+\", \"ab+\"\n\n\nReturns: err::ERR_NONE(err.Err.ERR_NONE in MaixPy) if success, other error code if failed\n"
                                    },
                                    "args": [
                                        [
                                            "const std::string &",
                                            "path",
                                            null
                                        ],
                                        [
                                            "const std::string &",
                                            "mode",
                                            null
                                        ]
                                    ],
                                    "ret_type": "err::Err",
                                    "static": false,
                                    "def": "err::Err open(const std::string &path, const std::string &mode)"
                                },
                                "close": {
                                    "type": "func",
                                    "name": "close",
                                    "doc": {
                                        "brief": "Close a file",
                                        "maixpy": "maix.fs.File.close",
                                        "py_doc": "Close a file"
                                    },
                                    "args": [],
                                    "ret_type": "void",
                                    "static": false,
                                    "def": "void close()"
                                },
                                "read": {
                                    "type": "func",
                                    "name": "read",
                                    "doc": {
                                        "brief": "Read data from file API2",
                                        "param": {
                                            "size": "max read size"
                                        },
                                        "return": "bytes data if success(need delete manually in C/C++), nullptr if failed",
                                        "maixpy": "maix.fs.File.read",
                                        "py_doc": "Read data from file API2\n\nArgs:\n  - size: max read size\n\n\nReturns: bytes data if success(need delete manually in C/C++), nullptr if failed\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "size",
                                            null
                                        ]
                                    ],
                                    "ret_type": "std::vector<uint8_t>*",
                                    "static": false,
                                    "def": "std::vector<uint8_t> *read(int size)"
                                },
                                "readline": {
                                    "type": "func",
                                    "name": "readline",
                                    "doc": {
                                        "brief": "Read line from file",
                                        "return": "line if success, empty string if failed. You need to delete the returned object manually in C/C++.",
                                        "maixpy": "maix.fs.File.readline",
                                        "py_doc": "Read line from file\n\nReturns: line if success, empty string if failed. You need to delete the returned object manually in C/C++.\n"
                                    },
                                    "args": [],
                                    "ret_type": "std::string*",
                                    "static": false,
                                    "def": "std::string *readline()"
                                },
                                "write": {
                                    "type": "func",
                                    "name": "write",
                                    "doc": {
                                        "brief": "Write data to file API2",
                                        "param": {
                                            "buf": "buffer to write"
                                        },
                                        "return": "write size if success, -err::Err code if failed",
                                        "maixpy": "maix.fs.File.write",
                                        "py_doc": "Write data to file API2\n\nArgs:\n  - buf: buffer to write\n\n\nReturns: write size if success, -err::Err code if failed\n"
                                    },
                                    "args": [
                                        [
                                            "const std::vector<uint8_t> &",
                                            "buf",
                                            null
                                        ]
                                    ],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int write(const std::vector<uint8_t> &buf)"
                                },
                                "seek": {
                                    "type": "func",
                                    "name": "seek",
                                    "doc": {
                                        "brief": "Seek file position",
                                        "param": {
                                            "offset": "offset to seek",
                                            "whence": "@see maix.fs.SEEK"
                                        },
                                        "return": "new position if success, -err::Err code if failed",
                                        "maixpy": "maix.fs.File.seek",
                                        "py_doc": "Seek file position\n\nArgs:\n  - offset: offset to seek\n  - whence: @see maix.fs.SEEK\n\n\nReturns: new position if success, -err::Err code if failed\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "offset",
                                            null
                                        ],
                                        [
                                            "int",
                                            "whence",
                                            null
                                        ]
                                    ],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int seek(int offset, int whence)"
                                },
                                "tell": {
                                    "type": "func",
                                    "name": "tell",
                                    "doc": {
                                        "brief": "Get file position",
                                        "return": "file position if success, -err::Err code if failed",
                                        "maixpy": "maix.fs.File.tell",
                                        "py_doc": "Get file position\n\nReturns: file position if success, -err::Err code if failed\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int tell()"
                                },
                                "flush": {
                                    "type": "func",
                                    "name": "flush",
                                    "doc": {
                                        "brief": "Flush file",
                                        "return": "err::ERR_NONE(err.Err.ERR_NONE in MaixPy) if success, other error code if failed",
                                        "maixpy": "maix.fs.File.flush",
                                        "py_doc": "Flush file\n\nReturns: err::ERR_NONE(err.Err.ERR_NONE in MaixPy) if success, other error code if failed\n"
                                    },
                                    "args": [],
                                    "ret_type": "err::Err",
                                    "static": false,
                                    "def": "err::Err flush()"
                                }
                            },
                            "def": "class File"
                        },
                        "open": {
                            "type": "func",
                            "name": "open",
                            "doc": {
                                "brief": "Open a file, and return a File object",
                                "param": {
                                    "path": "path to open",
                                    "mode": "open mode, support \"r\", \"w\", \"a\", \"r+\", \"w+\", \"a+\", \"rb\", \"wb\", \"ab\", \"rb+\", \"wb+\", \"ab+\""
                                },
                                "return": "File object if success(need to delete object manually in C/C++), nullptr if failed",
                                "maixpy": "maix.fs.open",
                                "py_doc": "Open a file, and return a File object\n\nArgs:\n  - path: path to open\n  - mode: open mode, support \"r\", \"w\", \"a\", \"r+\", \"w+\", \"a+\", \"rb\", \"wb\", \"ab\", \"rb+\", \"wb+\", \"ab+\"\n\n\nReturns: File object if success(need to delete object manually in C/C++), nullptr if failed\n"
                            },
                            "args": [
                                [
                                    "const std::string &",
                                    "path",
                                    null
                                ],
                                [
                                    "const std::string &",
                                    "mode",
                                    null
                                ]
                            ],
                            "ret_type": "fs::File*",
                            "static": false,
                            "def": "fs::File *open(const std::string &path, const std::string &mode)"
                        },
                        "tempdir": {
                            "type": "func",
                            "name": "tempdir",
                            "doc": {
                                "brief": "Get temp files directory",
                                "return": "temp files directory",
                                "maixpy": "maix.fs.tempdir",
                                "py_doc": "Get temp files directory\n\nReturns: temp files directory\n"
                            },
                            "args": [],
                            "ret_type": "std::string",
                            "static": false,
                            "def": "std::string tempdir()"
                        }
                    },
                    "auto_add": true
                },
                "sys": {
                    "type": "module",
                    "doc": {
                        "brief": "maix.sys module"
                    },
                    "members": {
                        "os_version()": {
                            "type": "func",
                            "name": "os_version",
                            "doc": {
                                "brief": "Get system version",
                                "return": "version string, e.g. \"2024.4.1-13af4b\"",
                                "maixpy": "maix.sys.os_version()",
                                "py_doc": "Get system version\n\nReturns: version string, e.g. \"2024.4.1-13af4b\"\n"
                            },
                            "args": [],
                            "ret_type": "std::string",
                            "static": false,
                            "def": "std::string os_version()"
                        },
                        "device_name()": {
                            "type": "func",
                            "name": "device_name",
                            "doc": {
                                "brief": "Get device name",
                                "return": "device name, e.g. \"MaixCAM\"",
                                "maixpy": "maix.sys.device_name()",
                                "py_doc": "Get device name\n\nReturns: device name, e.g. \"MaixCAM\"\n"
                            },
                            "args": [],
                            "ret_type": "std::string",
                            "static": false,
                            "def": "std::string device_name()"
                        },
                        "host_name()": {
                            "type": "func",
                            "name": "host_name",
                            "doc": {
                                "brief": "Get host name",
                                "return": "host name, e.g. \"maixcam-2f9f\"",
                                "maixpy": "maix.sys.host_name()",
                                "py_doc": "Get host name\n\nReturns: host name, e.g. \"maixcam-2f9f\"\n"
                            },
                            "args": [],
                            "ret_type": "std::string",
                            "static": false,
                            "def": "std::string host_name()"
                        },
                        "host_domain()": {
                            "type": "func",
                            "name": "host_domain",
                            "doc": {
                                "brief": "Get host domain",
                                "return": "host domain, e.g. \"maixcam-2f9f.local\"",
                                "maixpy": "maix.sys.host_domain()",
                                "py_doc": "Get host domain\n\nReturns: host domain, e.g. \"maixcam-2f9f.local\"\n"
                            },
                            "args": [],
                            "ret_type": "std::string",
                            "static": false,
                            "def": "std::string host_domain()"
                        },
                        "ip_address()": {
                            "type": "func",
                            "name": "ip_address",
                            "doc": {
                                "brief": "Get ip address",
                                "return": "ip address, dict type, e.g. {\"eth0\": \"192.168.0.195\", \"wlan0\": \"192.168.0.123\", \"usb0\": \"10.47.159.1\"}",
                                "maixpy": "maix.sys.ip_address()",
                                "py_doc": "Get ip address\n\nReturns: ip address, dict type, e.g. {\"eth0\": \"192.168.0.195\", \"wlan0\": \"192.168.0.123\", \"usb0\": \"10.47.159.1\"}\n"
                            },
                            "args": [],
                            "ret_type": "std::map<std::string, std::string>",
                            "static": false,
                            "def": "std::map<std::string, std::string> ip_address()"
                        },
                        "mac_address()": {
                            "type": "func",
                            "name": "mac_address",
                            "doc": {
                                "brief": "Get mac address",
                                "return": "mac address, dict type, e.g. {\"eth0\": \"00:0c:29:2f:9f:00\", \"wlan0\": \"00:0c:29:2f:9f:01\", \"usb0\": \"00:0c:29:2f:9f:02\"}",
                                "maixpy": "maix.sys.mac_address()",
                                "py_doc": "Get mac address\n\nReturns: mac address, dict type, e.g. {\"eth0\": \"00:0c:29:2f:9f:00\", \"wlan0\": \"00:0c:29:2f:9f:01\", \"usb0\": \"00:0c:29:2f:9f:02\"}\n"
                            },
                            "args": [],
                            "ret_type": "std::map<std::string, std::string>",
                            "static": false,
                            "def": "std::map<std::string, std::string> mac_address()"
                        },
                        "device_key()": {
                            "type": "func",
                            "name": "device_key",
                            "doc": {
                                "brief": "Get device key, can be unique id of device",
                                "return": "device key, 32 bytes hex string, e.g. \"1234567890abcdef1234567890abcdef\"",
                                "maixpy": "maix.sys.device_key()",
                                "py_doc": "Get device key, can be unique id of device\n\nReturns: device key, 32 bytes hex string, e.g. \"1234567890abcdef1234567890abcdef\"\n"
                            },
                            "args": [],
                            "ret_type": "std::string",
                            "static": false,
                            "def": "std::string device_key()"
                        },
                        "memory_info()": {
                            "type": "func",
                            "name": "memory_info",
                            "doc": {
                                "brief": "Get memory info",
                                "return": "memory info, dict type, e.g. {\"total\": 1024, \"used\": 512, \"hw_total\": 256*1024*1024}\ntotal: total memory size in Byte.\nused: used memory size in Byte.\nhw_total: total memory size in Byte of hardware, the total <= hw_total\uff0c\nOS kernel may reserve some memory for some hardware like camera, npu, display etc.",
                                "maixpy": "maix.sys.memory_info()",
                                "py_doc": "Get memory info\n\nReturns: memory info, dict type, e.g. {\"total\": 1024, \"used\": 512, \"hw_total\": 256*1024*1024}\ntotal: total memory size in Byte.\nused: used memory size in Byte.\nhw_total: total memory size in Byte of hardware, the total <= hw_total\uff0c\nOS kernel may reserve some memory for some hardware like camera, npu, display etc.\n"
                            },
                            "args": [],
                            "ret_type": "std::map<std::string, int>",
                            "static": false,
                            "def": "std::map<std::string, int> memory_info()"
                        },
                        "bytes_to_human(1234)": {
                            "type": "func",
                            "name": "bytes_to_human",
                            "doc": {
                                "brief": "Bytes to human readable string",
                                "param": {
                                    "bytes:": "bytes size\uff0ce.g. 1234B = 1234/1024 = 1.205 KB",
                                    "precision:": "decimal precision, default 2",
                                    "base:": "base number, default 1024",
                                    "unit:": "unit string, e.g. \"B\"",
                                    "sep:": "separator string, e.g. \" \""
                                },
                                "return": "human readable string, e.g. \"1.21 KB\"",
                                "maixpy": "maix.sys.bytes_to_human(1234)",
                                "py_doc": "Bytes to human readable string\n\nArgs:\n  - bytes:: bytes size\uff0ce.g. 1234B = 1234/1024 = 1.205 KB\n  - precision:: decimal precision, default 2\n  - base:: base number, default 1024\n  - unit:: unit string, e.g. \"B\"\n  - sep:: separator string, e.g. \" \"\n\n\nReturns: human readable string, e.g. \"1.21 KB\"\n"
                            },
                            "args": [
                                [
                                    "unsigned long long",
                                    "bytes",
                                    null
                                ],
                                [
                                    "int",
                                    "precision",
                                    "2"
                                ],
                                [
                                    "int",
                                    "base",
                                    "1024"
                                ],
                                [
                                    "const std::string &",
                                    "unit",
                                    "\"B\""
                                ],
                                [
                                    "const std::string &",
                                    "sep",
                                    "\" \""
                                ]
                            ],
                            "ret_type": "std::string",
                            "static": false,
                            "def": "std::string bytes_to_human(unsigned long long bytes, int precision = 2, int base = 1024, const std::string &unit = \"B\", const std::string &sep = \" \")"
                        },
                        "cpu_freq()": {
                            "type": "func",
                            "name": "cpu_freq",
                            "doc": {
                                "brief": "Get CPU frequency",
                                "return": "CPU frequency, dict type, e.g. {\"cpu0\": 1000000000, \"cpu1\": 1000000000}",
                                "maixpy": "maix.sys.cpu_freq()",
                                "py_doc": "Get CPU frequency\n\nReturns: CPU frequency, dict type, e.g. {\"cpu0\": 1000000000, \"cpu1\": 1000000000}\n"
                            },
                            "args": [],
                            "ret_type": "std::map<std::string, unsigned long>",
                            "static": false,
                            "def": "std::map<std::string, unsigned long> cpu_freq()"
                        },
                        "cpu_temp()": {
                            "type": "func",
                            "name": "cpu_temp",
                            "doc": {
                                "brief": "Get CPU temperature",
                                "return": "CPU temperature, unit dgree, dict type, e.g. {\"cpu\": 50.0, \"cpu0\": 50, \"cpu1\": 50}",
                                "maixpy": "maix.sys.cpu_temp()",
                                "py_doc": "Get CPU temperature\n\nReturns: CPU temperature, unit dgree, dict type, e.g. {\"cpu\": 50.0, \"cpu0\": 50, \"cpu1\": 50}\n"
                            },
                            "args": [],
                            "ret_type": "std::map<std::string, float>",
                            "static": false,
                            "def": "std::map<std::string, float> cpu_temp()"
                        },
                        "cpu_usage()": {
                            "type": "func",
                            "name": "cpu_usage",
                            "doc": {
                                "brief": "Get CPU usage",
                                "return": "CPU usage, dict type, e.g. {\"cpu\": 50.0, \"cpu0\": 50, \"cpu1\": 50}",
                                "maixpy": "maix.sys.cpu_usage()",
                                "py_doc": "Get CPU usage\n\nReturns: CPU usage, dict type, e.g. {\"cpu\": 50.0, \"cpu0\": 50, \"cpu1\": 50}\n"
                            },
                            "args": [],
                            "ret_type": "std::map<std::string, float>",
                            "static": false,
                            "def": "std::map<std::string, float> cpu_usage()"
                        },
                        "npu_freq()": {
                            "type": "func",
                            "name": "npu_freq",
                            "doc": {
                                "brief": "Get NPU frequency",
                                "return": "NPU frequency, dict type, e.g. {\"npu0\": 500000000}",
                                "maixpy": "maix.sys.npu_freq()",
                                "py_doc": "Get NPU frequency\n\nReturns: NPU frequency, dict type, e.g. {\"npu0\": 500000000}\n"
                            },
                            "args": [],
                            "ret_type": "std::map<std::string, unsigned long>",
                            "static": false,
                            "def": "std::map<std::string, unsigned long> npu_freq()"
                        },
                        "disk_usage()": {
                            "type": "func",
                            "name": "disk_usage",
                            "doc": {
                                "brief": "Get disk usage",
                                "param": {
                                    "path:": "disk path, default \"/\""
                                },
                                "return": "disk usage, dict type, e.g. {\"total\": 1024, \"used\": 512}",
                                "maixpy": "maix.sys.disk_usage()",
                                "py_doc": "Get disk usage\n\nArgs:\n  - path:: disk path, default \"/\"\n\n\nReturns: disk usage, dict type, e.g. {\"total\": 1024, \"used\": 512}\n"
                            },
                            "args": [
                                [
                                    "const std::string &",
                                    "path",
                                    "\"/\""
                                ]
                            ],
                            "ret_type": "std::map<std::string, unsigned long long>",
                            "static": false,
                            "def": "std::map<std::string, unsigned long long> disk_usage(const std::string &path = \"/\")"
                        },
                        "disk_partitions()": {
                            "type": "func",
                            "name": "disk_partitions",
                            "doc": {
                                "brief": "Get disk partition and mount point info",
                                "param": {
                                    "only_disk": "only return real disk, tempfs sysfs etc. not return, default true."
                                },
                                "return": "disk partition and mount point info, list type, e.g. [{\"device\": \"/dev/mmcblk0p1\", \"mountpoint\": \"/mnt/sdcard\", \"fstype\": \"vfat\"}]",
                                "maixpy": "maix.sys.disk_partitions()",
                                "py_doc": "Get disk partition and mount point info\n\nArgs:\n  - only_disk: only return real disk, tempfs sysfs etc. not return, default true.\n\n\nReturns: disk partition and mount point info, list type, e.g. [{\"device\": \"/dev/mmcblk0p1\", \"mountpoint\": \"/mnt/sdcard\", \"fstype\": \"vfat\"}]\n"
                            },
                            "args": [
                                [
                                    "bool",
                                    "only_disk",
                                    "true"
                                ]
                            ],
                            "ret_type": "std::vector<std::map<std::string, std::string>>",
                            "static": false,
                            "def": "std::vector<std::map<std::string, std::string>> disk_partitions(bool only_disk = true)"
                        }
                    },
                    "auto_add": true
                },
                "time": {
                    "type": "module",
                    "doc": {
                        "brief": "maix.time module"
                    },
                    "members": {
                        "time": {
                            "type": "func",
                            "name": "time",
                            "doc": {
                                "brief": "Get current time in s",
                                "return": "current time in s, double type",
                                "maixpy": "maix.time.time",
                                "py_doc": "Get current time in s\n\nReturns: current time in s, double type\n"
                            },
                            "args": [],
                            "ret_type": "double",
                            "static": false,
                            "def": "double time()"
                        },
                        "time_ms": {
                            "type": "func",
                            "name": "time_ms",
                            "doc": {
                                "brief": "Get current time in ms",
                                "return": "current time in ms, uint64_t type",
                                "maixpy": "maix.time.time_ms",
                                "py_doc": "Get current time in ms\n\nReturns: current time in ms, uint64_t type\n"
                            },
                            "args": [],
                            "ret_type": "uint64_t",
                            "static": false,
                            "def": "uint64_t time_ms()"
                        },
                        "time_s": {
                            "type": "func",
                            "name": "time_s",
                            "doc": {
                                "brief": "Get current time in s",
                                "return": "current time in s, uint64_t type",
                                "maixpy": "maix.time.time_s",
                                "py_doc": "Get current time in s\n\nReturns: current time in s, uint64_t type\n"
                            },
                            "args": [],
                            "ret_type": "uint64_t",
                            "static": false,
                            "def": "uint64_t time_s()"
                        },
                        "time_us": {
                            "type": "func",
                            "name": "time_us",
                            "doc": {
                                "brief": "Get current time in us",
                                "return": "current time in us, uint64_t type",
                                "maixpy": "maix.time.time_us",
                                "py_doc": "Get current time in us\n\nReturns: current time in us, uint64_t type\n"
                            },
                            "args": [],
                            "ret_type": "uint64_t",
                            "static": false,
                            "def": "uint64_t time_us()"
                        },
                        "time_diff": {
                            "type": "func",
                            "name": "time_diff",
                            "doc": {
                                "brief": "Calculate time difference",
                                "param": {
                                    "last": "last time",
                                    "now": "current time"
                                },
                                "return": "time difference",
                                "maixpy": "maix.time.time_diff",
                                "py_doc": "Calculate time difference\n\nArgs:\n  - last: last time\n  - now: current time\n\n\nReturns: time difference\n"
                            },
                            "args": [
                                [
                                    "double",
                                    "last",
                                    null
                                ],
                                [
                                    "double",
                                    "now",
                                    "-1"
                                ]
                            ],
                            "ret_type": "double",
                            "static": false,
                            "def": "double time_diff(double last, double now = -1)"
                        },
                        "sleep": {
                            "type": "func",
                            "name": "sleep",
                            "doc": {
                                "brief": "Sleep seconds",
                                "param": {
                                    "s": "seconds, double type"
                                },
                                "maixpy": "maix.time.sleep",
                                "py_doc": "Sleep seconds\n\nArgs:\n  - s: seconds, double type\n"
                            },
                            "args": [
                                [
                                    "double",
                                    "s",
                                    null
                                ]
                            ],
                            "ret_type": "void",
                            "static": false,
                            "def": "void sleep(double s)"
                        },
                        "sleep_ms": {
                            "type": "func",
                            "name": "sleep_ms",
                            "doc": {
                                "brief": "Sleep milliseconds",
                                "param": {
                                    "ms": "milliseconds, uint64_t type"
                                },
                                "maixpy": "maix.time.sleep_ms",
                                "py_doc": "Sleep milliseconds\n\nArgs:\n  - ms: milliseconds, uint64_t type\n"
                            },
                            "args": [
                                [
                                    "uint64_t",
                                    "ms",
                                    null
                                ]
                            ],
                            "ret_type": "void",
                            "static": false,
                            "def": "void sleep_ms(uint64_t ms)"
                        },
                        "sleep_us": {
                            "type": "func",
                            "name": "sleep_us",
                            "doc": {
                                "brief": "Sleep microseconds",
                                "param": {
                                    "us": "microseconds, uint64_t type"
                                },
                                "maixpy": "maix.time.sleep_us",
                                "py_doc": "Sleep microseconds\n\nArgs:\n  - us: microseconds, uint64_t type\n"
                            },
                            "args": [
                                [
                                    "uint64_t",
                                    "us",
                                    null
                                ]
                            ],
                            "ret_type": "void",
                            "static": false,
                            "def": "void sleep_us(uint64_t us)"
                        },
                        "DateTime": {
                            "type": "class",
                            "name": "DateTime",
                            "doc": {
                                "brief": "Date and time class",
                                "maixpy": "maix.time.DateTime",
                                "py_doc": "Date and time class"
                            },
                            "members": {
                                "year": {
                                    "type": "var",
                                    "name": "year",
                                    "doc": {
                                        "brief": "Year",
                                        "maixpy": "maix.time.DateTime.year",
                                        "py_doc": "Year"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "int year"
                                },
                                "month": {
                                    "type": "var",
                                    "name": "month",
                                    "doc": {
                                        "brief": "Month, 1~12",
                                        "maixpy": "maix.time.DateTime.month",
                                        "py_doc": "Month, 1~12"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "int month"
                                },
                                "day": {
                                    "type": "var",
                                    "name": "day",
                                    "doc": {
                                        "brief": "Day",
                                        "maixpy": "maix.time.DateTime.day",
                                        "py_doc": "Day"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "int day"
                                },
                                "hour": {
                                    "type": "var",
                                    "name": "hour",
                                    "doc": {
                                        "brief": "Hour",
                                        "maixpy": "maix.time.DateTime.hour",
                                        "py_doc": "Hour"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "int hour"
                                },
                                "minute": {
                                    "type": "var",
                                    "name": "minute",
                                    "doc": {
                                        "brief": "Minute",
                                        "maixpy": "maix.time.DateTime.minute",
                                        "py_doc": "Minute"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "int minute"
                                },
                                "second": {
                                    "type": "var",
                                    "name": "second",
                                    "doc": {
                                        "brief": "Second",
                                        "maixpy": "maix.time.DateTime.second",
                                        "py_doc": "Second"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "int second"
                                },
                                "microsecond": {
                                    "type": "var",
                                    "name": "microsecond",
                                    "doc": {
                                        "brief": "Microsecond",
                                        "maixpy": "maix.time.DateTime.microsecond",
                                        "py_doc": "Microsecond"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "int microsecond"
                                },
                                "yearday": {
                                    "type": "var",
                                    "name": "yearday",
                                    "doc": {
                                        "brief": "Year day",
                                        "maixpy": "maix.time.DateTime.yearday",
                                        "py_doc": "Year day"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "int yearday"
                                },
                                "weekday": {
                                    "type": "var",
                                    "name": "weekday",
                                    "doc": {
                                        "brief": "Weekday, 0 is Monday, 6 is Sunday",
                                        "maixpy": "maix.time.DateTime.weekday",
                                        "py_doc": "Weekday, 0 is Monday, 6 is Sunday"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "int weekday"
                                },
                                "zone": {
                                    "type": "var",
                                    "name": "zone",
                                    "doc": {
                                        "brief": "Time zone",
                                        "maixpy": "maix.time.DateTime.zone",
                                        "py_doc": "Time zone"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "float zone"
                                },
                                "zone_name": {
                                    "type": "var",
                                    "name": "zone_name",
                                    "doc": {
                                        "brief": "Time zone name",
                                        "maixpy": "maix.time.DateTime.zone_name",
                                        "py_doc": "Time zone name"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "std::string zone_name"
                                },
                                "__init__": {
                                    "type": "func",
                                    "name": "DateTime",
                                    "doc": {
                                        "brief": "Constructor",
                                        "param": {
                                            "year": "year",
                                            "month": "month",
                                            "day": "day",
                                            "hour": "hour",
                                            "minute": "minute",
                                            "second": "second",
                                            "microsecond": "microsecond",
                                            "yearday": "year day",
                                            "weekday": "weekday",
                                            "zone": "time zone"
                                        },
                                        "maixcdk": "maix.time.DateTime.DateTime",
                                        "maixpy": "maix.time.DateTime.__init__",
                                        "py_doc": "Constructor\n\nArgs:\n  - year: year\n  - month: month\n  - day: day\n  - hour: hour\n  - minute: minute\n  - second: second\n  - microsecond: microsecond\n  - yearday: year day\n  - weekday: weekday\n  - zone: time zone\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "year",
                                            "0"
                                        ],
                                        [
                                            "int",
                                            "month",
                                            "0"
                                        ],
                                        [
                                            "int",
                                            "day",
                                            "0"
                                        ],
                                        [
                                            "int",
                                            "hour",
                                            "0"
                                        ],
                                        [
                                            "int",
                                            "minute",
                                            "0"
                                        ],
                                        [
                                            "int",
                                            "second",
                                            "0"
                                        ],
                                        [
                                            "int",
                                            "microsecond",
                                            "0"
                                        ],
                                        [
                                            "int",
                                            "yearday",
                                            "0"
                                        ],
                                        [
                                            "int",
                                            "weekday",
                                            "0"
                                        ],
                                        [
                                            "int",
                                            "zone",
                                            "0"
                                        ]
                                    ],
                                    "ret_type": null,
                                    "static": false,
                                    "def": "DateTime(int year = 0, int month = 0, int day = 0, int hour = 0, int minute = 0, int second = 0, int microsecond = 0, int yearday = 0, int weekday = 0, int zone = 0)"
                                },
                                "strftime": {
                                    "type": "func",
                                    "name": "strftime",
                                    "doc": {
                                        "brief": "Convert to string",
                                        "return": "date time string",
                                        "maixpy": "maix.time.DateTime.strftime",
                                        "py_doc": "Convert to string\n\nReturns: date time string\n"
                                    },
                                    "args": [
                                        [
                                            "const std::string &",
                                            "format",
                                            null
                                        ]
                                    ],
                                    "ret_type": "std::string",
                                    "static": false,
                                    "def": "std::string strftime(const std::string &format)"
                                },
                                "timestamp": {
                                    "type": "func",
                                    "name": "timestamp",
                                    "doc": {
                                        "brief": "Convert to float timestamp",
                                        "return": "float timestamp",
                                        "maixpy": "maix.time.DateTime.timestamp",
                                        "py_doc": "Convert to float timestamp\n\nReturns: float timestamp\n"
                                    },
                                    "args": [],
                                    "ret_type": "double",
                                    "static": false,
                                    "def": "double timestamp()"
                                }
                            },
                            "def": "class DateTime"
                        },
                        "now": {
                            "type": "func",
                            "name": "now",
                            "doc": {
                                "brief": "Get current UTC date and time",
                                "return": "current date and time, DateTime type",
                                "maixpy": "maix.time.now",
                                "py_doc": "Get current UTC date and time\n\nReturns: current date and time, DateTime type\n"
                            },
                            "args": [],
                            "ret_type": "time::DateTime*",
                            "static": false,
                            "def": "time::DateTime *now()"
                        },
                        "localtime": {
                            "type": "func",
                            "name": "localtime",
                            "doc": {
                                "brief": "Get local time",
                                "return": "local time, DateTime type",
                                "maixpy": "maix.time.localtime",
                                "py_doc": "Get local time\n\nReturns: local time, DateTime type\n"
                            },
                            "args": [],
                            "ret_type": "time::DateTime*",
                            "static": false,
                            "def": "time::DateTime *localtime()"
                        },
                        "strptime": {
                            "type": "func",
                            "name": "strptime",
                            "doc": {
                                "brief": "DateTime from string",
                                "param": {
                                    "str": "date time string",
                                    "format": "date time format"
                                },
                                "return": "DateTime",
                                "maixpy": "maix.time.strptime",
                                "py_doc": "DateTime from string\n\nArgs:\n  - str: date time string\n  - format: date time format\n\n\nReturns: DateTime\n"
                            },
                            "args": [
                                [
                                    "const std::string &",
                                    "str",
                                    null
                                ],
                                [
                                    "const std::string &",
                                    "format",
                                    null
                                ]
                            ],
                            "ret_type": "time::DateTime*",
                            "static": false,
                            "def": "time::DateTime *strptime(const std::string &str, const std::string &format)"
                        },
                        "gmtime": {
                            "type": "func",
                            "name": "gmtime",
                            "doc": {
                                "brief": "timestamp to DateTime(time zone is UTC (value 0))",
                                "param": {
                                    "timestamp": "double timestamp"
                                },
                                "return": "DateTime",
                                "maixpy": "maix.time.gmtime",
                                "py_doc": "timestamp to DateTime(time zone is UTC (value 0))\n\nArgs:\n  - timestamp: double timestamp\n\n\nReturns: DateTime\n"
                            },
                            "args": [
                                [
                                    "double",
                                    "timestamp",
                                    null
                                ]
                            ],
                            "ret_type": "time::DateTime*",
                            "static": false,
                            "def": "time::DateTime *gmtime(double timestamp)"
                        }
                    },
                    "auto_add": true
                },
                "i18n": {
                    "type": "module",
                    "doc": {
                        "brief": "maix.i18n module"
                    },
                    "members": {
                        "locales": {
                            "type": "var",
                            "name": "",
                            "doc": {
                                "brief": "i18n locales list",
                                "maixpy": "maix.i18n.locales",
                                "py_doc": "i18n locales list"
                            },
                            "value": "{\n        \"en\",\n        \"zh\",\n        \"zh-tw\",\n        \"ja\"\n    }",
                            "static": true,
                            "readonly": false,
                            "def": "static std::vector<std::string> locales = {\n        \"en\",\n        \"zh\",\n        \"zh-tw\",\n        \"ja\"\n    }"
                        },
                        "names": {
                            "type": "var",
                            "name": "",
                            "doc": {
                                "brief": "i18n language names list",
                                "maixpy": "maix.i18n.names",
                                "py_doc": "i18n language names list"
                            },
                            "value": "{\n        \"English\",\n        \"\u7b80\u4f53\u4e2d\u6587\",\n        \"\u7e41\u9ad4\u4e2d\u6587\",\n        \"\u65e5\u672c\u8a9e\"\n    }",
                            "static": false,
                            "readonly": true,
                            "def": "const static std::vector<std::string> names = {\n        \"English\",\n        \"\u7b80\u4f53\u4e2d\u6587\",\n        \"\u7e41\u9ad4\u4e2d\u6587\",\n        \"\u65e5\u672c\u8a9e\"\n    }"
                        },
                        "get_locale": {
                            "type": "func",
                            "name": "get_locale",
                            "doc": {
                                "brief": "Get system config of locale.",
                                "return": "language locale, e.g. en, zh, zh_CN, zh_TW, etc.",
                                "maixpy": "maix.i18n.get_locale",
                                "py_doc": "Get system config of locale.\n\nReturns: language locale, e.g. en, zh, zh_CN, zh_TW, etc.\n"
                            },
                            "args": [],
                            "ret_type": "string",
                            "static": false,
                            "def": "string get_locale()"
                        },
                        "get_language_name": {
                            "type": "func",
                            "name": "get_language_name",
                            "doc": {
                                "brief": "Get system config of language name.",
                                "return": "language name, e.g. English, \u7b80\u4f53\u4e2d\u6587, \u7e41\u9ad4\u4e2d\u6587, etc.",
                                "maixpy": "maix.i18n.get_language_name",
                                "py_doc": "Get system config of language name.\n\nReturns: language name, e.g. English, \u7b80\u4f53\u4e2d\u6587, \u7e41\u9ad4\u4e2d\u6587, etc.\n"
                            },
                            "args": [],
                            "ret_type": "string",
                            "static": false,
                            "def": "string get_language_name()"
                        },
                        "Trans": {
                            "type": "class",
                            "name": "Trans",
                            "doc": {
                                "brief": "Translate helper class.",
                                "maixpy": "maix.i18n.Trans",
                                "py_doc": "Translate helper class."
                            },
                            "members": {
                                "__init__": {
                                    "type": "func",
                                    "name": "Trans",
                                    "doc": {
                                        "brief": "Translate helper class constructor.\\nBy default locale is get by `i18n.get_locale()` function which set by system settings.\\nBut you can also manually set by `set_locale` function temporarily.",
                                        "param": {
                                            "locales_dict": "locales dict, e.g. {\"zh\": {\"Confirm\": \"\u786e\u8ba4\", \"OK\": \"\u597d\u7684\"}, \"en\": {\"Confirm\": \"Confirm\", \"OK\": \"OK\"}}"
                                        },
                                        "maixpy": "maix.i18n.Trans.__init__",
                                        "maixcdk": "maix.i18n.Trans.Trans",
                                        "py_doc": "Translate helper class constructor.\nBy default locale is get by `i18n.get_locale()` function which set by system settings.\nBut you can also manually set by `set_locale` function temporarily.\n\nArgs:\n  - locales_dict: locales dict, e.g. {\"zh\": {\"Confirm\": \"\u786e\u8ba4\", \"OK\": \"\u597d\u7684\"}, \"en\": {\"Confirm\": \"Confirm\", \"OK\": \"OK\"}}\n"
                                    },
                                    "args": [
                                        [
                                            "const std::map<string, const std::map<string, string>> &",
                                            "locales_dict",
                                            null
                                        ]
                                    ],
                                    "ret_type": null,
                                    "static": false,
                                    "def": "Trans(const std::map<string, const std::map<string, string>> &locales_dict)"
                                },
                                "tr": {
                                    "type": "func",
                                    "name": "tr",
                                    "doc": {
                                        "brief": "Translate string by key.",
                                        "param": {
                                            "key": "string key, e.g. \"Confirm\"",
                                            "locale": "locale name, if not assign, use default locale set by system settings or set_locale function."
                                        },
                                        "return": "translated string, if find translation, return it, or return key, e.g. \"\u786e\u8ba4\", \"Confirm\", etc.",
                                        "maixpy": "maix.i18n.Trans.tr",
                                        "py_doc": "Translate string by key.\n\nArgs:\n  - key: string key, e.g. \"Confirm\"\n  - locale: locale name, if not assign, use default locale set by system settings or set_locale function.\n\n\nReturns: translated string, if find translation, return it, or return key, e.g. \"\u786e\u8ba4\", \"Confirm\", etc.\n"
                                    },
                                    "args": [
                                        [
                                            "const string &",
                                            "key",
                                            null
                                        ],
                                        [
                                            "const string",
                                            "locale",
                                            "\"\""
                                        ]
                                    ],
                                    "ret_type": "string",
                                    "static": false,
                                    "def": "string tr(const string &key, const string locale = \"\")"
                                },
                                "set_locale": {
                                    "type": "func",
                                    "name": "set_locale",
                                    "doc": {
                                        "brief": "Set locale temporarily, will not affect system settings.",
                                        "param": {
                                            "locale": "locale name, e.g. \"zh\", \"en\", etc. @see maix.i18n.locales"
                                        },
                                        "maixpy": "maix.i18n.Trans.set_locale",
                                        "py_doc": "Set locale temporarily, will not affect system settings.\n\nArgs:\n  - locale: locale name, e.g. \"zh\", \"en\", etc. @see maix.i18n.locales\n"
                                    },
                                    "args": [
                                        [
                                            "const string &",
                                            "locale",
                                            null
                                        ]
                                    ],
                                    "ret_type": "void",
                                    "static": false,
                                    "def": "void set_locale(const string &locale)"
                                },
                                "get_locale": {
                                    "type": "func",
                                    "name": "get_locale",
                                    "doc": {
                                        "brief": "Get current locale.",
                                        "return": "locale name, e.g. \"zh\", \"en\", etc. @see maix.i18n.locales",
                                        "maixpy": "maix.i18n.Trans.get_locale",
                                        "py_doc": "Get current locale.\n\nReturns: locale name, e.g. \"zh\", \"en\", etc. @see maix.i18n.locales\n"
                                    },
                                    "args": [],
                                    "ret_type": "string",
                                    "static": false,
                                    "def": "string get_locale()"
                                }
                            },
                            "def": "class Trans"
                        }
                    },
                    "auto_add": true
                },
                "protocol": {
                    "type": "module",
                    "doc": {
                        "brief": "maix.protocol module"
                    },
                    "members": {
                        "VERSION": {
                            "type": "var",
                            "name": "",
                            "doc": {
                                "brief": "protocol version",
                                "maixpy": "maix.protocol.VERSION",
                                "py_doc": "protocol version"
                            },
                            "value": "1",
                            "static": false,
                            "readonly": true,
                            "def": "const uint8_t VERSION = 1"
                        },
                        "HEADER": {
                            "type": "var",
                            "name": "",
                            "doc": {
                                "brief": "protocol header",
                                "maixpy": "maix.protocol.HEADER",
                                "py_doc": "protocol header"
                            },
                            "value": "0xBBACCAAA",
                            "static": false,
                            "readonly": true,
                            "def": "const uint32_t HEADER = 0xBBACCAAA"
                        },
                        "CMD": {
                            "type": "enum",
                            "name": "CMD",
                            "doc": {
                                "brief": "protocol cmd, more doc see MaixCDK document's convention doc",
                                "note": "max app custom CMD value should < CMD_APP_MAX",
                                "maixpy": "maix.protocol.CMD",
                                "py_doc": "protocol cmd, more doc see MaixCDK document's convention doc"
                            },
                            "values": [
                                [
                                    "CMD_APP_MAX",
                                    "0xC8",
                                    "200, max app custom CMD value should < CMD_APP_MAX"
                                ],
                                [
                                    "CMD_SET_UPLOAD",
                                    "0xF8",
                                    "set auto upload data mode"
                                ],
                                [
                                    "CMD_APP_LIST",
                                    "0xF9",
                                    ""
                                ],
                                [
                                    "CMD_START_APP",
                                    "0xFA",
                                    ""
                                ],
                                [
                                    "CMD_EXIT_APP",
                                    "0xFB",
                                    ""
                                ],
                                [
                                    "CMD_CUR_APP_INFO",
                                    "0xFC",
                                    ""
                                ],
                                [
                                    "CMD_APP_INFO",
                                    "0xFD",
                                    ""
                                ],
                                [
                                    "CMD_KEY",
                                    "0xFE",
                                    ""
                                ],
                                [
                                    "CMD_TOUCH",
                                    "0xFF",
                                    ""
                                ]
                            ],
                            "def": "enum CMD\n        {\n            CMD_APP_MAX = 0xC8,     //  200, max app custom CMD value should < CMD_APP_MAX\n\n            CMD_SET_UPLOAD   = 0xF8, // set auto upload data mode\n            CMD_APP_LIST     = 0xF9,\n            CMD_START_APP    = 0xFA,\n            CMD_EXIT_APP     = 0xFB,\n            CMD_CUR_APP_INFO = 0xFC,\n            CMD_APP_INFO     = 0xFD,\n            CMD_KEY          = 0xFE,\n            CMD_TOUCH        = 0xFF,\n        }"
                        },
                        "FLAGS": {
                            "type": "enum",
                            "name": "FLAGS",
                            "doc": {
                                "brief": "protocol flags, more doc see MaixCDK document's convention doc",
                                "maixpy": "maix.protocol.FLAGS",
                                "py_doc": "protocol flags, more doc see MaixCDK document's convention doc"
                            },
                            "values": [
                                [
                                    "FLAG_REQ",
                                    "0x00",
                                    ""
                                ],
                                [
                                    "FLAG_RESP",
                                    "0x80",
                                    ""
                                ],
                                [
                                    "FLAG_IS_RESP_MASK",
                                    "0x80",
                                    ""
                                ],
                                [
                                    "FLAG_RESP_OK",
                                    "0x40",
                                    ""
                                ],
                                [
                                    "FLAG_RESP_ERR",
                                    "0x00",
                                    ""
                                ],
                                [
                                    "FLAG_RESP_OK_MASK",
                                    "0x40",
                                    ""
                                ],
                                [
                                    "FLAG_REPORT",
                                    "0x20",
                                    ""
                                ],
                                [
                                    "FLAG_REPORT_MASK",
                                    "0x20",
                                    ""
                                ],
                                [
                                    "FLAG_VERSION_MASK",
                                    "0x03",
                                    ""
                                ]
                            ],
                            "def": "enum FLAGS\n        {\n            FLAG_REQ = 0x00,\n            FLAG_RESP = 0x80,\n            FLAG_IS_RESP_MASK = 0x80,\n\n            FLAG_RESP_OK = 0x40,\n            FLAG_RESP_ERR = 0x00,\n            FLAG_RESP_OK_MASK = 0x40,\n\n            FLAG_REPORT = 0x20,\n            FLAG_REPORT_MASK = 0x20,\n\n            FLAG_VERSION_MASK = 0x03\n        }"
                        },
                        "MSG": {
                            "type": "class",
                            "name": "MSG",
                            "doc": {
                                "brief": "protocol msg",
                                "maixpy": "maix.protocol.MSG",
                                "py_doc": "protocol msg"
                            },
                            "members": {
                                "version": {
                                    "type": "var",
                                    "name": "version",
                                    "doc": {
                                        "brief": "protocol version",
                                        "maixpy": "maix.protocol.MSG.version",
                                        "py_doc": "protocol version"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "uint8_t version"
                                },
                                "resp_ok": {
                                    "type": "var",
                                    "name": "resp_ok",
                                    "doc": {
                                        "brief": "Is success response or not, (only for response msg)",
                                        "maixpy": "maix.protocol.MSG.resp_ok",
                                        "py_doc": "Is success response or not, (only for response msg)"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "uint8_t resp_ok"
                                },
                                "cmd": {
                                    "type": "var",
                                    "name": "cmd",
                                    "doc": {
                                        "brief": "CMD value",
                                        "maixpy": "maix.protocol.MSG.cmd",
                                        "py_doc": "CMD value"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "uint8_t cmd"
                                },
                                "is_resp": {
                                    "type": "var",
                                    "name": "is_resp",
                                    "doc": {
                                        "brief": "message is response or not, contrast with is_req",
                                        "maixpy": "maix.protocol.MSG.is_resp",
                                        "py_doc": "message is response or not, contrast with is_req"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "bool is_resp"
                                },
                                "body_len": {
                                    "type": "var",
                                    "name": "body_len",
                                    "doc": {
                                        "brief": "Message body length, read only, use set_body() to update",
                                        "attention": "DO NOT manually change this value",
                                        "maixpy": "maix.protocol.MSG.body_len",
                                        "py_doc": "Message body length, read only, use set_body() to update"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "int body_len"
                                },
                                "encode_resp_ok": {
                                    "type": "func",
                                    "name": "encode_resp_ok",
                                    "doc": {
                                        "brief": "Encode response ok(success) message",
                                        "param": {
                                            "body": "response body, can be null"
                                        },
                                        "return": "encoded data, if nullptr, means error, and the error code is -err.Err",
                                        "maixpy": "maix.protocol.MSG.encode_resp_ok",
                                        "py_doc": "Encode response ok(success) message\n\nArgs:\n  - body: response body, can be null\n\n\nReturns: encoded data, if nullptr, means error, and the error code is -err.Err\n"
                                    },
                                    "args": [
                                        [
                                            "Bytes *",
                                            "body",
                                            "nullptr"
                                        ]
                                    ],
                                    "ret_type": "Bytes*",
                                    "static": false,
                                    "def": "Bytes *encode_resp_ok(Bytes *body = nullptr)"
                                },
                                "encode_report": {
                                    "type": "func",
                                    "name": "encode_report",
                                    "doc": {
                                        "brief": "Encode proactively report message",
                                        "param": {
                                            "body": "report body, can be null"
                                        },
                                        "return": "encoded data, if nullptr, means error, and the error code is -err.Err",
                                        "maixpy": "maix.protocol.MSG.encode_report",
                                        "py_doc": "Encode proactively report message\n\nArgs:\n  - body: report body, can be null\n\n\nReturns: encoded data, if nullptr, means error, and the error code is -err.Err\n"
                                    },
                                    "args": [
                                        [
                                            "Bytes *",
                                            "body",
                                            "nullptr"
                                        ]
                                    ],
                                    "ret_type": "Bytes*",
                                    "static": false,
                                    "def": "Bytes *encode_report(Bytes *body = nullptr)"
                                },
                                "encode_resp_err": {
                                    "type": "func",
                                    "name": "encode_resp_err",
                                    "doc": {
                                        "brief": "Encode response error message",
                                        "param": {
                                            "code": "error code",
                                            "msg": "error message"
                                        },
                                        "return": "encoded data, if nullptr, means error, and the error code is -err.Err",
                                        "maixpy": "maix.protocol.MSG.encode_resp_err",
                                        "py_doc": "Encode response error message\n\nArgs:\n  - code: error code\n  - msg: error message\n\n\nReturns: encoded data, if nullptr, means error, and the error code is -err.Err\n"
                                    },
                                    "args": [
                                        [
                                            "err::Err",
                                            "code",
                                            null
                                        ],
                                        [
                                            "const std::string &",
                                            "msg",
                                            null
                                        ]
                                    ],
                                    "ret_type": "Bytes*",
                                    "static": false,
                                    "def": "Bytes *encode_resp_err(err::Err code, const std::string &msg)"
                                },
                                "set_body": {
                                    "type": "func",
                                    "name": "set_body",
                                    "doc": {
                                        "brief": "Update message body",
                                        "param": {
                                            "body_new": "new body data"
                                        },
                                        "maixpy": "maix.protocol.MSG.set_body",
                                        "py_doc": "Update message body\n\nArgs:\n  - body_new: new body data\n"
                                    },
                                    "args": [
                                        [
                                            "Bytes *",
                                            "body_new",
                                            null
                                        ]
                                    ],
                                    "ret_type": "void",
                                    "static": false,
                                    "def": "void set_body(Bytes *body_new)"
                                },
                                "get_body": {
                                    "type": "func",
                                    "name": "get_body",
                                    "doc": {
                                        "brief": "Get message body",
                                        "return": "message body, bytes type",
                                        "maixpy": "maix.protocol.MSG.get_body",
                                        "py_doc": "Get message body\n\nReturns: message body, bytes type\n"
                                    },
                                    "args": [],
                                    "ret_type": "Bytes*",
                                    "static": false,
                                    "def": "Bytes *get_body()"
                                }
                            },
                            "def": "class MSG"
                        },
                        "Protocol": {
                            "type": "class",
                            "name": "Protocol",
                            "doc": {
                                "brief": "Communicate protocol",
                                "maixpy": "maix.protocol.Protocol",
                                "py_doc": "Communicate protocol"
                            },
                            "members": {
                                "__init__": {
                                    "type": "func",
                                    "name": "Protocol",
                                    "doc": {
                                        "brief": "Construct a new Protocol object",
                                        "param": {
                                            "buff_size": "Data queue buffer size"
                                        },
                                        "maixpy": "maix.protocol.Protocol.__init__",
                                        "maixcdk": "maix.protocol.Protocol.Protocol",
                                        "py_doc": "Construct a new Protocol object\n\nArgs:\n  - buff_size: Data queue buffer size\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "buff_size",
                                            "1024"
                                        ]
                                    ],
                                    "ret_type": null,
                                    "static": false,
                                    "def": "Protocol(int buff_size = 1024)"
                                },
                                "buff_size": {
                                    "type": "func",
                                    "name": "buff_size",
                                    "doc": {
                                        "brief": "Data queue buffer size",
                                        "maixpy": "maix.protocol.Protocol.buff_size",
                                        "py_doc": "Data queue buffer size"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int buff_size()"
                                },
                                "push_data": {
                                    "type": "func",
                                    "name": "push_data",
                                    "doc": {
                                        "brief": "Add data to data queue",
                                        "param": {
                                            "new_data": "new data"
                                        },
                                        "return": "error code, maybe err.Err.ERR_BUFF_FULL",
                                        "maixpy": "maix.protocol.Protocol.push_data",
                                        "py_doc": "Add data to data queue\n\nArgs:\n  - new_data: new data\n\n\nReturns: error code, maybe err.Err.ERR_BUFF_FULL\n"
                                    },
                                    "args": [
                                        [
                                            "const Bytes *",
                                            "new_data",
                                            null
                                        ]
                                    ],
                                    "ret_type": "err::Err",
                                    "static": false,
                                    "def": "err::Err push_data(const Bytes *new_data)"
                                },
                                "decode": {
                                    "type": "func",
                                    "name": "decode",
                                    "doc": {
                                        "brief": "Decode data in data queue and return a message",
                                        "param": {
                                            "new_data": "new data add to data queue, if null, only decode."
                                        },
                                        "return": "decoded message, if nullptr, means no message decoded.",
                                        "maixpy": "maix.protocol.Protocol.decode",
                                        "py_doc": "Decode data in data queue and return a message\n\nArgs:\n  - new_data: new data add to data queue, if null, only decode.\n\n\nReturns: decoded message, if nullptr, means no message decoded.\n"
                                    },
                                    "args": [
                                        [
                                            "const Bytes *",
                                            "new_data",
                                            "nullptr"
                                        ]
                                    ],
                                    "ret_type": "protocol::MSG*",
                                    "static": false,
                                    "def": "protocol::MSG *decode(const Bytes *new_data = nullptr)"
                                },
                                "encode_resp_ok": {
                                    "type": "func",
                                    "name": "encode_resp_ok",
                                    "doc": {
                                        "brief": "Encode response ok(success) message to buffer",
                                        "param": {
                                            "cmd": "CMD value",
                                            "body": "response body, can be null"
                                        },
                                        "return": "encoded data, if nullptr, means error, and the error code is -err.Err",
                                        "maixpy": "maix.protocol.Protocol.encode_resp_ok",
                                        "py_doc": "Encode response ok(success) message to buffer\n\nArgs:\n  - cmd: CMD value\n  - body: response body, can be null\n\n\nReturns: encoded data, if nullptr, means error, and the error code is -err.Err\n"
                                    },
                                    "args": [
                                        [
                                            "uint8_t",
                                            "cmd",
                                            null
                                        ],
                                        [
                                            "Bytes *",
                                            "body",
                                            "nullptr"
                                        ]
                                    ],
                                    "ret_type": "Bytes*",
                                    "static": false,
                                    "def": "Bytes *encode_resp_ok(uint8_t cmd, Bytes *body = nullptr)"
                                },
                                "encode_report": {
                                    "type": "func",
                                    "name": "encode_report",
                                    "doc": {
                                        "brief": "Encode proactively report message to buffer",
                                        "param": {
                                            "cmd": "CMD value",
                                            "body": "report body, can be null"
                                        },
                                        "return": "encoded data, if nullptr, means error, and the error code is -err.Err",
                                        "maixpy": "maix.protocol.Protocol.encode_report",
                                        "py_doc": "Encode proactively report message to buffer\n\nArgs:\n  - cmd: CMD value\n  - body: report body, can be null\n\n\nReturns: encoded data, if nullptr, means error, and the error code is -err.Err\n"
                                    },
                                    "args": [
                                        [
                                            "uint8_t",
                                            "cmd",
                                            null
                                        ],
                                        [
                                            "Bytes *",
                                            "body",
                                            "nullptr"
                                        ]
                                    ],
                                    "ret_type": "Bytes*",
                                    "static": false,
                                    "def": "Bytes *encode_report(uint8_t cmd, Bytes *body = nullptr)"
                                },
                                "encode_resp_err": {
                                    "type": "func",
                                    "name": "encode_resp_err",
                                    "doc": {
                                        "brief": "Encode response error message to buffer",
                                        "param": {
                                            "cmd": "CMD value",
                                            "code": "error code",
                                            "msg": "error message"
                                        },
                                        "return": "encoded data, if nullptr, means error, and the error code is -err.Err",
                                        "maixpy": "maix.protocol.Protocol.encode_resp_err",
                                        "py_doc": "Encode response error message to buffer\n\nArgs:\n  - cmd: CMD value\n  - code: error code\n  - msg: error message\n\n\nReturns: encoded data, if nullptr, means error, and the error code is -err.Err\n"
                                    },
                                    "args": [
                                        [
                                            "uint8_t",
                                            "cmd",
                                            null
                                        ],
                                        [
                                            "err::Err",
                                            "code",
                                            null
                                        ],
                                        [
                                            "const std::string &",
                                            "msg",
                                            null
                                        ]
                                    ],
                                    "ret_type": "Bytes*",
                                    "static": false,
                                    "def": "Bytes *encode_resp_err(uint8_t cmd, err::Err code, const std::string &msg)"
                                }
                            },
                            "def": "class Protocol"
                        },
                        "crc16_IBM": {
                            "type": "func",
                            "name": "crc16_IBM",
                            "doc": {
                                "brief": "CRC16-IBM",
                                "param": {
                                    "data": "data, bytes type."
                                },
                                "return": "CRC16-IBM value, uint16_t type.",
                                "maixpy": "maix.protocol.crc16_IBM",
                                "py_doc": "CRC16-IBM\n\nArgs:\n  - data: data, bytes type.\n\n\nReturns: CRC16-IBM value, uint16_t type.\n"
                            },
                            "args": [
                                [
                                    "const Bytes *",
                                    "data",
                                    null
                                ]
                            ],
                            "ret_type": "uint16_t",
                            "static": false,
                            "def": "uint16_t crc16_IBM(const Bytes *data)"
                        }
                    },
                    "auto_add": true
                },
                "example": {
                    "type": "module",
                    "doc": {
                        "brief": "example module, this will be maix.example module in MaixPy, maix::example namespace in MaixCDK",
                        "maixpy": "maix.example",
                        "py_doc": "example module, this will be maix.example module in MaixPy, maix::example namespace in MaixCDK"
                    },
                    "members": {
                        "Test": {
                            "type": "class",
                            "name": "Test",
                            "doc": {
                                "brief": "Test class",
                                "maixpy": "maix.example.Test",
                                "py_doc": "Test class"
                            },
                            "members": {
                                "__init__": {
                                    "type": "func",
                                    "name": "Test",
                                    "doc": {
                                        "brief": "Test constructor",
                                        "maixpy": "maix.example.Test.__init__",
                                        "maixcdk": "maix.example.Test.Test",
                                        "py_doc": "Test constructor"
                                    },
                                    "args": [],
                                    "ret_type": null,
                                    "static": false,
                                    "def": "Test()"
                                }
                            },
                            "def": "class Test"
                        },
                        "Kind": {
                            "type": "enum",
                            "name": "Kind",
                            "doc": {
                                "brief": "Example enum",
                                "maixpy": "maix.example.Kind",
                                "py_doc": "Example enum"
                            },
                            "values": [
                                [
                                    "KIND_NONE",
                                    "0",
                                    "Kind none, value always 0, other enum value will auto increase"
                                ],
                                [
                                    "KIND_DOG",
                                    "",
                                    "Kind dog"
                                ],
                                [
                                    "KIND_CAT",
                                    "",
                                    "Kind cat, value is auto generated according to KING_DOG"
                                ],
                                [
                                    "KIND_BIRD",
                                    "",
                                    ""
                                ],
                                [
                                    "KIND_MAX",
                                    "",
                                    "Max Kind quantity\nYou can get max Kind value by KIND_MAX - 1"
                                ]
                            ],
                            "def": "enum Kind\n        {\n            KIND_NONE = 0, /** Kind none, value always 0, other enum value will auto increase */\n            KIND_DOG,      /** Kind dog*/\n            KIND_CAT,      // Kind cat, value is auto generated according to KING_DOG\n            KIND_BIRD,\n            KIND_MAX /* Max Kind quantity,\n                        You can get max Kind value by KIND_MAX - 1\n                     */\n        }"
                        },
                        "var1": {
                            "type": "var",
                            "name": "",
                            "doc": {
                                "brief": "Example module variable",
                                "attention": "It's a copy of this variable in MaixPy,\nso change it in C++ (e.g. update var in hello function) will not take effect the var inMaixPy.\nSo we add const for this var to avoid this mistake.",
                                "maixpy": "maix.example.var1",
                                "py_doc": "Example module variable"
                            },
                            "value": "\"Sipeed\"",
                            "static": false,
                            "readonly": true,
                            "def": "const std::string var1 = \"Sipeed\""
                        },
                        "list_var": {
                            "type": "var",
                            "name": "",
                            "doc": {
                                "brief": "Tensor data type size in bytes",
                                "attention": [
                                    "DO NOT use C/C++ array directly for python API, the python wrapper not support it.\nUse std::vector instead.",
                                    "It's a copy of this variable in MaixPy,\nso change it in C++ (e.g. update var in hello function) will not take effect the var inMaixPy.\nSo we add const for this var to avoid this mistake."
                                ],
                                "maixpy": "maix.example.list_var",
                                "py_doc": "Tensor data type size in bytes"
                            },
                            "value": "{\n            0, 1, 2, 3, 4, 5, 6, 7, 8, 9}",
                            "static": false,
                            "readonly": true,
                            "def": "const std::vector<int> list_var = {\n            0, 1, 2, 3, 4, 5, 6, 7, 8, 9}"
                        },
                        "test_var": {
                            "type": "var",
                            "name": "",
                            "doc": {
                                "brief": "Example module variable test_var",
                                "attention": "It's a copy of this variable in MaixPy, so if you change it in C++, it will not take effect in MaixPy.\nAnd change it in MaixPy will not take effect in C++ as well !!!\nIf you want to use vars shared between C++ and MaixPy, you can create a class and use its member.",
                                "maixpy": "maix.example.test_var",
                                "py_doc": "Example module variable test_var"
                            },
                            "value": "100",
                            "static": false,
                            "readonly": false,
                            "def": "int test_var = 100"
                        },
                        "hello": {
                            "type": "func",
                            "name": "hello",
                            "doc": {
                                "brief": "say hello to someone",
                                "param": {
                                    "name": "direction [in], name of someone, string type"
                                },
                                "return": "string type, content is hello + name",
                                "maixpy": "maix.example.hello",
                                "py_doc": "say hello to someone\n\nArgs:\n  - name: direction [in], name of someone, string type\n\n\nReturns: string type, content is hello + name\n"
                            },
                            "args": [
                                [
                                    "std::string",
                                    "name",
                                    null
                                ]
                            ],
                            "ret_type": "std::string",
                            "static": false,
                            "def": "std::string hello(std::string name)"
                        },
                        "Example": {
                            "type": "class",
                            "name": "Example",
                            "doc": {
                                "brief": "Example class\\nthis class will be export to MaixPy as maix.example.Example",
                                "maixpy": "maix.example.Example",
                                "py_doc": "Example class\nthis class will be export to MaixPy as maix.example.Example"
                            },
                            "members": {
                                "__init__": {
                                    "type": "func",
                                    "name": "Example",
                                    "doc": {
                                        "brief": "Example constructor\\nthis constructor will be export to MaixPy as maix.example.Example.__init__",
                                        "param": {
                                            "name": "direction [in], name of Example, string type",
                                            "age": "direction [in], age of Example, int type, default is 18, value range is [0, 100]"
                                        },
                                        "attention": "to make auto generate code work, param Kind should with full namespace name `example::Kind` instead of `Kind`,\nnamespace `maix` can be ignored.",
                                        "maixpy": "maix.example.Example.__init__",
                                        "maixcdk": "maix.example.Example.Example",
                                        "py_doc": "Example constructor\nthis constructor will be export to MaixPy as maix.example.Example.__init__\n\nArgs:\n  - name: direction [in], name of Example, string type\n  - age: direction [in], age of Example, int type, default is 18, value range is [0, 100]\n"
                                    },
                                    "args": [
                                        [
                                            "std::string &",
                                            "name",
                                            null
                                        ],
                                        [
                                            "int",
                                            "age",
                                            "18"
                                        ],
                                        [
                                            "example::Kind",
                                            "pet",
                                            "example::KIND_NONE"
                                        ]
                                    ],
                                    "ret_type": null,
                                    "static": false,
                                    "def": "Example(std::string &name, int age = 18, example::Kind pet = example::KIND_NONE)"
                                },
                                "get_name": {
                                    "type": "func",
                                    "name": "get_name",
                                    "doc": {
                                        "brief": "get name of Example\\nyou can also get name by property `name`.",
                                        "return": "name of Example, string type",
                                        "maixpy": "maix.example.Example.get_name",
                                        "py_doc": "get name of Example\nyou can also get name by property `name`.\n\nReturns: name of Example, string type\n"
                                    },
                                    "args": [],
                                    "ret_type": "std::string",
                                    "static": false,
                                    "def": "std::string get_name()"
                                },
                                "get_age": {
                                    "type": "func",
                                    "name": "get_age",
                                    "doc": {
                                        "brief": "get age of Example",
                                        "return": "age of Example, int type, value range is [0, 100]",
                                        "maixpy": "maix.example.Example.get_age",
                                        "py_doc": "get age of Example\n\nReturns: age of Example, int type, value range is [0, 100]\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int get_age()"
                                },
                                "set_name": {
                                    "type": "func",
                                    "name": "set_name",
                                    "doc": {
                                        "brief": "set name of Example",
                                        "param": {
                                            "name": "name of Example, string type"
                                        },
                                        "maixpy": "maix.example.Example.set_name",
                                        "py_doc": "set name of Example\n\nArgs:\n  - name: name of Example, string type\n"
                                    },
                                    "args": [
                                        [
                                            "std::string",
                                            "name",
                                            null
                                        ]
                                    ],
                                    "ret_type": "void",
                                    "static": false,
                                    "def": "void set_name(std::string name)"
                                },
                                "set_age": {
                                    "type": "func",
                                    "name": "set_age",
                                    "doc": {
                                        "brief": "set age of Example",
                                        "param": {
                                            "age": "age of Example, int type, value range is [0, 100]"
                                        },
                                        "maixpy": "maix.example.Example.set_age",
                                        "py_doc": "set age of Example\n\nArgs:\n  - age: age of Example, int type, value range is [0, 100]\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "age",
                                            null
                                        ]
                                    ],
                                    "ret_type": "void",
                                    "static": false,
                                    "def": "void set_age(int age)"
                                },
                                "set_pet": {
                                    "type": "func",
                                    "name": "set_pet",
                                    "doc": {
                                        "brief": "Example enum member",
                                        "attention": "",
                                        "maixpy": "maix.example.Example.set_pet",
                                        "py_doc": "Example enum member"
                                    },
                                    "args": [
                                        [
                                            "example::Kind",
                                            "pet",
                                            null
                                        ]
                                    ],
                                    "ret_type": "void",
                                    "static": false,
                                    "def": "void set_pet(example::Kind pet)"
                                },
                                "get_pet": {
                                    "type": "func",
                                    "name": "get_pet",
                                    "doc": {
                                        "brief": "Example enum member",
                                        "maixpy": "maix.example.Example.get_pet",
                                        "py_doc": "Example enum member"
                                    },
                                    "args": [],
                                    "ret_type": "example::Kind",
                                    "static": false,
                                    "def": "example::Kind get_pet()"
                                },
                                "get_list": {
                                    "type": "func",
                                    "name": "get_list",
                                    "doc": {
                                        "brief": "get list example",
                                        "param": {
                                            "in": "direction [in], input list, items are int type.\nIn MaixPy, you can pass list or tuple to this API"
                                        },
                                        "return": "list, items are int type, content is [1, 2, 3] + in. Alloc item, del in MaixPy will auto free memory.",
                                        "maixpy": "maix.example.Example.get_list",
                                        "py_doc": "get list example\n\nArgs:\n  - in: direction [in], input list, items are int type.\nIn MaixPy, you can pass list or tuple to this API\n\n\nReturns: list, items are int type, content is [1, 2, 3] + in. Alloc item, del in MaixPy will auto free memory.\n"
                                    },
                                    "args": [
                                        [
                                            "std::vector<int>",
                                            "in",
                                            null
                                        ]
                                    ],
                                    "ret_type": "std::vector<int>*",
                                    "static": false,
                                    "def": "std::vector<int> *get_list(std::vector<int> in)"
                                },
                                "get_dict": {
                                    "type": "func",
                                    "name": "get_dict",
                                    "doc": {
                                        "brief": "Example dict API",
                                        "param": {
                                            "in": "direction [in], input dict, key is string type, value is int type.\nIn MaixPy, you can pass `dict` to this API"
                                        },
                                        "return": "dict, key is string type, value is int type, content is {\"a\": 1} + in\nIn MaixPy, return type is `dict` object",
                                        "maixpy": "maix.example.Example.get_dict",
                                        "py_doc": "Example dict API\n\nArgs:\n  - in: direction [in], input dict, key is string type, value is int type.\nIn MaixPy, you can pass `dict` to this API\n\n\nReturns: dict, key is string type, value is int type, content is {\"a\": 1} + in\nIn MaixPy, return type is `dict` object\n"
                                    },
                                    "args": [
                                        [
                                            "std::map<std::string, int> &",
                                            "in",
                                            null
                                        ]
                                    ],
                                    "ret_type": "std::map<std::string, int>",
                                    "static": false,
                                    "def": "std::map<std::string, int> get_dict(std::map<std::string, int> &in)"
                                },
                                "hello": {
                                    "type": "func",
                                    "name": "hello",
                                    "doc": {
                                        "brief": "say hello to someone",
                                        "param": {
                                            "name": "name of someone, string type"
                                        },
                                        "return": "string type, content is Example::hello_str + name",
                                        "maixpy": "maix.example.Example.hello",
                                        "py_doc": "say hello to someone\n\nArgs:\n  - name: name of someone, string type\n\n\nReturns: string type, content is Example::hello_str + name\n"
                                    },
                                    "args": [
                                        [
                                            "std::string",
                                            "name",
                                            null
                                        ]
                                    ],
                                    "ret_type": "std::string",
                                    "static": true,
                                    "def": "static std::string hello(std::string name)"
                                },
                                "hello_bytes": {
                                    "type": "func",
                                    "name": "hello_bytes",
                                    "doc": {
                                        "brief": "param is bytes example",
                                        "param": {
                                            "bytes": "bytes type param"
                                        },
                                        "return": "bytes type, return value is bytes changed value",
                                        "maixpy": "maix.example.Example.hello_bytes",
                                        "py_doc": "param is bytes example\n\nArgs:\n  - bytes: bytes type param\n\n\nReturns: bytes type, return value is bytes changed value\n"
                                    },
                                    "args": [
                                        [
                                            "Bytes &",
                                            "bytes",
                                            null
                                        ]
                                    ],
                                    "ret_type": "Bytes*",
                                    "static": true,
                                    "def": "static Bytes *hello_bytes(Bytes &bytes)"
                                },
                                "callback": {
                                    "type": "func",
                                    "name": "callback",
                                    "doc": {
                                        "brief": "Callback example",
                                        "param": {
                                            "cb": "callback function, param is two int type, return is int type"
                                        },
                                        "return": "int type, return value is cb(1, 2)",
                                        "maixpy": "maix.example.Example.callback",
                                        "py_doc": "Callback example\n\nArgs:\n  - cb: callback function, param is two int type, return is int type\n\n\nReturns: int type, return value is cb(1, 2)\n"
                                    },
                                    "args": [
                                        [
                                            "std::function<int(int, int)>",
                                            "cb",
                                            null
                                        ]
                                    ],
                                    "ret_type": "int",
                                    "static": true,
                                    "def": "static int callback(std::function<int(int, int)> cb)"
                                },
                                "hello_dict": {
                                    "type": "func",
                                    "name": "hello_dict",
                                    "doc": {
                                        "brief": "Dict param example",
                                        "param": {
                                            "dict": "dict type param, key is string type, value is int type"
                                        },
                                        "maixpy": "maix.example.Example.hello_dict",
                                        "py_doc": "Dict param example\n\nArgs:\n  - dict: dict type param, key is string type, value is int type\n"
                                    },
                                    "args": [
                                        [
                                            "std::map<std::string, int> *",
                                            "dict",
                                            null
                                        ]
                                    ],
                                    "ret_type": "std::map<std::string, int>*",
                                    "static": true,
                                    "def": "static std::map<std::string, int> *hello_dict(std::map<std::string, int> *dict)"
                                },
                                "name": {
                                    "type": "var",
                                    "name": "name",
                                    "doc": {
                                        "brief": "name member of Example",
                                        "maixpy": "maix.example.Example.name",
                                        "py_doc": "name member of Example"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "std::string name"
                                },
                                "age": {
                                    "type": "var",
                                    "name": "age",
                                    "doc": {
                                        "brief": "age member of Example, value range should be [0, 100]",
                                        "maixpy": "maix.example.Example.age",
                                        "py_doc": "age member of Example, value range should be [0, 100]"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "int age"
                                },
                                "hello_str": {
                                    "type": "var",
                                    "name": "hello_str",
                                    "doc": {
                                        "brief": "hello_str member of Example, default value is \\\"hello \\\"",
                                        "maixpy": "maix.example.Example.hello_str",
                                        "py_doc": "hello_str member of Example, default value is \"hello \""
                                    },
                                    "value": null,
                                    "static": true,
                                    "readonly": false,
                                    "def": "static std::string hello_str"
                                },
                                "var1": {
                                    "type": "var",
                                    "name": "",
                                    "doc": {
                                        "brief": "Example module readonly variable",
                                        "maixpy": "maix.example.Example.var1",
                                        "py_doc": "Example module readonly variable"
                                    },
                                    "value": "\"Example.var1\"",
                                    "static": false,
                                    "readonly": true,
                                    "def": "const std::string var1 = \"Example.var1\""
                                },
                                "var2": {
                                    "type": "var",
                                    "name": "",
                                    "doc": {
                                        "brief": "Example module readonly variable",
                                        "maixpy": "maix.example.Example.var2\n:readonly",
                                        "py_doc": "Example module readonly variable"
                                    },
                                    "value": "\"Example.var2\"",
                                    "static": false,
                                    "readonly": true,
                                    "def": "std::string var2 = \"Example.var2\""
                                },
                                "dict_test": {
                                    "type": "func",
                                    "name": "dict_test",
                                    "doc": {
                                        "brief": "dict_test, return dict type, and element is pointer type(alloc in C++).\\nHere when the returned Tensor object will auto delete by Python GC.",
                                        "maixpy": "maix.example.Example.dict_test",
                                        "py_doc": "dict_test, return dict type, and element is pointer type(alloc in C++).\nHere when the returned Tensor object will auto delete by Python GC."
                                    },
                                    "args": [],
                                    "ret_type": "std::map<std::string, example::Test *>*",
                                    "static": true,
                                    "def": "static std::map<std::string, example::Test *> *dict_test()"
                                }
                            },
                            "def": "class Example"
                        },
                        "change_arg_name": {
                            "type": "func",
                            "name": "change_arg_name",
                            "doc": {
                                "brief": "Change arg name example",
                                "param": {
                                    "e": "Example object"
                                },
                                "return": "same as arg",
                                "maixpy": "maix.example.change_arg_name",
                                "py_doc": "Change arg name example\n\nArgs:\n  - e: Example object\n\n\nReturns: same as arg\n"
                            },
                            "args": [
                                [
                                    "example::Example *",
                                    "e",
                                    null
                                ]
                            ],
                            "ret_type": "example::Example*",
                            "static": false,
                            "def": "example::Example *change_arg_name(example::Example *e)"
                        },
                        "change_arg_name2": {
                            "type": "func",
                            "name": "change_arg_name2",
                            "doc": {
                                "brief": "Change arg name example",
                                "param": {
                                    "e": "Example object"
                                },
                                "maixpy": "maix.example.change_arg_name2",
                                "py_doc": "Change arg name example\n\nArgs:\n  - e: Example object\n"
                            },
                            "args": [
                                [
                                    "example::Example &",
                                    "e",
                                    null
                                ]
                            ],
                            "ret_type": "void",
                            "static": false,
                            "def": "void change_arg_name2(example::Example &e)"
                        }
                    },
                    "auto_add": false
                },
                "app": {
                    "type": "module",
                    "doc": {
                        "brief": "maix.app module"
                    },
                    "members": {
                        "Version": {
                            "type": "class",
                            "name": "Version",
                            "doc": {
                                "brief": "APP version",
                                "maixpy": "maix.app.Version",
                                "py_doc": "APP version"
                            },
                            "members": {
                                "__str__": {
                                    "type": "func",
                                    "name": "__str__",
                                    "doc": {
                                        "brief": "Convert to string, e.g. 1.0.0",
                                        "maixpy": "maix.app.Version.__str__",
                                        "py_doc": "Convert to string, e.g. 1.0.0"
                                    },
                                    "args": [],
                                    "ret_type": "std::string",
                                    "static": false,
                                    "def": "std::string __str__()"
                                },
                                "from_str": {
                                    "type": "func",
                                    "name": "from_str",
                                    "doc": {
                                        "brief": "Convert from string, e.g. \\\"1.0.0\\\"",
                                        "maixpy": "maix.app.Version.from_str",
                                        "py_doc": "Convert from string, e.g. \"1.0.0\""
                                    },
                                    "args": [
                                        [
                                            "const string &",
                                            "version_str",
                                            null
                                        ]
                                    ],
                                    "ret_type": "app::Version",
                                    "static": true,
                                    "def": "static app::Version from_str(const string &version_str)"
                                }
                            },
                            "def": "class Version"
                        },
                        "APP_Info": {
                            "type": "class",
                            "name": "APP_Info",
                            "doc": {
                                "brief": "APP info",
                                "maixpy": "maix.app.APP_Info",
                                "py_doc": "APP info"
                            },
                            "members": {
                                "id": {
                                    "type": "var",
                                    "name": "id",
                                    "doc": {
                                        "brief": "APP id",
                                        "maixpy": "maix.app.APP_Info.id",
                                        "py_doc": "APP id"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "string id"
                                },
                                "name": {
                                    "type": "var",
                                    "name": "name",
                                    "doc": {
                                        "brief": "APP name",
                                        "maixpy": "maix.app.APP_Info.name",
                                        "py_doc": "APP name"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "string name"
                                },
                                "icon": {
                                    "type": "var",
                                    "name": "icon",
                                    "doc": {
                                        "brief": "APP icon",
                                        "maixpy": "maix.app.APP_Info.icon",
                                        "py_doc": "APP icon"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "string icon"
                                },
                                "version": {
                                    "type": "var",
                                    "name": "version",
                                    "doc": {
                                        "brief": "APP version",
                                        "maixpy": "maix.app.APP_Info.version",
                                        "py_doc": "APP version"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "Version version"
                                },
                                "exec": {
                                    "type": "var",
                                    "name": "exec",
                                    "doc": {
                                        "brief": "APP exec",
                                        "maixpy": "maix.app.APP_Info.exec",
                                        "py_doc": "APP exec"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "string exec"
                                },
                                "author": {
                                    "type": "var",
                                    "name": "author",
                                    "doc": {
                                        "brief": "APP author",
                                        "maixpy": "maix.app.APP_Info.author",
                                        "py_doc": "APP author"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "string author"
                                },
                                "desc": {
                                    "type": "var",
                                    "name": "desc",
                                    "doc": {
                                        "brief": "APP desc",
                                        "maixpy": "maix.app.APP_Info.desc",
                                        "py_doc": "APP desc"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "string desc"
                                },
                                "names": {
                                    "type": "var",
                                    "name": "names",
                                    "doc": {
                                        "brief": "APP names",
                                        "maixpy": "maix.app.APP_Info.names",
                                        "py_doc": "APP names"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "map<string, string> names"
                                },
                                "descs": {
                                    "type": "var",
                                    "name": "descs",
                                    "doc": {
                                        "brief": "APP descs",
                                        "maixpy": "maix.app.APP_Info.descs",
                                        "py_doc": "APP descs"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "map<string, string> descs"
                                }
                            },
                            "def": "class APP_Info"
                        },
                        "app_id": {
                            "type": "func",
                            "name": "app_id",
                            "doc": {
                                "brief": "Get current APP ID.",
                                "return": "APP ID.",
                                "maixpy": "maix.app.app_id",
                                "py_doc": "Get current APP ID.\n\nReturns: APP ID.\n"
                            },
                            "args": [],
                            "ret_type": "string",
                            "static": false,
                            "def": "string app_id()"
                        },
                        "set_app_id": {
                            "type": "func",
                            "name": "set_app_id",
                            "doc": {
                                "brief": "Set current APP ID.",
                                "param": {
                                    "app_id": "APP ID."
                                },
                                "maixpy": "maix.app.set_app_id",
                                "py_doc": "Set current APP ID.\n\nArgs:\n  - app_id: APP ID.\n"
                            },
                            "args": [
                                [
                                    "const string &",
                                    "app_id",
                                    null
                                ]
                            ],
                            "ret_type": "string",
                            "static": false,
                            "def": "string set_app_id(const string &app_id)"
                        },
                        "get_apps_info_path": {
                            "type": "func",
                            "name": "get_apps_info_path",
                            "doc": {
                                "brief": "Get APP info file path.",
                                "maixpy": "maix.app.get_apps_info_path",
                                "py_doc": "Get APP info file path."
                            },
                            "args": [],
                            "ret_type": "string",
                            "static": false,
                            "def": "string get_apps_info_path()"
                        },
                        "get_apps_info": {
                            "type": "func",
                            "name": "get_apps_info",
                            "doc": {
                                "brief": "Get APP info list.",
                                "param": {
                                    "ignore_launcher": "if true, ignore launcher APP. default false.",
                                    "ignore_app_store": "if true, ignore app store APP. default false."
                                },
                                "return": "APP info list. APP_Info object list.",
                                "maixpy": "maix.app.get_apps_info",
                                "py_doc": "Get APP info list.\n\nArgs:\n  - ignore_launcher: if true, ignore launcher APP. default false.\n  - ignore_app_store: if true, ignore app store APP. default false.\n\n\nReturns: APP info list. APP_Info object list.\n"
                            },
                            "args": [
                                [
                                    "bool",
                                    "ignore_launcher",
                                    "false"
                                ],
                                [
                                    "bool",
                                    "ignore_app_store",
                                    "false"
                                ]
                            ],
                            "ret_type": "vector<app::APP_Info>&",
                            "static": false,
                            "def": "vector<app::APP_Info> &get_apps_info(bool ignore_launcher = false, bool ignore_app_store = false)"
                        },
                        "get_app_data_path": {
                            "type": "func",
                            "name": "get_app_data_path",
                            "doc": {
                                "brief": "Get APP info, APP can store private data in this directory.",
                                "return": "APP data path \"./data\", just return the data folder in current path because APP executed in app install path or project path.\nSo, you must execute your program in you project path to use the project/data folder when you debug your APP.",
                                "maixpy": "maix.app.get_app_data_path",
                                "py_doc": "Get APP info, APP can store private data in this directory.\n\nReturns: APP data path \"./data\", just return the data folder in current path because APP executed in app install path or project path.\nSo, you must execute your program in you project path to use the project/data folder when you debug your APP.\n"
                            },
                            "args": [],
                            "ret_type": "string",
                            "static": false,
                            "def": "string get_app_data_path()"
                        },
                        "get_app_path": {
                            "type": "func",
                            "name": "get_app_path",
                            "doc": {
                                "brief": "Get APP path.",
                                "param": {
                                    "app_id": "APP ID, if empty, return current APP path, else return the APP path by app_id."
                                },
                                "return": "APP path, just return the current path because APP executed in app install path or project path.\nSo, you must execute your program in you project path to use the project/data folder when you debug your APP.",
                                "maixpy": "maix.app.get_app_path",
                                "py_doc": "Get APP path.\n\nArgs:\n  - app_id: APP ID, if empty, return current APP path, else return the APP path by app_id.\n\n\nReturns: APP path, just return the current path because APP executed in app install path or project path.\nSo, you must execute your program in you project path to use the project/data folder when you debug your APP.\n"
                            },
                            "args": [
                                [
                                    "const string &",
                                    "app_id",
                                    "\"\""
                                ]
                            ],
                            "ret_type": "string",
                            "static": false,
                            "def": "string get_app_path(const string &app_id = \"\")"
                        },
                        "get_tmp_path": {
                            "type": "func",
                            "name": "get_tmp_path",
                            "doc": {
                                "brief": "Get global temporary data path, APPs can use this path as temporary data directory.",
                                "return": "temporary data path.",
                                "maixpy": "maix.app.get_tmp_path",
                                "py_doc": "Get global temporary data path, APPs can use this path as temporary data directory.\n\nReturns: temporary data path.\n"
                            },
                            "args": [],
                            "ret_type": "string",
                            "static": false,
                            "def": "string get_tmp_path()"
                        },
                        "get_share_path": {
                            "type": "func",
                            "name": "get_share_path",
                            "doc": {
                                "brief": "Get data path of share, shared data like picture and video will put in this directory",
                                "return": "share data path.",
                                "maixpy": "maix.app.get_share_path",
                                "py_doc": "Get data path of share, shared data like picture and video will put in this directory\n\nReturns: share data path.\n"
                            },
                            "args": [],
                            "ret_type": "string",
                            "static": false,
                            "def": "string get_share_path()"
                        },
                        "get_picture_path": {
                            "type": "func",
                            "name": "get_picture_path",
                            "doc": {
                                "brief": "Get picture path of share, shared picture will put in this directory",
                                "return": "share picture path.",
                                "maixpy": "maix.app.get_picture_path",
                                "py_doc": "Get picture path of share, shared picture will put in this directory\n\nReturns: share picture path.\n"
                            },
                            "args": [],
                            "ret_type": "string",
                            "static": false,
                            "def": "string get_picture_path()"
                        },
                        "get_video_path": {
                            "type": "func",
                            "name": "get_video_path",
                            "doc": {
                                "brief": "Get video path of share, shared video will put in this directory",
                                "return": "share video path.",
                                "maixpy": "maix.app.get_video_path",
                                "py_doc": "Get video path of share, shared video will put in this directory\n\nReturns: share video path.\n"
                            },
                            "args": [],
                            "ret_type": "string",
                            "static": false,
                            "def": "string get_video_path()"
                        },
                        "get_font_path": {
                            "type": "func",
                            "name": "get_font_path",
                            "doc": {
                                "brief": "Get font path of share, shared font will put in this directory",
                                "return": "share font path.",
                                "maixpy": "maix.app.get_font_path",
                                "py_doc": "Get font path of share, shared font will put in this directory\n\nReturns: share font path.\n"
                            },
                            "args": [],
                            "ret_type": "string",
                            "static": false,
                            "def": "string get_font_path()"
                        },
                        "get_icon_path": {
                            "type": "func",
                            "name": "get_icon_path",
                            "doc": {
                                "brief": "Get icon path of share, shared icon will put in this directory",
                                "return": "share icon path.",
                                "maixpy": "maix.app.get_icon_path",
                                "py_doc": "Get icon path of share, shared icon will put in this directory\n\nReturns: share icon path.\n"
                            },
                            "args": [],
                            "ret_type": "string",
                            "static": false,
                            "def": "string get_icon_path()"
                        },
                        "get_sys_config_kv": {
                            "type": "func",
                            "name": "get_sys_config_kv",
                            "doc": {
                                "brief": "Get system config item value.",
                                "param": {
                                    "item": "name of setting item, e.g. wifi, language. more see settings APP.",
                                    "key": "config key, e.g. for wifi, key can be ssid, for language, key can be locale.",
                                    "value": "default value, if not found, return this value.",
                                    "from_cache": "if true, read from cache, if false, read from file."
                                },
                                "return": "config value, always string type, if not found, return empty string.",
                                "maixpy": "maix.app.get_sys_config_kv",
                                "py_doc": "Get system config item value.\n\nArgs:\n  - item: name of setting item, e.g. wifi, language. more see settings APP.\n  - key: config key, e.g. for wifi, key can be ssid, for language, key can be locale.\n  - value: default value, if not found, return this value.\n  - from_cache: if true, read from cache, if false, read from file.\n\n\nReturns: config value, always string type, if not found, return empty string.\n"
                            },
                            "args": [
                                [
                                    "const string &",
                                    "item",
                                    null
                                ],
                                [
                                    "const string &",
                                    "key",
                                    null
                                ],
                                [
                                    "const string &",
                                    "value",
                                    "\"\""
                                ],
                                [
                                    "bool",
                                    "from_cache",
                                    "true"
                                ]
                            ],
                            "ret_type": "string",
                            "static": false,
                            "def": "string get_sys_config_kv(const string &item, const string &key, const string &value = \"\", bool from_cache = true)"
                        },
                        "get_app_config_kv": {
                            "type": "func",
                            "name": "get_app_config_kv",
                            "doc": {
                                "brief": "Get APP config item value.",
                                "param": {
                                    "item": "name of setting item, e.g. user_info",
                                    "key": "config key, e.g. for user_info, key can be name, age etc.",
                                    "value": "default value, if not found, return this value.",
                                    "from_cache": "if true, read from cache, if false, read from file."
                                },
                                "return": "config value, always string type, if not found, return empty string.",
                                "maixpy": "maix.app.get_app_config_kv",
                                "py_doc": "Get APP config item value.\n\nArgs:\n  - item: name of setting item, e.g. user_info\n  - key: config key, e.g. for user_info, key can be name, age etc.\n  - value: default value, if not found, return this value.\n  - from_cache: if true, read from cache, if false, read from file.\n\n\nReturns: config value, always string type, if not found, return empty string.\n"
                            },
                            "args": [
                                [
                                    "const string &",
                                    "item",
                                    null
                                ],
                                [
                                    "const string &",
                                    "key",
                                    null
                                ],
                                [
                                    "const string &",
                                    "value",
                                    "\"\""
                                ],
                                [
                                    "bool",
                                    "from_cache",
                                    "true"
                                ]
                            ],
                            "ret_type": "string",
                            "static": false,
                            "def": "string get_app_config_kv(const string &item, const string &key, const string &value = \"\", bool from_cache = true)"
                        },
                        "set_app_config_kv": {
                            "type": "func",
                            "name": "set_app_config_kv",
                            "doc": {
                                "brief": "Set APP config item value.",
                                "param": {
                                    "item": "name of setting item, e.g. user_info",
                                    "key": "config key, e.g. for user_info, key can be name, age etc.",
                                    "value": "config value, always string type.",
                                    "write_file": "if true, write to file, if false, just write to cache."
                                },
                                "return": "err::Err",
                                "maixpy": "maix.app.set_app_config_kv",
                                "py_doc": "Set APP config item value.\n\nArgs:\n  - item: name of setting item, e.g. user_info\n  - key: config key, e.g. for user_info, key can be name, age etc.\n  - value: config value, always string type.\n  - write_file: if true, write to file, if false, just write to cache.\n\n\nReturns: err::Err\n"
                            },
                            "args": [
                                [
                                    "const string &",
                                    "item",
                                    null
                                ],
                                [
                                    "const string &",
                                    "key",
                                    null
                                ],
                                [
                                    "const string &",
                                    "value",
                                    null
                                ],
                                [
                                    "bool",
                                    "write_file",
                                    "true"
                                ]
                            ],
                            "ret_type": "err::Err",
                            "static": false,
                            "def": "err::Err set_app_config_kv(const string &item, const string &key, const string &value, bool write_file = true)"
                        },
                        "get_app_config_path": {
                            "type": "func",
                            "name": "get_app_config_path",
                            "doc": {
                                "brief": "Get APP config path, ini format, so you can use your own ini parser to parse it like `configparser` in Python.\\nAll APP config info is recommended to store in this file.",
                                "return": "APP config path(ini format).",
                                "maixpy": "maix.app.get_app_config_path",
                                "py_doc": "Get APP config path, ini format, so you can use your own ini parser to parse it like `configparser` in Python.\nAll APP config info is recommended to store in this file.\n\nReturns: APP config path(ini format).\n"
                            },
                            "args": [],
                            "ret_type": "string",
                            "static": false,
                            "def": "string get_app_config_path()"
                        },
                        "set_exit_msg": {
                            "type": "func",
                            "name": "set_exit_msg",
                            "doc": {
                                "brief": "Set APP exit code and exit message.\\nIf code != 0, the launcher will show a dialog to user, and display the msg.",
                                "param": {
                                    "code": "exit code, 0 means success, other means error, if code is 0, do nothing.",
                                    "msg": "exit message, if code is 0, msg is not used."
                                },
                                "return": "exit code, the same as arg @code.",
                                "maixpy": "maix.app.set_exit_msg",
                                "py_doc": "Set APP exit code and exit message.\nIf code != 0, the launcher will show a dialog to user, and display the msg.\n\nArgs:\n  - code: exit code, 0 means success, other means error, if code is 0, do nothing.\n  - msg: exit message, if code is 0, msg is not used.\n\n\nReturns: exit code, the same as arg @code.\n"
                            },
                            "args": [
                                [
                                    "err::Err",
                                    "code",
                                    null
                                ],
                                [
                                    "const string &",
                                    "msg",
                                    null
                                ]
                            ],
                            "ret_type": "err::Err",
                            "static": false,
                            "def": "err::Err set_exit_msg(err::Err code, const string &msg)"
                        },
                        "get_exit_msg": {
                            "type": "func",
                            "name": "get_exit_msg",
                            "doc": {
                                "brief": "Get APP exit code and exit message.",
                                "param": {
                                    "cache": "if true, read from cache, if false, read from file. default false."
                                },
                                "return": "exit return app_id, exit code and exit message.",
                                "maixpy": "maix.app.get_exit_msg",
                                "py_doc": "Get APP exit code and exit message.\n\nArgs:\n  - cache: if true, read from cache, if false, read from file. default false.\n\n\nReturns: exit return app_id, exit code and exit message.\n"
                            },
                            "args": [
                                [
                                    "bool",
                                    "cache",
                                    "false"
                                ]
                            ],
                            "ret_type": "tuple<string, err::Err, string>",
                            "static": false,
                            "def": "tuple<string, err::Err, string> get_exit_msg(bool cache = false)"
                        },
                        "have_exit_msg": {
                            "type": "func",
                            "name": "have_exit_msg",
                            "doc": {
                                "brief": "Check if have exit msg",
                                "param": {
                                    "cache": "if true, just check from cache, if false, check from file. default false."
                                },
                                "return": "true if have exit msg, false if not.",
                                "maixpy": "maix.app.have_exit_msg",
                                "py_doc": "Check if have exit msg\n\nArgs:\n  - cache: if true, just check from cache, if false, check from file. default false.\n\n\nReturns: true if have exit msg, false if not.\n"
                            },
                            "args": [
                                [
                                    "bool",
                                    "cache",
                                    "false"
                                ]
                            ],
                            "ret_type": "bool",
                            "static": false,
                            "def": "bool have_exit_msg(bool cache = false)"
                        },
                        "switch_app": {
                            "type": "func",
                            "name": "switch_app",
                            "doc": {
                                "brief": "Exit this APP and start another APP(by launcher).\\nCall this API will call set_exit_flag(true), you should check app::need_exit() in your code.\\nAnd exit this APP if app::need_exit() return true.",
                                "param": {
                                    "app_id": "APP ID which will be started. app_id and idx must have one is valid.",
                                    "idx": "APP index. app_id and idx must have one is valid."
                                },
                                "maixpy": "maix.app.switch_app",
                                "py_doc": "Exit this APP and start another APP(by launcher).\nCall this API will call set_exit_flag(true), you should check app::need_exit() in your code.\nAnd exit this APP if app::need_exit() return true.\n\nArgs:\n  - app_id: APP ID which will be started. app_id and idx must have one is valid.\n  - idx: APP index. app_id and idx must have one is valid.\n"
                            },
                            "args": [
                                [
                                    "const string &",
                                    "app_id",
                                    null
                                ],
                                [
                                    "int",
                                    "idx",
                                    "-1"
                                ]
                            ],
                            "ret_type": "void",
                            "static": false,
                            "def": "void switch_app(const string &app_id, int idx = -1)"
                        },
                        "need_exit": {
                            "type": "func",
                            "name": "need_exit",
                            "doc": {
                                "brief": "Shoule this APP exit?",
                                "return": "true if this APP should exit, false if not.",
                                "attention": "This API is a function, not a variable.",
                                "maixpy": "maix.app.need_exit",
                                "py_doc": "Shoule this APP exit?\n\nReturns: true if this APP should exit, false if not.\n"
                            },
                            "args": [],
                            "ret_type": "bool",
                            "static": false,
                            "def": "bool need_exit()"
                        },
                        "running": {
                            "type": "func",
                            "name": "running",
                            "doc": {
                                "brief": "App should running? The same as !app::need_exit() (not app::need_exit() in MaixPy).",
                                "return": "true if this APP should running, false if not.",
                                "attention": "This API is a function, not a variable.",
                                "maixpy": "maix.app.running",
                                "py_doc": "App should running? The same as !app::need_exit() (not app::need_exit() in MaixPy).\n\nReturns: true if this APP should running, false if not.\n"
                            },
                            "args": [],
                            "ret_type": "bool",
                            "static": false,
                            "def": "bool running()"
                        },
                        "set_exit_flag": {
                            "type": "func",
                            "name": "set_exit_flag",
                            "doc": {
                                "brief": "Set exit flag. You can get exit flag by app.need_exit().",
                                "param": {
                                    "exit": "true if this APP should exit, false if not."
                                },
                                "maixpy": "maix.app.set_exit_flag",
                                "py_doc": "Set exit flag. You can get exit flag by app.need_exit().\n\nArgs:\n  - exit: true if this APP should exit, false if not.\n"
                            },
                            "args": [
                                [
                                    "bool",
                                    "exit",
                                    null
                                ]
                            ],
                            "ret_type": "void",
                            "static": false,
                            "def": "void set_exit_flag(bool exit)"
                        }
                    },
                    "auto_add": true
                },
                "nn": {
                    "type": "module",
                    "doc": {
                        "brief": "maix.nn module"
                    },
                    "members": {
                        "YOLOv5": {
                            "type": "class",
                            "name": "YOLOv5",
                            "doc": {
                                "brief": "YOLOv5 class",
                                "maixpy": "maix.nn.YOLOv5",
                                "py_doc": "YOLOv5 class"
                            },
                            "members": {
                                "__init__": {
                                    "type": "func",
                                    "name": "YOLOv5",
                                    "doc": {
                                        "brief": "Constructor of YOLOv5 class",
                                        "param": {
                                            "model": "model path, default empty, you can load model later by load function."
                                        },
                                        "throw": "If model arg is not empty and load failed, will throw err::Exception.",
                                        "maixpy": "maix.nn.YOLOv5.__init__",
                                        "maixcdk": "maix.nn.YOLOv5.YOLOv5",
                                        "py_doc": "Constructor of YOLOv5 class\n\nArgs:\n  - model: model path, default empty, you can load model later by load function.\n"
                                    },
                                    "args": [
                                        [
                                            "const string &",
                                            "model",
                                            "\"\""
                                        ]
                                    ],
                                    "ret_type": null,
                                    "static": false,
                                    "def": "YOLOv5(const string &model = \"\")"
                                },
                                "load": {
                                    "type": "func",
                                    "name": "load",
                                    "doc": {
                                        "brief": "Load model from file",
                                        "param": {
                                            "model": "Model path want to load"
                                        },
                                        "return": "err::Err",
                                        "maixpy": "maix.nn.YOLOv5.load",
                                        "py_doc": "Load model from file\n\nArgs:\n  - model: Model path want to load\n\n\nReturns: err::Err\n"
                                    },
                                    "args": [
                                        [
                                            "const string &",
                                            "model",
                                            null
                                        ]
                                    ],
                                    "ret_type": "err::Err",
                                    "static": false,
                                    "def": "err::Err load(const string &model)"
                                },
                                "detect": {
                                    "type": "func",
                                    "name": "detect",
                                    "doc": {
                                        "brief": "Detect objects from image",
                                        "param": {
                                            "img": "Image want to detect, if image's size not match model input's, will auto resize with fit method.",
                                            "conf_th": "Confidence threshold, default 0.5.",
                                            "iou_th": "IoU threshold, default 0.45.",
                                            "fit": "Resize method, default image.Fit.FIT_CONTAIN."
                                        },
                                        "throw": "If image format not match model input format, will throw err::Exception.",
                                        "return": "Object list. In C++, you should delete it after use.",
                                        "maixpy": "maix.nn.YOLOv5.detect",
                                        "py_doc": "Detect objects from image\n\nArgs:\n  - img: Image want to detect, if image's size not match model input's, will auto resize with fit method.\n  - conf_th: Confidence threshold, default 0.5.\n  - iou_th: IoU threshold, default 0.45.\n  - fit: Resize method, default image.Fit.FIT_CONTAIN.\n\n\nReturns: Object list. In C++, you should delete it after use.\n"
                                    },
                                    "args": [
                                        [
                                            "image::Image &",
                                            "img",
                                            null
                                        ],
                                        [
                                            "float",
                                            "conf_th",
                                            "0.5"
                                        ],
                                        [
                                            "float",
                                            "iou_th",
                                            "0.45"
                                        ],
                                        [
                                            "maix::image::Fit",
                                            "fit",
                                            "maix::image::FIT_CONTAIN"
                                        ]
                                    ],
                                    "ret_type": "std::vector<nn::Object>*",
                                    "static": false,
                                    "def": "std::vector<nn::Object> *detect(image::Image &img, float conf_th = 0.5, float iou_th = 0.45, maix::image::Fit fit = maix::image::FIT_CONTAIN)"
                                },
                                "input_size": {
                                    "type": "func",
                                    "name": "input_size",
                                    "doc": {
                                        "brief": "Get model input size",
                                        "return": "model input size",
                                        "maixpy": "maix.nn.YOLOv5.input_size",
                                        "py_doc": "Get model input size\n\nReturns: model input size\n"
                                    },
                                    "args": [],
                                    "ret_type": "image::Size",
                                    "static": false,
                                    "def": "image::Size input_size()"
                                },
                                "input_width": {
                                    "type": "func",
                                    "name": "input_width",
                                    "doc": {
                                        "brief": "Get model input width",
                                        "return": "model input size of width",
                                        "maixpy": "maix.nn.YOLOv5.input_width",
                                        "py_doc": "Get model input width\n\nReturns: model input size of width\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int input_width()"
                                },
                                "input_height": {
                                    "type": "func",
                                    "name": "input_height",
                                    "doc": {
                                        "brief": "Get model input height",
                                        "return": "model input size of height",
                                        "maixpy": "maix.nn.YOLOv5.input_height",
                                        "py_doc": "Get model input height\n\nReturns: model input size of height\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int input_height()"
                                },
                                "input_format": {
                                    "type": "func",
                                    "name": "input_format",
                                    "doc": {
                                        "brief": "Get input image format",
                                        "return": "input image format, image::Format type.",
                                        "maixpy": "maix.nn.YOLOv5.input_format",
                                        "py_doc": "Get input image format\n\nReturns: input image format, image::Format type.\n"
                                    },
                                    "args": [],
                                    "ret_type": "image::Format",
                                    "static": false,
                                    "def": "image::Format input_format()"
                                },
                                "labels": {
                                    "type": "var",
                                    "name": "labels",
                                    "doc": {
                                        "brief": "Labels list",
                                        "maixpy": "maix.nn.YOLOv5.labels",
                                        "py_doc": "Labels list"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "std::vector<string> labels"
                                },
                                "label_path": {
                                    "type": "var",
                                    "name": "label_path",
                                    "doc": {
                                        "brief": "Label file path",
                                        "maixpy": "maix.nn.YOLOv5.label_path",
                                        "py_doc": "Label file path"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "std::string label_path"
                                },
                                "mean": {
                                    "type": "var",
                                    "name": "mean",
                                    "doc": {
                                        "brief": "Get mean value, list type",
                                        "maixpy": "maix.nn.YOLOv5.mean",
                                        "py_doc": "Get mean value, list type"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "std::vector<float> mean"
                                },
                                "scale": {
                                    "type": "var",
                                    "name": "scale",
                                    "doc": {
                                        "brief": "Get scale value, list type",
                                        "maixpy": "maix.nn.YOLOv5.scale",
                                        "py_doc": "Get scale value, list type"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "std::vector<float> scale"
                                },
                                "anchors": {
                                    "type": "var",
                                    "name": "anchors",
                                    "doc": {
                                        "brief": "Get anchors",
                                        "maixpy": "maix.nn.YOLOv5.anchors",
                                        "py_doc": "Get anchors"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "std::vector<float> anchors"
                                }
                            },
                            "def": "class YOLOv5"
                        },
                        "Classifier": {
                            "type": "class",
                            "name": "Classifier",
                            "doc": {
                                "brief": "Classifier",
                                "maixpy": "maix.nn.Classifier",
                                "py_doc": "Classifier"
                            },
                            "members": {
                                "__init__": {
                                    "type": "func",
                                    "name": "Classifier",
                                    "doc": {
                                        "brief": "Construct a new Classifier object",
                                        "param": {
                                            "model": "MUD model path, if empty, will not load model, you can call load() later.\nif not empty, will load model and will raise err::Exception if load failed."
                                        },
                                        "maixpy": "maix.nn.Classifier.__init__",
                                        "maixcdk": "maix.nn.Classifier.Classifier",
                                        "py_doc": "Construct a new Classifier object\n\nArgs:\n  - model: MUD model path, if empty, will not load model, you can call load() later.\nif not empty, will load model and will raise err::Exception if load failed.\n"
                                    },
                                    "args": [
                                        [
                                            "const string &",
                                            "model",
                                            "\"\""
                                        ]
                                    ],
                                    "ret_type": null,
                                    "static": false,
                                    "def": "Classifier(const string &model = \"\")"
                                },
                                "load": {
                                    "type": "func",
                                    "name": "load",
                                    "doc": {
                                        "brief": "Load model from file, model format is .mud,\\nMUD file should contain [extra] section, have key-values:\\n- model_type: classifier\\n- input_type: rgb or bgr\\n- mean: 123.675, 116.28, 103.53\\n- scale: 0.017124753831663668, 0.01750700280112045, 0.017429193899782137\\n- labels: imagenet_classes.txt",
                                        "param": {
                                            "model": "MUD model path"
                                        },
                                        "return": "error code, if load failed, return error code",
                                        "maixpy": "maix.nn.Classifier.load",
                                        "py_doc": "Load model from file, model format is .mud,\nMUD file should contain [extra] section, have key-values:\n- model_type: classifier\n- input_type: rgb or bgr\n- mean: 123.675, 116.28, 103.53\n- scale: 0.017124753831663668, 0.01750700280112045, 0.017429193899782137\n- labels: imagenet_classes.txt\n\nArgs:\n  - model: MUD model path\n\n\nReturns: error code, if load failed, return error code\n"
                                    },
                                    "args": [
                                        [
                                            "const string &",
                                            "model",
                                            null
                                        ]
                                    ],
                                    "ret_type": "err::Err",
                                    "static": false,
                                    "def": "err::Err load(const string &model)"
                                },
                                "classify": {
                                    "type": "func",
                                    "name": "classify",
                                    "doc": {
                                        "brief": "Forward image to model, get result. Only for image input, use classify_raw for tensor input.",
                                        "param": {
                                            "img": "image, format should match model input_type\uff0c or will raise err.Exception",
                                            "softmax": "if true, will do softmax to result, or will return raw value"
                                        },
                                        "throw": "If error occurred, will raise err::Exception, you can find reason in log, mostly caused by args error or hardware error.",
                                        "return": "result, a list of (label, score). In C++, you need to delete it after use.",
                                        "maixpy": "maix.nn.Classifier.classify",
                                        "py_doc": "Forward image to model, get result. Only for image input, use classify_raw for tensor input.\n\nArgs:\n  - img: image, format should match model input_type\uff0c or will raise err.Exception\n  - softmax: if true, will do softmax to result, or will return raw value\n\n\nReturns: result, a list of (label, score). In C++, you need to delete it after use.\n"
                                    },
                                    "args": [
                                        [
                                            "image::Image &",
                                            "img",
                                            null
                                        ],
                                        [
                                            "bool",
                                            "softmax",
                                            "true"
                                        ]
                                    ],
                                    "ret_type": "std::vector<std::pair<int, float>>*",
                                    "static": false,
                                    "def": "std::vector<std::pair<int, float>> *classify(image::Image &img, bool softmax = true)"
                                },
                                "classify_raw": {
                                    "type": "func",
                                    "name": "classify_raw",
                                    "doc": {
                                        "brief": "Forward tensor data to model, get result",
                                        "param": {
                                            "data": "tensor data, format should match model input_type\uff0c or will raise err.Excetion",
                                            "softmax": "if true, will do softmax to result, or will return raw value"
                                        },
                                        "throw": "If error occurred, will raise err::Exception, you can find reason in log, mostly caused by args error or hardware error.",
                                        "return": "result, a list of (label, score). In C++, you need to delete it after use.",
                                        "maixpy": "maix.nn.Classifier.classify_raw",
                                        "py_doc": "Forward tensor data to model, get result\n\nArgs:\n  - data: tensor data, format should match model input_type\uff0c or will raise err.Excetion\n  - softmax: if true, will do softmax to result, or will return raw value\n\n\nReturns: result, a list of (label, score). In C++, you need to delete it after use.\n"
                                    },
                                    "args": [
                                        [
                                            "tensor::Tensor &",
                                            "data",
                                            null
                                        ],
                                        [
                                            "bool",
                                            "softmax",
                                            "true"
                                        ]
                                    ],
                                    "ret_type": "std::vector<std::pair<int, float>>*",
                                    "static": false,
                                    "def": "std::vector<std::pair<int, float>> *classify_raw(tensor::Tensor &data, bool softmax = true)"
                                },
                                "input_size": {
                                    "type": "func",
                                    "name": "input_size",
                                    "doc": {
                                        "brief": "Get model input size, only for image input",
                                        "return": "model input size",
                                        "maixpy": "maix.nn.Classifier.input_size",
                                        "py_doc": "Get model input size, only for image input\n\nReturns: model input size\n"
                                    },
                                    "args": [],
                                    "ret_type": "image::Size",
                                    "static": false,
                                    "def": "image::Size input_size()"
                                },
                                "input_width": {
                                    "type": "func",
                                    "name": "input_width",
                                    "doc": {
                                        "brief": "Get model input width, only for image input",
                                        "return": "model input size of width",
                                        "maixpy": "maix.nn.Classifier.input_width",
                                        "py_doc": "Get model input width, only for image input\n\nReturns: model input size of width\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int input_width()"
                                },
                                "input_height": {
                                    "type": "func",
                                    "name": "input_height",
                                    "doc": {
                                        "brief": "Get model input height, only for image input",
                                        "return": "model input size of height",
                                        "maixpy": "maix.nn.Classifier.input_height",
                                        "py_doc": "Get model input height, only for image input\n\nReturns: model input size of height\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int input_height()"
                                },
                                "input_format": {
                                    "type": "func",
                                    "name": "input_format",
                                    "doc": {
                                        "brief": "Get input image format, only for image input",
                                        "return": "input image format, image::Format type.",
                                        "maixpy": "maix.nn.Classifier.input_format",
                                        "py_doc": "Get input image format, only for image input\n\nReturns: input image format, image::Format type.\n"
                                    },
                                    "args": [],
                                    "ret_type": "image::Format",
                                    "static": false,
                                    "def": "image::Format input_format()"
                                },
                                "input_shape": {
                                    "type": "func",
                                    "name": "input_shape",
                                    "doc": {
                                        "brief": "Get input shape, if have multiple input, only return first input shape",
                                        "return": "input shape, list type",
                                        "maixpy": "maix.nn.Classifier.input_shape",
                                        "py_doc": "Get input shape, if have multiple input, only return first input shape\n\nReturns: input shape, list type\n"
                                    },
                                    "args": [],
                                    "ret_type": "std::vector<int>",
                                    "static": false,
                                    "def": "std::vector<int> input_shape()"
                                },
                                "labels": {
                                    "type": "var",
                                    "name": "labels",
                                    "doc": {
                                        "brief": "Labels list",
                                        "maixpy": "maix.nn.Classifier.labels",
                                        "py_doc": "Labels list"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "std::vector<string> labels"
                                },
                                "label_path": {
                                    "type": "var",
                                    "name": "label_path",
                                    "doc": {
                                        "brief": "Label file path",
                                        "maixpy": "maix.nn.Classifier.label_path",
                                        "py_doc": "Label file path"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "std::string label_path"
                                },
                                "mean": {
                                    "type": "var",
                                    "name": "mean",
                                    "doc": {
                                        "brief": "Get mean value, list type",
                                        "maixpy": "maix.nn.Classifier.mean",
                                        "py_doc": "Get mean value, list type"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "std::vector<float> mean"
                                },
                                "scale": {
                                    "type": "var",
                                    "name": "scale",
                                    "doc": {
                                        "brief": "Get scale value, list type",
                                        "maixpy": "maix.nn.Classifier.scale",
                                        "py_doc": "Get scale value, list type"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "std::vector<float> scale"
                                }
                            },
                            "def": "class Classifier"
                        },
                        "MUD": {
                            "type": "class",
                            "name": "MUD",
                            "doc": {
                                "brief": "MUD(model universal describe file) class",
                                "maixpy": "maix.nn.MUD",
                                "py_doc": "MUD(model universal describe file) class"
                            },
                            "members": {
                                "__init__": {
                                    "type": "func",
                                    "name": "MUD",
                                    "doc": {
                                        "brief": "MUD constructor",
                                        "param": {
                                            "model_path": "direction [in], model file path, model format can be MUD(model universal describe file) file.\nIf model_path set, will load model from file, load failed will raise err.Exception.\nIf model_path not set, you can load model later by load function."
                                        },
                                        "maixpy": "maix.nn.MUD.__init__",
                                        "maixcdk": "maix.nn.MUD.MUD",
                                        "py_doc": "MUD constructor\n\nArgs:\n  - model_path: direction [in], model file path, model format can be MUD(model universal describe file) file.\nIf model_path set, will load model from file, load failed will raise err.Exception.\nIf model_path not set, you can load model later by load function.\n"
                                    },
                                    "args": [
                                        [
                                            "const char *",
                                            "model_path",
                                            "nullptr"
                                        ]
                                    ],
                                    "ret_type": null,
                                    "static": false,
                                    "def": "MUD(const char *model_path = nullptr)"
                                },
                                "load": {
                                    "type": "func",
                                    "name": "load",
                                    "doc": {
                                        "brief": "Load model from file",
                                        "param": {
                                            "model_path": "direction [in], model file path, model format can be MUD(model universal describe file) file."
                                        },
                                        "return": "error code, if load success, return err::ERR_NONE",
                                        "maixpy": "maix.nn.MUD.load",
                                        "py_doc": "Load model from file\n\nArgs:\n  - model_path: direction [in], model file path, model format can be MUD(model universal describe file) file.\n\n\nReturns: error code, if load success, return err::ERR_NONE\n"
                                    },
                                    "args": [
                                        [
                                            "const std::string &",
                                            "model_path",
                                            null
                                        ]
                                    ],
                                    "ret_type": "err::Err",
                                    "static": false,
                                    "def": "err::Err load(const std::string &model_path)"
                                },
                                "type": {
                                    "type": "var",
                                    "name": "type",
                                    "doc": {
                                        "brief": "Model type, string type",
                                        "maixpy": "maix.nn.MUD.type",
                                        "py_doc": "Model type, string type"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "std::string type"
                                },
                                "items": {
                                    "type": "var",
                                    "name": "items",
                                    "doc": {
                                        "brief": "Model config items, different model type has different config items",
                                        "maixpy": "maix.nn.MUD.items",
                                        "py_doc": "Model config items, different model type has different config items"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "std::map<std::string, std::map<std::string, std::string>> items"
                                }
                            },
                            "def": "class MUD"
                        },
                        "LayerInfo": {
                            "type": "class",
                            "name": "LayerInfo",
                            "doc": {
                                "brief": "NN model layer info",
                                "maixpy": "maix.nn.LayerInfo",
                                "py_doc": "NN model layer info"
                            },
                            "members": {
                                "__init__": {
                                    "type": "func",
                                    "name": "LayerInfo",
                                    "doc": {
                                        "brief": "LayerInfo constructor",
                                        "param": {
                                            "name": "direction [in], layer name",
                                            "dtype": "direction [in], layer data type",
                                            "shape": "direction [in], layer shape"
                                        },
                                        "maixpy": "maix.nn.LayerInfo.__init__",
                                        "maixcdk": "maix.nn.LayerInfo.LayerInfo",
                                        "py_doc": "LayerInfo constructor\n\nArgs:\n  - name: direction [in], layer name\n  - dtype: direction [in], layer data type\n  - shape: direction [in], layer shape\n"
                                    },
                                    "args": [
                                        [
                                            "const std::string &",
                                            "name",
                                            "\"\""
                                        ],
                                        [
                                            "tensor::DType",
                                            "dtype",
                                            "tensor::DType::FLOAT32"
                                        ],
                                        [
                                            "std::vector<int>",
                                            "shape",
                                            "std::vector<int>()"
                                        ]
                                    ],
                                    "ret_type": null,
                                    "static": false,
                                    "def": "LayerInfo(const std::string &name =  \"\", tensor::DType dtype = tensor::DType::FLOAT32, std::vector<int> shape = std::vector<int>())"
                                },
                                "name": {
                                    "type": "var",
                                    "name": "name",
                                    "doc": {
                                        "brief": "Layer name",
                                        "maixpy": "maix.nn.LayerInfo.name",
                                        "py_doc": "Layer name"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "std::string   name"
                                },
                                "dtype": {
                                    "type": "var",
                                    "name": "dtype",
                                    "doc": {
                                        "brief": "Layer data type",
                                        "attention": "If model is quantized, this is the real quantized data type like int8 float16,\nin most scene, inputs and outputs we actually use float32 in API like forward.",
                                        "maixpy": "maix.nn.LayerInfo.dtype",
                                        "py_doc": "Layer data type"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "tensor::DType dtype"
                                },
                                "shape": {
                                    "type": "var",
                                    "name": "shape",
                                    "doc": {
                                        "brief": "Layer shape",
                                        "maixpy": "maix.nn.LayerInfo.shape",
                                        "py_doc": "Layer shape"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "std::vector<int> shape"
                                },
                                "to_str": {
                                    "type": "func",
                                    "name": "to_str",
                                    "doc": {
                                        "brief": "To string",
                                        "maixpy": "maix.nn.LayerInfo.to_str",
                                        "py_doc": "To string"
                                    },
                                    "args": [],
                                    "ret_type": "std::string",
                                    "static": false,
                                    "def": "std::string to_str()"
                                },
                                "__str__": {
                                    "type": "func",
                                    "name": "__str__",
                                    "doc": {
                                        "brief": "To string",
                                        "maixpy": "maix.nn.LayerInfo.__str__",
                                        "py_doc": "To string"
                                    },
                                    "args": [],
                                    "ret_type": "std::string",
                                    "static": false,
                                    "def": "std::string __str__()"
                                }
                            },
                            "def": "class LayerInfo"
                        },
                        "NN": {
                            "type": "class",
                            "name": "NN",
                            "doc": {
                                "brief": "Neural network class",
                                "maixpy": "maix.nn.NN",
                                "py_doc": "Neural network class"
                            },
                            "members": {
                                "__init__": {
                                    "type": "func",
                                    "name": "NN",
                                    "doc": {
                                        "brief": "Neural network constructor",
                                        "param": {
                                            "model": "direction [in], model file path, model format can be MUD(model universal describe file) file.\nIf model_path set, will load model from file, load failed will raise err.Exception.\nIf model_path not set, you can load model later by load function."
                                        },
                                        "maixpy": "maix.nn.NN.__init__",
                                        "py_doc": "Neural network constructor\n\nArgs:\n  - model: direction [in], model file path, model format can be MUD(model universal describe file) file.\nIf model_path set, will load model from file, load failed will raise err.Exception.\nIf model_path not set, you can load model later by load function.\n"
                                    },
                                    "args": [
                                        [
                                            "const std::string &",
                                            "model",
                                            "\"\""
                                        ]
                                    ],
                                    "ret_type": null,
                                    "static": false,
                                    "def": "NN(const std::string &model = \"\")"
                                },
                                "load": {
                                    "type": "func",
                                    "name": "load",
                                    "doc": {
                                        "brief": "Load model from file",
                                        "param": {
                                            "model": "direction [in], model file path, model format can be MUD(model universal describe file) file."
                                        },
                                        "return": "error code, if load success, return err::ERR_NONE",
                                        "maixpy": "maix.nn.NN.load",
                                        "py_doc": "Load model from file\n\nArgs:\n  - model: direction [in], model file path, model format can be MUD(model universal describe file) file.\n\n\nReturns: error code, if load success, return err::ERR_NONE\n"
                                    },
                                    "args": [
                                        [
                                            "const std::string &",
                                            "model",
                                            null
                                        ]
                                    ],
                                    "ret_type": "err::Err",
                                    "static": false,
                                    "def": "err::Err load(const std::string &model)"
                                },
                                "loaded": {
                                    "type": "func",
                                    "name": "loaded",
                                    "doc": {
                                        "brief": "Is model loaded",
                                        "return": "true if model loaded, else false",
                                        "maixpy": "maix.nn.NN.loaded",
                                        "py_doc": "Is model loaded\n\nReturns: true if model loaded, else false\n"
                                    },
                                    "args": [],
                                    "ret_type": "bool",
                                    "static": false,
                                    "def": "bool loaded()"
                                },
                                "inputs_info": {
                                    "type": "func",
                                    "name": "inputs_info",
                                    "doc": {
                                        "brief": "Get model input layer info",
                                        "return": "input layer info",
                                        "maixpy": "maix.nn.NN.inputs_info",
                                        "py_doc": "Get model input layer info\n\nReturns: input layer info\n"
                                    },
                                    "args": [],
                                    "ret_type": "std::vector<nn::LayerInfo>",
                                    "static": false,
                                    "def": "std::vector<nn::LayerInfo> inputs_info()"
                                },
                                "outputs_info": {
                                    "type": "func",
                                    "name": "outputs_info",
                                    "doc": {
                                        "brief": "Get model output layer info",
                                        "return": "output layer info",
                                        "maixpy": "maix.nn.NN.outputs_info",
                                        "py_doc": "Get model output layer info\n\nReturns: output layer info\n"
                                    },
                                    "args": [],
                                    "ret_type": "std::vector<nn::LayerInfo>",
                                    "static": false,
                                    "def": "std::vector<nn::LayerInfo> outputs_info()"
                                },
                                "extra_info": {
                                    "type": "func",
                                    "name": "extra_info",
                                    "doc": {
                                        "brief": "Get model extra info define in MUD file",
                                        "return": "extra info, dict type, key-value object, attention: key and value are all string type.",
                                        "maixpy": "maix.nn.NN.extra_info",
                                        "py_doc": "Get model extra info define in MUD file\n\nReturns: extra info, dict type, key-value object, attention: key and value are all string type.\n"
                                    },
                                    "args": [],
                                    "ret_type": "std::map<std::string, std::string>",
                                    "static": false,
                                    "def": "std::map<std::string, std::string> extra_info()"
                                },
                                "forward": {
                                    "type": "func",
                                    "name": "forward",
                                    "doc": {
                                        "brief": "forward run model, get output of model,\\nthis is specially for MaixPy, not efficient, but easy to use in MaixPy",
                                        "param": {
                                            "input": "direction [in], input tensor"
                                        },
                                        "return": "output tensor. In C++, you should manually delete tensors in return value and return value.",
                                        "maixpy": "maix.nn.NN.forward",
                                        "py_doc": "forward run model, get output of model,\nthis is specially for MaixPy, not efficient, but easy to use in MaixPy\n\nArgs:\n  - input: direction [in], input tensor\n\n\nReturns: output tensor. In C++, you should manually delete tensors in return value and return value.\n"
                                    },
                                    "args": [
                                        [
                                            "tensor::Tensors &",
                                            "inputs",
                                            null
                                        ]
                                    ],
                                    "ret_type": "tensor::Tensors*",
                                    "static": false,
                                    "def": "tensor::Tensors *forward(tensor::Tensors &inputs)"
                                },
                                "forward_image": {
                                    "type": "func",
                                    "name": "forward_image",
                                    "doc": {
                                        "brief": "forward model, param is image",
                                        "param": {
                                            "img": "input image",
                                            "mean": "mean value, a list type, e.g. [0.485, 0.456, 0.406], default is empty list means not normalize.",
                                            "scale": "scale value, a list type, e.g. [1/0.229, 1/0.224, 1/0.225], default is empty list means not normalize.",
                                            "fit": "fit mode, if the image size of input not equal to model's input, it will auto resize use this fit method,\ndefault is image.Fit.FIT_FILL for easy coordinate calculation, but for more accurate result, use image.Fit.FIT_CONTAIN is better."
                                        },
                                        "return": "output tensor. In C++, you should manually delete tensors in return value and return value.",
                                        "maixpy": "maix.nn.NN.forward_image",
                                        "py_doc": "forward model, param is image\n\nArgs:\n  - img: input image\n  - mean: mean value, a list type, e.g. [0.485, 0.456, 0.406], default is empty list means not normalize.\n  - scale: scale value, a list type, e.g. [1/0.229, 1/0.224, 1/0.225], default is empty list means not normalize.\n  - fit: fit mode, if the image size of input not equal to model's input, it will auto resize use this fit method,\ndefault is image.Fit.FIT_FILL for easy coordinate calculation, but for more accurate result, use image.Fit.FIT_CONTAIN is better.\n\n\nReturns: output tensor. In C++, you should manually delete tensors in return value and return value.\n"
                                    },
                                    "args": [
                                        [
                                            "image::Image &",
                                            "img",
                                            null
                                        ],
                                        [
                                            "std::vector<float>",
                                            "mean",
                                            "std::vector<float>()"
                                        ],
                                        [
                                            "std::vector<float>",
                                            "scale",
                                            "std::vector<float>()"
                                        ],
                                        [
                                            "image::Fit",
                                            "fit",
                                            "image::Fit::FIT_FILL"
                                        ]
                                    ],
                                    "ret_type": "tensor::Tensors*",
                                    "static": false,
                                    "def": "tensor::Tensors *forward_image(image::Image &img, std::vector<float> mean = std::vector<float>(), std::vector<float> scale = std::vector<float>(), image::Fit fit = image::Fit::FIT_FILL)"
                                }
                            },
                            "def": "class NN"
                        },
                        "F": {
                            "type": "module",
                            "doc": {
                                "brief": "maix.nn.F module"
                            },
                            "members": {
                                "softmax": {
                                    "type": "func",
                                    "name": "softmax",
                                    "doc": {
                                        "brief": "Softmax, only support 1D tensor, multi-dimension tensor will be treated as 1D tensor",
                                        "param": {
                                            "tensor": "input tensor",
                                            "replace": "change input tensor data directly, if not, will create a new tensor"
                                        },
                                        "throw": "If arg error, will raise err.Exception error",
                                        "return": "output tensor, if arg replace is true, return the arg tensor's address.\nIf not replace, return a new object, so In C++, you should delete it manually in this case!",
                                        "maixpy": "maix.nn.F.softmax",
                                        "py_doc": "Softmax, only support 1D tensor, multi-dimension tensor will be treated as 1D tensor\n\nArgs:\n  - tensor: input tensor\n  - replace: change input tensor data directly, if not, will create a new tensor\n\n\nReturns: output tensor, if arg replace is true, return the arg tensor's address.\nIf not replace, return a new object, so In C++, you should delete it manually in this case!\n"
                                    },
                                    "args": [
                                        [
                                            "tensor::Tensor *",
                                            "tensor",
                                            null
                                        ],
                                        [
                                            "bool",
                                            "replace",
                                            null
                                        ]
                                    ],
                                    "ret_type": "tensor::Tensor*",
                                    "static": false,
                                    "def": "tensor::Tensor *softmax(tensor::Tensor *tensor, bool replace)"
                                }
                            },
                            "auto_add": true
                        },
                        "Object": {
                            "type": "class",
                            "name": "Object",
                            "doc": {
                                "brief": "Object for detect result",
                                "maixpy": "maix.nn.Object",
                                "py_doc": "Object for detect result"
                            },
                            "members": {
                                "__init__": {
                                    "type": "func",
                                    "name": "Object",
                                    "doc": {
                                        "brief": "Constructor of Object for detect result",
                                        "param": {
                                            "x": "left top x",
                                            "y": "left top y",
                                            "w": "width",
                                            "h": "height",
                                            "class_id": "class id",
                                            "score": "score"
                                        },
                                        "maixpy": "maix.nn.Object.__init__",
                                        "maixcdk": "maix.nn.Object.Object",
                                        "py_doc": "Constructor of Object for detect result\n\nArgs:\n  - x: left top x\n  - y: left top y\n  - w: width\n  - h: height\n  - class_id: class id\n  - score: score\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "x",
                                            "0"
                                        ],
                                        [
                                            "int",
                                            "y",
                                            "0"
                                        ],
                                        [
                                            "int",
                                            "w",
                                            "0"
                                        ],
                                        [
                                            "int",
                                            "h",
                                            "0"
                                        ],
                                        [
                                            "int",
                                            "class_id",
                                            "0"
                                        ],
                                        [
                                            "float",
                                            "score",
                                            "0"
                                        ]
                                    ],
                                    "ret_type": null,
                                    "static": false,
                                    "def": "Object(int x = 0, int y = 0, int w = 0, int h = 0, int class_id = 0, float score = 0)"
                                },
                                "__str__": {
                                    "type": "func",
                                    "name": "to_str",
                                    "doc": {
                                        "brief": "Object info to string",
                                        "return": "Object info string",
                                        "maixpy": "maix.nn.Object.__str__",
                                        "maixcdk": "maix.nn.Object.to_str",
                                        "py_doc": "Object info to string\n\nReturns: Object info string\n"
                                    },
                                    "args": [],
                                    "ret_type": "std::string",
                                    "static": false,
                                    "def": "std::string to_str()"
                                },
                                "x": {
                                    "type": "var",
                                    "name": "x",
                                    "doc": {
                                        "brief": "Object left top coordinate x",
                                        "maixpy": "maix.nn.Object.x",
                                        "py_doc": "Object left top coordinate x"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "int x"
                                },
                                "y": {
                                    "type": "var",
                                    "name": "y",
                                    "doc": {
                                        "brief": "Object left top coordinate y",
                                        "maixpy": "maix.nn.Object.y",
                                        "py_doc": "Object left top coordinate y"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "int y"
                                },
                                "w": {
                                    "type": "var",
                                    "name": "w",
                                    "doc": {
                                        "brief": "Object width",
                                        "maixpy": "maix.nn.Object.w",
                                        "py_doc": "Object width"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "int w"
                                },
                                "h": {
                                    "type": "var",
                                    "name": "h",
                                    "doc": {
                                        "brief": "Object height",
                                        "maixpy": "maix.nn.Object.h",
                                        "py_doc": "Object height"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "int h"
                                },
                                "class_id": {
                                    "type": "var",
                                    "name": "class_id",
                                    "doc": {
                                        "brief": "Object class id",
                                        "maixpy": "maix.nn.Object.class_id",
                                        "py_doc": "Object class id"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "int class_id"
                                },
                                "score": {
                                    "type": "var",
                                    "name": "score",
                                    "doc": {
                                        "brief": "Object score",
                                        "maixpy": "maix.nn.Object.score",
                                        "py_doc": "Object score"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "float score"
                                }
                            },
                            "def": "class Object"
                        }
                    },
                    "auto_add": true
                },
                "peripheral": {
                    "type": "module",
                    "doc": {
                        "brief": "Chip's peripheral driver",
                        "maixpy": "maix.peripheral",
                        "py_doc": "Chip's peripheral driver"
                    },
                    "members": {
                        "timer": {
                            "type": "module",
                            "doc": {
                                "brief": "maix.peripheral.timer module"
                            },
                            "members": {
                                "TIMER": {
                                    "type": "class",
                                    "name": "TIMER",
                                    "doc": {
                                        "brief": "Peripheral timer class",
                                        "maixpy": "maix.peripheral.timer.TIMER",
                                        "py_doc": "Peripheral timer class"
                                    },
                                    "members": {
                                        "__init__": {
                                            "type": "func",
                                            "name": "TIMER",
                                            "doc": {
                                                "brief": "TIMER constructor",
                                                "maixpy": "maix.peripheral.timer.TIMER.__init__",
                                                "py_doc": "TIMER constructor"
                                            },
                                            "args": [],
                                            "ret_type": null,
                                            "static": false,
                                            "def": "TIMER()"
                                        }
                                    },
                                    "def": "class TIMER"
                                }
                            },
                            "auto_add": true
                        },
                        "wdt": {
                            "type": "module",
                            "doc": {
                                "brief": "maix.peripheral.wdt module"
                            },
                            "members": {
                                "WDT": {
                                    "type": "class",
                                    "name": "WDT",
                                    "doc": {
                                        "brief": "Peripheral wdt class",
                                        "maixpy": "maix.peripheral.wdt.WDT",
                                        "py_doc": "Peripheral wdt class"
                                    },
                                    "members": {
                                        "__init__": {
                                            "type": "func",
                                            "name": "WDT",
                                            "doc": {
                                                "brief": "WDT constructor",
                                                "param": {
                                                    "id": "direction [in], id of wdt, int type",
                                                    "feed_ms": "direction [in], feed ms of wdt, int type"
                                                },
                                                "maixpy": "maix.peripheral.wdt.WDT.__init__",
                                                "py_doc": "WDT constructor\n\nArgs:\n  - id: direction [in], id of wdt, int type\n  - feed_ms: direction [in], feed ms of wdt, int type\n"
                                            },
                                            "args": [
                                                [
                                                    "int",
                                                    "id",
                                                    null
                                                ],
                                                [
                                                    "int",
                                                    "feed_ms",
                                                    null
                                                ]
                                            ],
                                            "ret_type": null,
                                            "static": false,
                                            "def": "WDT(int id, int feed_ms)"
                                        },
                                        "feed": {
                                            "type": "func",
                                            "name": "feed",
                                            "doc": {
                                                "brief": "feed wdt",
                                                "return": "error code, if feed success, return err::ERR_NONE",
                                                "maixpy": "maix.peripheral.wdt.WDT.feed",
                                                "py_doc": "feed wdt\n\nReturns: error code, if feed success, return err::ERR_NONE\n"
                                            },
                                            "args": [],
                                            "ret_type": "int",
                                            "static": false,
                                            "def": "int feed()"
                                        },
                                        "stop": {
                                            "type": "func",
                                            "name": "stop",
                                            "doc": {
                                                "brief": "stop wdt",
                                                "maixpy": "maix.peripheral.wdt.WDT.stop",
                                                "py_doc": "stop wdt"
                                            },
                                            "args": [],
                                            "ret_type": "int",
                                            "static": false,
                                            "def": "int stop()"
                                        },
                                        "restart": {
                                            "type": "func",
                                            "name": "restart",
                                            "doc": {
                                                "brief": "restart wdt",
                                                "attention": "restart WDT after stop it",
                                                "maixpy": "maix.peripheral.wdt.WDT.restart",
                                                "py_doc": "restart wdt"
                                            },
                                            "args": [],
                                            "ret_type": "int",
                                            "static": false,
                                            "def": "int restart()"
                                        }
                                    },
                                    "def": "class WDT"
                                }
                            },
                            "auto_add": true
                        },
                        "pwm": {
                            "type": "module",
                            "doc": {
                                "brief": "maix.peripheral.pwm module"
                            },
                            "members": {
                                "PWM": {
                                    "type": "class",
                                    "name": "PWM",
                                    "doc": {
                                        "brief": "Peripheral pwm class",
                                        "maixpy": "maix.peripheral.pwm.PWM",
                                        "py_doc": "Peripheral pwm class"
                                    },
                                    "members": {
                                        "__init__": {
                                            "type": "func",
                                            "name": "PWM",
                                            "doc": {
                                                "brief": "PWM constructor",
                                                "param": {
                                                    "pin": "direction [in], pwm pin. int type.",
                                                    "freq": "direction [in], pwm frequency, unit: Hz. int type. default is 1000",
                                                    "duty": "direction [in], pwm duty. int type. range is [0, 100], default is -1, means set duty to 50\nnote: you can not set duty and duty_val at the same time",
                                                    "duty_val": "direction [in], pwm duty value, unit: us. int type. default is -1, means set duty_val to (1000000000 / freq) * 0.5\nnote: you can not set duty and duty_val at the same time",
                                                    "align": "direction [in], pwm align. int type. default is -1",
                                                    "sync": "direction [in], pwm sync. int type. default is false"
                                                },
                                                "maixpy": "maix.peripheral.pwm.PWM.__init__",
                                                "py_doc": "PWM constructor\n\nArgs:\n  - pin: direction [in], pwm pin. int type.\n  - freq: direction [in], pwm frequency, unit: Hz. int type. default is 1000\n  - duty: direction [in], pwm duty. int type. range is [0, 100], default is -1, means set duty to 50\nnote: you can not set duty and duty_val at the same time\n  - duty_val: direction [in], pwm duty value, unit: us. int type. default is -1, means set duty_val to (1000000000 / freq) * 0.5\nnote: you can not set duty and duty_val at the same time\n  - align: direction [in], pwm align. int type. default is -1\n  - sync: direction [in], pwm sync. int type. default is false\n"
                                            },
                                            "args": [
                                                [
                                                    "int",
                                                    "pin",
                                                    null
                                                ],
                                                [
                                                    "int",
                                                    "freq",
                                                    "1000"
                                                ],
                                                [
                                                    "int",
                                                    "duty",
                                                    "-1"
                                                ],
                                                [
                                                    "int",
                                                    "duty_val",
                                                    "-1"
                                                ],
                                                [
                                                    "int",
                                                    "align",
                                                    "-1"
                                                ],
                                                [
                                                    "bool",
                                                    "sync",
                                                    "false"
                                                ]
                                            ],
                                            "ret_type": null,
                                            "static": false,
                                            "def": "PWM(int pin, int freq = 1000, int duty = -1, int duty_val = -1, int align = -1, bool sync = false)"
                                        },
                                        "duty": {
                                            "type": "func",
                                            "name": "duty",
                                            "doc": {
                                                "brief": "set pwm duty",
                                                "param": {
                                                    "duty": "direction [in], pwm duty. int type. default is -1\nduty = [0, 100], set duty\nduty == -1 or not set, return current duty"
                                                },
                                                "return": "int type\nwhen get duty, return current duty\nwhen set duty, if success, return 0; else return -1",
                                                "maixpy": "maix.peripheral.pwm.PWM.duty",
                                                "py_doc": "set pwm duty\n\nArgs:\n  - duty: direction [in], pwm duty. int type. default is -1\nduty = [0, 100], set duty\nduty == -1 or not set, return current duty\n\n\nReturns: int type\nwhen get duty, return current duty\nwhen set duty, if success, return 0; else return -1\n"
                                            },
                                            "args": [
                                                [
                                                    "int",
                                                    "duty",
                                                    "-1"
                                                ]
                                            ],
                                            "ret_type": "int",
                                            "static": false,
                                            "def": "int duty(int duty = -1)"
                                        },
                                        "duty_val": {
                                            "type": "func",
                                            "name": "duty_val",
                                            "doc": {
                                                "brief": "set pwm duty value",
                                                "param": {
                                                    "duty_val": "direction [in], pwm duty value. int type. default is -1\nduty_val = [0, 65535], set duty_val\nduty_val == -1 or not set, return current duty_val"
                                                },
                                                "return": "int type\nwhen get duty_val, return current duty_val\nwhen set duty_val, if success, return 0; else return -1",
                                                "maixpy": "maix.peripheral.pwm.PWM.duty_val",
                                                "py_doc": "set pwm duty value\n\nArgs:\n  - duty_val: direction [in], pwm duty value. int type. default is -1\nduty_val = [0, 65535], set duty_val\nduty_val == -1 or not set, return current duty_val\n\n\nReturns: int type\nwhen get duty_val, return current duty_val\nwhen set duty_val, if success, return 0; else return -1\n"
                                            },
                                            "args": [
                                                [
                                                    "int",
                                                    "duty_val",
                                                    "-1"
                                                ]
                                            ],
                                            "ret_type": "int",
                                            "static": false,
                                            "def": "int duty_val(int duty_val = -1)"
                                        },
                                        "freq": {
                                            "type": "func",
                                            "name": "freq",
                                            "doc": {
                                                "brief": "set pwm frequency",
                                                "param": {
                                                    "freq": "direction [in], pwm frequency. int type. default is -1\nfreq >= 0, set freq\nfreq == -1 or not set, return current freq"
                                                },
                                                "return": "int type\nwhen get freq, return current freq\nwhen set freq, if success, return 0; else return -1",
                                                "maixpy": "maix.peripheral.pwm.PWM.freq",
                                                "py_doc": "set pwm frequency\n\nArgs:\n  - freq: direction [in], pwm frequency. int type. default is -1\nfreq >= 0, set freq\nfreq == -1 or not set, return current freq\n\n\nReturns: int type\nwhen get freq, return current freq\nwhen set freq, if success, return 0; else return -1\n"
                                            },
                                            "args": [
                                                [
                                                    "int",
                                                    "freq",
                                                    "-1"
                                                ]
                                            ],
                                            "ret_type": "int",
                                            "static": false,
                                            "def": "int freq(int freq = -1)"
                                        },
                                        "enable": {
                                            "type": "func",
                                            "name": "enable",
                                            "doc": {
                                                "brief": "set pwm enable",
                                                "param": {
                                                    "enable": "direction [in], pwm enable. int type. default is -1\nenable == 0, disable pwm\nenable == 1, enable pwm\nenable == -1 or not set, return current enable value"
                                                },
                                                "return": "int type\nwhen get enable, return current enable value\nwhen set enable, if success, return 0; else return -1",
                                                "maixpy": "maix.peripheral.pwm.PWM.enable",
                                                "py_doc": "set pwm enable\n\nArgs:\n  - enable: direction [in], pwm enable. int type. default is -1\nenable == 0, disable pwm\nenable == 1, enable pwm\nenable == -1 or not set, return current enable value\n\n\nReturns: int type\nwhen get enable, return current enable value\nwhen set enable, if success, return 0; else return -1\n"
                                            },
                                            "args": [
                                                [
                                                    "int",
                                                    "enable",
                                                    "-1"
                                                ]
                                            ],
                                            "ret_type": "int",
                                            "static": false,
                                            "def": "int enable(int enable = -1)"
                                        }
                                    },
                                    "def": "class PWM"
                                }
                            },
                            "auto_add": true
                        },
                        "gpio": {
                            "type": "module",
                            "doc": {
                                "brief": "maix.peripheral.gpio module"
                            },
                            "members": {
                                "IN": {
                                    "type": "var",
                                    "name": "",
                                    "doc": {
                                        "brief": "GPIO input mode",
                                        "maixpy": "maix.peripheral.gpio.IN",
                                        "py_doc": "GPIO input mode"
                                    },
                                    "value": "0x01",
                                    "static": false,
                                    "readonly": true,
                                    "def": "const int IN = 0x01"
                                },
                                "OUT": {
                                    "type": "var",
                                    "name": "",
                                    "doc": {
                                        "brief": "GPIO output mode",
                                        "maixpy": "maix.peripheral.gpio.OUT",
                                        "py_doc": "GPIO output mode"
                                    },
                                    "value": "0x2",
                                    "static": false,
                                    "readonly": true,
                                    "def": "const int OUT = 0x2"
                                },
                                "OUT_OD": {
                                    "type": "var",
                                    "name": "",
                                    "doc": {
                                        "brief": "GPIO output open drain mode",
                                        "maixpy": "maix.peripheral.gpio.OUT_OD",
                                        "py_doc": "GPIO output open drain mode"
                                    },
                                    "value": "0x3",
                                    "static": false,
                                    "readonly": true,
                                    "def": "const int OUT_OD = 0x3"
                                },
                                "PULL_NONE": {
                                    "type": "var",
                                    "name": "",
                                    "doc": {
                                        "brief": "GPIO pull none mode",
                                        "maixpy": "maix.peripheral.gpio.PULL_NONE",
                                        "py_doc": "GPIO pull none mode"
                                    },
                                    "value": "0x4",
                                    "static": false,
                                    "readonly": true,
                                    "def": "const int PULL_NONE = 0x4"
                                },
                                "PULL_UP": {
                                    "type": "var",
                                    "name": "",
                                    "doc": {
                                        "brief": "GPIO pull up mode",
                                        "maixpy": "maix.peripheral.gpio.PULL_UP",
                                        "py_doc": "GPIO pull up mode"
                                    },
                                    "value": "0x5",
                                    "static": false,
                                    "readonly": true,
                                    "def": "const int PULL_UP = 0x5"
                                },
                                "PULL_DOWN": {
                                    "type": "var",
                                    "name": "",
                                    "doc": {
                                        "brief": "GPIO pull down mode",
                                        "maixpy": "maix.peripheral.gpio.PULL_DOWN",
                                        "py_doc": "GPIO pull down mode"
                                    },
                                    "value": "0x6",
                                    "static": false,
                                    "readonly": true,
                                    "def": "const int PULL_DOWN = 0x6"
                                },
                                "OFF": {
                                    "type": "var",
                                    "name": "",
                                    "doc": {
                                        "brief": "GPIO off",
                                        "maixpy": "maix.peripheral.gpio.OFF",
                                        "py_doc": "GPIO off"
                                    },
                                    "value": "0x0",
                                    "static": false,
                                    "readonly": true,
                                    "def": "const int OFF = 0x0"
                                },
                                "ON": {
                                    "type": "var",
                                    "name": "",
                                    "doc": {
                                        "brief": "GPIO on",
                                        "maixpy": "maix.peripheral.gpio.ON",
                                        "py_doc": "GPIO on"
                                    },
                                    "value": "0x1",
                                    "static": false,
                                    "readonly": true,
                                    "def": "const int ON = 0x1"
                                },
                                "GPIO": {
                                    "type": "class",
                                    "name": "GPIO",
                                    "doc": {
                                        "brief": "Peripheral gpio class",
                                        "maixpy": "maix.peripheral.gpio.GPIO",
                                        "py_doc": "Peripheral gpio class"
                                    },
                                    "members": {
                                        "__init__": {
                                            "type": "func",
                                            "name": "GPIO",
                                            "doc": {
                                                "brief": "GPIO constructor",
                                                "param": {
                                                    "pin": "direction [in], gpio pin. int type.",
                                                    "mode": "direction [in], gpio mode. int type. default is -1, means gpio.IN\noption:\nmode = gpio.IN, means input mode\nmode = gpio.OUT, means output mode\nmode = gpio.OUT_OD, means output open drain mode",
                                                    "pull": "direction [in], gpio pull. int type. default is determined by actual board.\noption:\npull = gpio.PULL_NONE, means pull none mode\npull = gpio.PULL_UP, means pull up mode\npull = gpio.PULL_DOWN, means pull down mode"
                                                },
                                                "maixpy": "maix.peripheral.gpio.GPIO.__init__",
                                                "py_doc": "GPIO constructor\n\nArgs:\n  - pin: direction [in], gpio pin. int type.\n  - mode: direction [in], gpio mode. int type. default is -1, means gpio.IN\noption:\nmode = gpio.IN, means input mode\nmode = gpio.OUT, means output mode\nmode = gpio.OUT_OD, means output open drain mode\n  - pull: direction [in], gpio pull. int type. default is determined by actual board.\noption:\npull = gpio.PULL_NONE, means pull none mode\npull = gpio.PULL_UP, means pull up mode\npull = gpio.PULL_DOWN, means pull down mode\n"
                                            },
                                            "args": [
                                                [
                                                    "int",
                                                    "pin",
                                                    null
                                                ],
                                                [
                                                    "int",
                                                    "mode",
                                                    "-1"
                                                ],
                                                [
                                                    "int",
                                                    "pull",
                                                    "-1"
                                                ]
                                            ],
                                            "ret_type": null,
                                            "static": false,
                                            "def": "GPIO(int pin, int mode = -1, int pull = -1)"
                                        },
                                        "value": {
                                            "type": "func",
                                            "name": "value",
                                            "doc": {
                                                "brief": "write/read gpio value",
                                                "param": {
                                                    "value": "direction [in], gpio value. int type.\nvalue == 0, means write gpio to low level\nvalue == 1, means write gpio to high level"
                                                },
                                                "return": "int type\nif success, return 0; else return -1",
                                                "maixpy": "maix.peripheral.gpio.GPIO.value",
                                                "py_doc": "write/read gpio value\n\nArgs:\n  - value: direction [in], gpio value. int type.\nvalue == 0, means write gpio to low level\nvalue == 1, means write gpio to high level\n\n\nReturns: int type\nif success, return 0; else return -1\n"
                                            },
                                            "args": [
                                                [
                                                    "int",
                                                    "value",
                                                    "-1"
                                                ]
                                            ],
                                            "ret_type": "int",
                                            "static": false,
                                            "def": "int value(int value = -1)"
                                        },
                                        "write": {
                                            "type": "func",
                                            "name": "write",
                                            "doc": {
                                                "brief": "get gpio write",
                                                "param": {
                                                    "value": "direction [in], gpio value. int type.\nvalue == 0, means write gpio to low level\nvalue == 1, means write gpio to high level\nvalue == -1 or not set, means read gpio value"
                                                },
                                                "return": "int type\nwhen read gpio value, return gpio value\nwhen write gpio value, if success, return 0; else return -1",
                                                "maixpy": "maix.peripheral.gpio.GPIO.write",
                                                "py_doc": "get gpio write\n\nArgs:\n  - value: direction [in], gpio value. int type.\nvalue == 0, means write gpio to low level\nvalue == 1, means write gpio to high level\nvalue == -1 or not set, means read gpio value\n\n\nReturns: int type\nwhen read gpio value, return gpio value\nwhen write gpio value, if success, return 0; else return -1\n"
                                            },
                                            "args": [
                                                [
                                                    "int",
                                                    "value",
                                                    null
                                                ]
                                            ],
                                            "ret_type": "int",
                                            "static": false,
                                            "def": "int write(int value)"
                                        },
                                        "read": {
                                            "type": "func",
                                            "name": "read",
                                            "doc": {
                                                "brief": "get gpio read",
                                                "return": "int type\nreturn 0, means gpio is low level\nreturn 1, means gpio is high level\nreturn other, means error",
                                                "maixpy": "maix.peripheral.gpio.GPIO.read",
                                                "py_doc": "get gpio read\n\nReturns: int type\nreturn 0, means gpio is low level\nreturn 1, means gpio is high level\nreturn other, means error\n"
                                            },
                                            "args": [],
                                            "ret_type": "int",
                                            "static": false,
                                            "def": "int read()"
                                        },
                                        "on": {
                                            "type": "func",
                                            "name": "on",
                                            "doc": {
                                                "brief": "set gpio on",
                                                "maixpy": "maix.peripheral.gpio.GPIO.on",
                                                "py_doc": "set gpio on"
                                            },
                                            "args": [],
                                            "ret_type": "void",
                                            "static": false,
                                            "def": "void on()"
                                        },
                                        "off": {
                                            "type": "func",
                                            "name": "off",
                                            "doc": {
                                                "brief": "set gpio off",
                                                "maixpy": "maix.peripheral.gpio.GPIO.off",
                                                "py_doc": "set gpio off"
                                            },
                                            "args": [],
                                            "ret_type": "void",
                                            "static": false,
                                            "def": "void off()"
                                        },
                                        "high": {
                                            "type": "func",
                                            "name": "high",
                                            "doc": {
                                                "brief": "set gpio high",
                                                "maixpy": "maix.peripheral.gpio.GPIO.high",
                                                "py_doc": "set gpio high"
                                            },
                                            "args": [],
                                            "ret_type": "void",
                                            "static": false,
                                            "def": "void high()"
                                        },
                                        "low": {
                                            "type": "func",
                                            "name": "low",
                                            "doc": {
                                                "brief": "set gpio low",
                                                "maixpy": "maix.peripheral.gpio.GPIO.low",
                                                "py_doc": "set gpio low"
                                            },
                                            "args": [],
                                            "ret_type": "void",
                                            "static": false,
                                            "def": "void low()"
                                        },
                                        "toggle": {
                                            "type": "func",
                                            "name": "toggle",
                                            "doc": {
                                                "brief": "gpio toggle",
                                                "maixpy": "maix.peripheral.gpio.GPIO.toggle",
                                                "py_doc": "gpio toggle"
                                            },
                                            "args": [],
                                            "ret_type": "void",
                                            "static": false,
                                            "def": "void toggle()"
                                        }
                                    },
                                    "def": "class GPIO"
                                }
                            },
                            "auto_add": true
                        },
                        "spi": {
                            "type": "module",
                            "doc": {
                                "brief": "maix.peripheral.spi module"
                            },
                            "members": {
                                "MASTER_MODE": {
                                    "type": "var",
                                    "name": "",
                                    "doc": {
                                        "brief": "spi master mode",
                                        "maixpy": "maix.peripheral.spi.MASTER_MODE",
                                        "py_doc": "spi master mode"
                                    },
                                    "value": "0x1",
                                    "static": false,
                                    "readonly": true,
                                    "def": "const int MASTER_MODE = 0x1"
                                },
                                "SLAVE_MODE": {
                                    "type": "var",
                                    "name": "",
                                    "doc": {
                                        "brief": "spi slave mode",
                                        "maixpy": "maix.peripheral.spi.SLAVE_MODE",
                                        "py_doc": "spi slave mode"
                                    },
                                    "value": "0x2",
                                    "static": false,
                                    "readonly": true,
                                    "def": "const int SLAVE_MODE = 0x2"
                                },
                                "CLOCK_MODE_0": {
                                    "type": "var",
                                    "name": "",
                                    "doc": {
                                        "brief": "clock mode 0",
                                        "attention": "CPOL = 0, CPHA = 0\nmeans the idle level of the clock is low, data is captured on the first edge of the SPI clock cycle",
                                        "maixpy": "maix.peripheral.spi.CLOCK_MODE_0",
                                        "py_doc": "clock mode 0"
                                    },
                                    "value": "0x0",
                                    "static": false,
                                    "readonly": true,
                                    "def": "const int CLOCK_MODE_0 = 0x0"
                                },
                                "CLOCK_MODE_1": {
                                    "type": "var",
                                    "name": "",
                                    "doc": {
                                        "brief": "clock mode 1",
                                        "attention": "CPOL = 0, CPHA = 1\nmeans the idle level of the clock is low, data is captured on the second edge of the SPI clock cycle",
                                        "maixpy": "maix.peripheral.spi.CLOCK_MODE_1",
                                        "py_doc": "clock mode 1"
                                    },
                                    "value": "0x1",
                                    "static": false,
                                    "readonly": true,
                                    "def": "const int CLOCK_MODE_1 = 0x1"
                                },
                                "CLOCK_MODE_2": {
                                    "type": "var",
                                    "name": "",
                                    "doc": {
                                        "brief": "clock mode 2",
                                        "attention": "CPOL = 1, CPHA = 0\nmeans the idle level of the clock is high, data is captured on the first edge of the SPI clock cycle",
                                        "maixpy": "maix.peripheral.spi.CLOCK_MODE_2",
                                        "py_doc": "clock mode 2"
                                    },
                                    "value": "0x2",
                                    "static": false,
                                    "readonly": true,
                                    "def": "const int CLOCK_MODE_2 = 0x2"
                                },
                                "CLOCK_MODE_3": {
                                    "type": "var",
                                    "name": "",
                                    "doc": {
                                        "brief": "clock mode 3",
                                        "attention": "CPOL = 1, CPHA = 1\nmeans the idle level of the clock is high, data is captured on the second edge of the SPI clock cycle",
                                        "maixpy": "maix.peripheral.spi.CLOCK_MODE_3",
                                        "py_doc": "clock mode 3"
                                    },
                                    "value": "0x3",
                                    "static": false,
                                    "readonly": true,
                                    "def": "const int CLOCK_MODE_3 = 0x3"
                                },
                                "SPI": {
                                    "type": "class",
                                    "name": "SPI",
                                    "doc": {
                                        "brief": "Peripheral spi class",
                                        "maixpy": "maix.peripheral.spi.SPI",
                                        "py_doc": "Peripheral spi class"
                                    },
                                    "members": {
                                        "__init__": {
                                            "type": "func",
                                            "name": "SPI",
                                            "doc": {
                                                "brief": "SPI constructor",
                                                "param": {
                                                    "id": "direction [in], id of spi, int type",
                                                    "sclk": "direction [in], sclk pin of spi, int type",
                                                    "mosi": "direction [in], mosi pin of spi, int type",
                                                    "miso": "direction [in], miso pin of spi, int type",
                                                    "cs": "direction [in], cs pin of spi, int type",
                                                    "freq": "direction [in], freq of spi, int type",
                                                    "use_soft_cs": "direction [in], use_soft_cs of spi, int type\nthis param is valid in master mode, when use_soft_cs = 1, the\ncs pin must be operated manually when sending data. default is -1, means use hardware cs",
                                                    "mode": "direction [in], mode of spi, int type\noption:\nmode = spi.MASTER, means use master mode\nmode = spi.SLAVE, means use slave mode\ndefualt is -1, means use spi.MASTER mode",
                                                    "clock_mode": "direction [in], clock_mode of spi, int type,default is -1\noption:\nclock_mode = spi.CLOCK_MODE_0, @see CLOCK_MODE_0\nclock_mode = spi.CLOCK_MODE_1, @see CLOCK_MODE_1\nclock_mode = spi.CLOCK_MODE_2, @see CLOCK_MODE_2\nclock_mode = spi.CLOCK_MODE_3, @see CLOCK_MODE_3\ndefault is -1, means use CLOCK_MODE_0"
                                                },
                                                "maixpy": "maix.peripheral.spi.SPI.__init__",
                                                "py_doc": "SPI constructor\n\nArgs:\n  - id: direction [in], id of spi, int type\n  - sclk: direction [in], sclk pin of spi, int type\n  - mosi: direction [in], mosi pin of spi, int type\n  - miso: direction [in], miso pin of spi, int type\n  - cs: direction [in], cs pin of spi, int type\n  - freq: direction [in], freq of spi, int type\n  - use_soft_cs: direction [in], use_soft_cs of spi, int type\nthis param is valid in master mode, when use_soft_cs = 1, the\ncs pin must be operated manually when sending data. default is -1, means use hardware cs\n  - mode: direction [in], mode of spi, int type\noption:\nmode = spi.MASTER, means use master mode\nmode = spi.SLAVE, means use slave mode\ndefualt is -1, means use spi.MASTER mode\n  - clock_mode: direction [in], clock_mode of spi, int type,default is -1\noption:\nclock_mode = spi.CLOCK_MODE_0, @see CLOCK_MODE_0\nclock_mode = spi.CLOCK_MODE_1, @see CLOCK_MODE_1\nclock_mode = spi.CLOCK_MODE_2, @see CLOCK_MODE_2\nclock_mode = spi.CLOCK_MODE_3, @see CLOCK_MODE_3\ndefault is -1, means use CLOCK_MODE_0\n"
                                            },
                                            "args": [
                                                [
                                                    "int",
                                                    "id",
                                                    null
                                                ],
                                                [
                                                    "int",
                                                    "sclk",
                                                    null
                                                ],
                                                [
                                                    "int",
                                                    "mosi",
                                                    null
                                                ],
                                                [
                                                    "int",
                                                    "miso",
                                                    null
                                                ],
                                                [
                                                    "int",
                                                    "cs",
                                                    null
                                                ],
                                                [
                                                    "int",
                                                    "freq",
                                                    null
                                                ],
                                                [
                                                    "int",
                                                    "use_soft_cs",
                                                    "-1"
                                                ],
                                                [
                                                    "int",
                                                    "mode",
                                                    "-1"
                                                ],
                                                [
                                                    "int",
                                                    "clock_mode",
                                                    "-1"
                                                ]
                                            ],
                                            "ret_type": null,
                                            "static": false,
                                            "def": "SPI(int id, int sclk, int mosi, int miso, int cs, int freq, int use_soft_cs = -1, int mode = -1, int clock_mode = -1)"
                                        },
                                        "cs_high": {
                                            "type": "func",
                                            "name": "cs_high",
                                            "doc": {
                                                "brief": "set cs pin to high level",
                                                "maixpy": "maix.peripheral.spi.SPI.cs_high",
                                                "py_doc": "set cs pin to high level"
                                            },
                                            "args": [],
                                            "ret_type": "int",
                                            "static": false,
                                            "def": "int cs_high()"
                                        },
                                        "cs_low": {
                                            "type": "func",
                                            "name": "cs_low",
                                            "doc": {
                                                "brief": "set cs pin to low level",
                                                "maixpy": "maix.peripheral.spi.SPI.cs_low",
                                                "py_doc": "set cs pin to low level"
                                            },
                                            "args": [],
                                            "ret_type": "int",
                                            "static": false,
                                            "def": "int cs_low()"
                                        },
                                        "read": {
                                            "type": "func",
                                            "name": "read",
                                            "doc": {
                                                "brief": "read data from spi",
                                                "param": {
                                                    "read_len": "direction [in], read length, int type"
                                                },
                                                "return": "read data, vector<unsigned char> type",
                                                "maixpy": "maix.peripheral.spi.SPI.read",
                                                "py_doc": "read data from spi\n\nArgs:\n  - read_len: direction [in], read length, int type\n\n\nReturns: read data, vector<unsigned char> type\n"
                                            },
                                            "args": [
                                                [
                                                    "int",
                                                    "read_len",
                                                    null
                                                ]
                                            ],
                                            "ret_type": "std::vector<unsigned char>",
                                            "static": false,
                                            "def": "std::vector<unsigned char> read(int read_len)"
                                        },
                                        "write": {
                                            "type": "func",
                                            "name": "write",
                                            "doc": {
                                                "brief": "write data to spi",
                                                "param": {
                                                    "write_data": "direction [in], write data, vector<unsigned char> type\nthe member range of the list is [0,255]"
                                                },
                                                "return": "error code, if write success, return err::ERR_NONE",
                                                "maixpy": "maix.peripheral.spi.SPI.write",
                                                "py_doc": "write data to spi\n\nArgs:\n  - write_data: direction [in], write data, vector<unsigned char> type\nthe member range of the list is [0,255]\n\n\nReturns: error code, if write success, return err::ERR_NONE\n"
                                            },
                                            "args": [
                                                [
                                                    "std::vector<unsigned char>",
                                                    "write_data",
                                                    "std::vector<unsigned char>{}"
                                                ]
                                            ],
                                            "ret_type": "int",
                                            "static": false,
                                            "def": "int write(std::vector<unsigned char> write_data = std::vector<unsigned char>{})"
                                        },
                                        "read_write": {
                                            "type": "func",
                                            "name": "read_write",
                                            "doc": {
                                                "brief": "set spi status to high level or low level",
                                                "param": {
                                                    "write_data": "direction [in], write data, vector<unsigned char> type\nthe member range of the list is [0,255]",
                                                    "read_len": "direction [in], read length, int type\ndefault is -1, means read_len = write_data.size()"
                                                },
                                                "return": "read data, vector<unsigned char> type",
                                                "maixpy": "maix.peripheral.spi.SPI.read_write",
                                                "py_doc": "set spi status to high level or low level\n\nArgs:\n  - write_data: direction [in], write data, vector<unsigned char> type\nthe member range of the list is [0,255]\n  - read_len: direction [in], read length, int type\ndefault is -1, means read_len = write_data.size()\n\n\nReturns: read data, vector<unsigned char> type\n"
                                            },
                                            "args": [
                                                [
                                                    "std::vector<unsigned char>",
                                                    "write_data",
                                                    "std::vector<unsigned char>{}"
                                                ],
                                                [
                                                    "int",
                                                    "read_len",
                                                    "-1"
                                                ]
                                            ],
                                            "ret_type": "std::vector<unsigned char>",
                                            "static": false,
                                            "def": "std::vector<unsigned char> read_write(  std::vector<unsigned char> write_data = std::vector<unsigned char>{}, \n                                                int read_len = -1)"
                                        },
                                        "is_busy": {
                                            "type": "func",
                                            "name": "is_busy",
                                            "doc": {
                                                "brief": "get busy status of spi",
                                                "return": "busy status, bool type",
                                                "maixpy": "maix.peripheral.spi.SPI.is_busy",
                                                "py_doc": "get busy status of spi\n\nReturns: busy status, bool type\n"
                                            },
                                            "args": [],
                                            "ret_type": "bool",
                                            "static": false,
                                            "def": "bool is_busy()"
                                        }
                                    },
                                    "def": "class SPI"
                                }
                            },
                            "auto_add": true
                        },
                        "uart": {
                            "type": "module",
                            "doc": {
                                "brief": "maix uart peripheral driver",
                                "maixpy": "maix.peripheral.uart",
                                "py_doc": "maix uart peripheral driver"
                            },
                            "members": {
                                "PARITY": {
                                    "type": "enum",
                                    "name": "PARITY",
                                    "doc": {
                                        "brief": "uart parity enum",
                                        "maixpy": "maix.peripheral.uart.PARITY",
                                        "py_doc": "uart parity enum"
                                    },
                                    "values": [
                                        [
                                            "PARITY_NONE",
                                            "0x00",
                                            "no parity"
                                        ],
                                        [
                                            "PARITY_ODD",
                                            "0x01",
                                            "odd parity"
                                        ],
                                        [
                                            "PARITY_EVEN",
                                            "0x02",
                                            "even parity"
                                        ],
                                        [
                                            "PARITY_MAX",
                                            "",
                                            ""
                                        ]
                                    ],
                                    "def": "enum PARITY\n    {\n        PARITY_NONE = 0x00,  // no parity\n        PARITY_ODD  = 0x01,  // odd parity\n        PARITY_EVEN = 0x02,  // even parity\n        PARITY_MAX\n    }"
                                },
                                "STOP": {
                                    "type": "enum",
                                    "name": "STOP",
                                    "doc": {
                                        "brief": "uart stop bits",
                                        "maixpy": "maix.peripheral.uart.STOP",
                                        "py_doc": "uart stop bits"
                                    },
                                    "values": [
                                        [
                                            "STOP_1",
                                            "0x01",
                                            "1 stop bit"
                                        ],
                                        [
                                            "STOP_2",
                                            "0x02",
                                            "2 stop bits"
                                        ],
                                        [
                                            "STOP_1_5",
                                            "0x03",
                                            "1.5 stop bits"
                                        ],
                                        [
                                            "STOP_MAX",
                                            "",
                                            ""
                                        ]
                                    ],
                                    "def": "enum STOP\n    {\n        STOP_1   = 0x01,  // 1 stop bit\n        STOP_2   = 0x02,  // 2 stop bits\n        STOP_1_5 = 0x03,  // 1.5 stop bits\n        STOP_MAX\n    }"
                                },
                                "BITS": {
                                    "type": "enum",
                                    "name": "BITS",
                                    "doc": {
                                        "brief": "uart stop bits",
                                        "maixpy": "maix.peripheral.uart.BITS",
                                        "py_doc": "uart stop bits"
                                    },
                                    "values": [
                                        [
                                            "BITS_5",
                                            "5",
                                            "5 data bits"
                                        ],
                                        [
                                            "BITS_6",
                                            "6",
                                            "6 data bits"
                                        ],
                                        [
                                            "BITS_7",
                                            "7",
                                            "7 data bits"
                                        ],
                                        [
                                            "BITS_8",
                                            "8",
                                            "8 data bits"
                                        ],
                                        [
                                            "BITS_MAX",
                                            "",
                                            ""
                                        ]
                                    ],
                                    "def": "enum BITS\n    {\n        BITS_5 = 5,  // 5 data bits\n        BITS_6 = 6,  // 6 data bits\n        BITS_7 = 7,  // 7 data bits\n        BITS_8 = 8,  // 8 data bits\n        BITS_MAX\n    }"
                                },
                                "FLOW_CTRL": {
                                    "type": "enum",
                                    "name": "FLOW_CTRL",
                                    "doc": {
                                        "brief": "uart flow control",
                                        "maixpy": "maix.peripheral.uart.FLOW_CTRL",
                                        "py_doc": "uart flow control"
                                    },
                                    "values": [
                                        [
                                            "FLOW_CTRL_NONE",
                                            "0",
                                            "no flow control"
                                        ],
                                        [
                                            "FLOW_CTRL_HW",
                                            "1",
                                            "hardware flow control"
                                        ],
                                        [
                                            "FLOW_CTRL_MAX",
                                            "",
                                            ""
                                        ]
                                    ],
                                    "def": "enum FLOW_CTRL\n    {\n        FLOW_CTRL_NONE = 0,  // no flow control\n        FLOW_CTRL_HW   = 1,  // hardware flow control\n        FLOW_CTRL_MAX\n    }"
                                },
                                "list_ports": {
                                    "type": "func",
                                    "name": "list_ports",
                                    "doc": {
                                        "brief": "Get supported uart ports.",
                                        "return": "uart ports list, string type.",
                                        "maixpy": "maix.peripheral.uart.list_ports",
                                        "py_doc": "Get supported uart ports.\n\nReturns: uart ports list, string type.\n"
                                    },
                                    "args": [],
                                    "ret_type": "std::vector<std::string>",
                                    "static": false,
                                    "def": "std::vector<std::string> list_ports()"
                                },
                                "UART": {
                                    "type": "class",
                                    "name": "UART",
                                    "doc": {
                                        "brief": "maix uart peripheral driver",
                                        "maixpy": "maix.peripheral.uart.UART",
                                        "py_doc": "maix uart peripheral driver"
                                    },
                                    "members": {
                                        "__init__": {
                                            "type": "func",
                                            "name": "UART",
                                            "doc": {
                                                "brief": "UART constructor. You need to call open() to open the device.",
                                                "param": {
                                                    "port": "uart port. string type, can get it by uart.list_ports().\nIf empty, will not open device in constructor, default empty.\nif not empty, will auto open device in constructor, open fail will throw err.Exception.",
                                                    "baudrate": "baudrate of uart. int type, default 115200.",
                                                    "databits": "databits, values @see uart.DATA_BITS",
                                                    "parity": "parity, values @see uart.PARITY",
                                                    "stopbits": "stopbits, values @see uart.STOP_BITS",
                                                    "flow_control": "flow_control, values @see uart.FLOW_CTRL"
                                                },
                                                "maixpy": "maix.peripheral.uart.UART.__init__",
                                                "py_doc": "UART constructor. You need to call open() to open the device.\n\nArgs:\n  - port: uart port. string type, can get it by uart.list_ports().\nIf empty, will not open device in constructor, default empty.\nif not empty, will auto open device in constructor, open fail will throw err.Exception.\n  - baudrate: baudrate of uart. int type, default 115200.\n  - databits: databits, values @see uart.DATA_BITS\n  - parity: parity, values @see uart.PARITY\n  - stopbits: stopbits, values @see uart.STOP_BITS\n  - flow_control: flow_control, values @see uart.FLOW_CTRL\n"
                                            },
                                            "args": [
                                                [
                                                    "const std::string &",
                                                    "port",
                                                    "\"\""
                                                ],
                                                [
                                                    "int",
                                                    "baudrate",
                                                    "115200"
                                                ],
                                                [
                                                    "uart::BITS",
                                                    "databits",
                                                    "uart::BITS_8"
                                                ],
                                                [
                                                    "uart::PARITY",
                                                    "parity",
                                                    "uart::PARITY_NONE"
                                                ],
                                                [
                                                    "uart::STOP",
                                                    "stopbits",
                                                    "uart::STOP_1"
                                                ],
                                                [
                                                    "uart::FLOW_CTRL",
                                                    "flow_ctrl",
                                                    "uart::FLOW_CTRL_NONE"
                                                ]
                                            ],
                                            "ret_type": null,
                                            "static": false,
                                            "def": "UART(const std::string &port = \"\", int baudrate = 115200, uart::BITS databits = uart::BITS_8,\n            uart::PARITY parity = uart::PARITY_NONE, uart::STOP stopbits = uart::STOP_1,\n            uart::FLOW_CTRL flow_ctrl = uart::FLOW_CTRL_NONE)"
                                        },
                                        "set_port": {
                                            "type": "func",
                                            "name": "set_port",
                                            "doc": {
                                                "brief": "Set port",
                                                "param": {
                                                    "port": "uart port. string type, can get it by uart.list_ports()."
                                                },
                                                "return": "set port error code, err.Err type.",
                                                "maixpy": "maix.peripheral.uart.UART.set_port",
                                                "py_doc": "Set port\n\nArgs:\n  - port: uart port. string type, can get it by uart.list_ports().\n\n\nReturns: set port error code, err.Err type.\n"
                                            },
                                            "args": [
                                                [
                                                    "const std::string &",
                                                    "port",
                                                    null
                                                ]
                                            ],
                                            "ret_type": "err::Err",
                                            "static": false,
                                            "def": "err::Err set_port(const std::string &port)"
                                        },
                                        "get_port": {
                                            "type": "func",
                                            "name": "get_port",
                                            "doc": {
                                                "brief": "Get port",
                                                "return": "uart port, string type.",
                                                "maixpy": "maix.peripheral.uart.UART.get_port",
                                                "py_doc": "Get port\n\nReturns: uart port, string type.\n"
                                            },
                                            "args": [],
                                            "ret_type": "std::string",
                                            "static": false,
                                            "def": "std::string get_port()"
                                        },
                                        "set_baudrate": {
                                            "type": "func",
                                            "name": "set_baudrate",
                                            "doc": {
                                                "brief": "Set baud rate",
                                                "param": {
                                                    "baudrate": "baudrate of uart. int type, default 115200."
                                                },
                                                "return": "set baud rate error code, err.Err type.",
                                                "maixpy": "maix.peripheral.uart.UART.set_baudrate",
                                                "py_doc": "Set baud rate\n\nArgs:\n  - baudrate: baudrate of uart. int type, default 115200.\n\n\nReturns: set baud rate error code, err.Err type.\n"
                                            },
                                            "args": [
                                                [
                                                    "int",
                                                    "baudrate",
                                                    null
                                                ]
                                            ],
                                            "ret_type": "err::Err",
                                            "static": false,
                                            "def": "err::Err set_baudrate(int baudrate)"
                                        },
                                        "get_baudrate": {
                                            "type": "func",
                                            "name": "get_baudrate",
                                            "doc": {
                                                "brief": "Get baud rate",
                                                "return": "baud rate, int type.",
                                                "maixpy": "maix.peripheral.uart.UART.get_baudrate",
                                                "py_doc": "Get baud rate\n\nReturns: baud rate, int type.\n"
                                            },
                                            "args": [],
                                            "ret_type": "int",
                                            "static": false,
                                            "def": "int get_baudrate()"
                                        },
                                        "open": {
                                            "type": "func",
                                            "name": "open",
                                            "doc": {
                                                "brief": "Open uart device, before open, port must be set in constructor or by set_port().\\nIf already opened, do nothing and return err.ERR_NONE.",
                                                "return": "open device error code, err.Err type.",
                                                "maixpy": "maix.peripheral.uart.UART.open",
                                                "py_doc": "Open uart device, before open, port must be set in constructor or by set_port().\nIf already opened, do nothing and return err.ERR_NONE.\n\nReturns: open device error code, err.Err type.\n"
                                            },
                                            "args": [],
                                            "ret_type": "err::Err",
                                            "static": false,
                                            "def": "err::Err open()"
                                        },
                                        "is_open": {
                                            "type": "func",
                                            "name": "is_open",
                                            "doc": {
                                                "brief": "Check if device is opened.",
                                                "return": "true if opened, false if not opened.",
                                                "maixpy": "maix.peripheral.uart.UART.is_open",
                                                "py_doc": "Check if device is opened.\n\nReturns: true if opened, false if not opened.\n"
                                            },
                                            "args": [],
                                            "ret_type": "bool",
                                            "static": false,
                                            "def": "bool is_open()"
                                        },
                                        "close": {
                                            "type": "func",
                                            "name": "close",
                                            "doc": {
                                                "brief": "Close uart device, if already closed, do nothing and return err.ERR_NONE.",
                                                "return": "close device error code, err.Err type.",
                                                "maixpy": "maix.peripheral.uart.UART.close",
                                                "py_doc": "Close uart device, if already closed, do nothing and return err.ERR_NONE.\n\nReturns: close device error code, err.Err type.\n"
                                            },
                                            "args": [],
                                            "ret_type": "err::Err",
                                            "static": false,
                                            "def": "err::Err close()"
                                        },
                                        "write_str": {
                                            "type": "func",
                                            "name": "write_str",
                                            "doc": {
                                                "brief": "Send string data",
                                                "param": {
                                                    "str": "string data"
                                                },
                                                "return": "sent data length, < 0 means error, value is -err.Err.",
                                                "maixpy": "maix.peripheral.uart.UART.write_str",
                                                "py_doc": "Send string data\n\nArgs:\n  - str: string data\n\n\nReturns: sent data length, < 0 means error, value is -err.Err.\n"
                                            },
                                            "args": [
                                                [
                                                    "const std::string &",
                                                    "str",
                                                    null
                                                ]
                                            ],
                                            "ret_type": "int",
                                            "static": false,
                                            "def": "int write_str(const std::string &str)"
                                        },
                                        "write": {
                                            "type": "func",
                                            "name": "write",
                                            "doc": {
                                                "brief": "Send data to uart",
                                                "param": {
                                                    "data": "direction [in], data to send, bytes type. If you want to send str type, use str.encode() to convert."
                                                },
                                                "return": "sent length, int type, if < 0 means error, value is -err.Err.",
                                                "maixpy": "maix.peripheral.uart.UART.write",
                                                "py_doc": "Send data to uart\n\nArgs:\n  - data: direction [in], data to send, bytes type. If you want to send str type, use str.encode() to convert.\n\n\nReturns: sent length, int type, if < 0 means error, value is -err.Err.\n"
                                            },
                                            "args": [
                                                [
                                                    "Bytes &",
                                                    "data",
                                                    null
                                                ]
                                            ],
                                            "ret_type": "int",
                                            "static": false,
                                            "def": "int write(Bytes &data)"
                                        },
                                        "available": {
                                            "type": "func",
                                            "name": "available",
                                            "doc": {
                                                "brief": "Check if data available or wait data available.",
                                                "param": {
                                                    "timeout": "unit ms, timeout to wait data, default 0.\n0 means check data available and return immediately,\n> 0 means wait until data available or timeout.\n- 1 means wait until data available."
                                                },
                                                "return": "available data number, 0 if timeout or no data, <0 if error, value is -err.Err, can be err::ERR_IO\uff0c err::ERR_CANCEL, err::ERR_NOT_OPEN.",
                                                "throw": "err.Exception if fatal error.",
                                                "maixpy": "maix.peripheral.uart.UART.available",
                                                "py_doc": "Check if data available or wait data available.\n\nArgs:\n  - timeout: unit ms, timeout to wait data, default 0.\n0 means check data available and return immediately,\n> 0 means wait until data available or timeout.\n- 1 means wait until data available.\n\n\nReturns: available data number, 0 if timeout or no data, <0 if error, value is -err.Err, can be err::ERR_IO\uff0c err::ERR_CANCEL, err::ERR_NOT_OPEN.\n"
                                            },
                                            "args": [
                                                [
                                                    "int",
                                                    "timeout",
                                                    "0"
                                                ]
                                            ],
                                            "ret_type": "int",
                                            "static": false,
                                            "def": "int available(int timeout = 0)"
                                        },
                                        "read": {
                                            "type": "func",
                                            "name": "read",
                                            "doc": {
                                                "brief": "Recv data from uart",
                                                "param": {
                                                    "len": "max data length want to receive, default -1.\n-1 means read data in uart receive buffer.\n>0 means read len data want to receive.\nother values is invalid.",
                                                    "timeout": "unit ms, timeout to receive data, default 0.\n0 means read data in uart receive buffer and return immediately,\n-1 means block until read len data,\n>0 means block until read len data or timeout."
                                                },
                                                "return": "received data, bytes type.\nAttention, you need to delete the returned object yourself in C++.",
                                                "maixpy": "maix.peripheral.uart.UART.read",
                                                "py_doc": "Recv data from uart\n\nArgs:\n  - len: max data length want to receive, default -1.\n-1 means read data in uart receive buffer.\n>0 means read len data want to receive.\nother values is invalid.\n  - timeout: unit ms, timeout to receive data, default 0.\n0 means read data in uart receive buffer and return immediately,\n-1 means block until read len data,\n>0 means block until read len data or timeout.\n\n\nReturns: received data, bytes type.\nAttention, you need to delete the returned object yourself in C++.\n"
                                            },
                                            "args": [
                                                [
                                                    "int",
                                                    "len",
                                                    "-1"
                                                ],
                                                [
                                                    "int",
                                                    "timeout",
                                                    "0"
                                                ]
                                            ],
                                            "ret_type": "Bytes*",
                                            "static": false,
                                            "def": "Bytes *read(int len = -1, int timeout = 0)"
                                        },
                                        "readline": {
                                            "type": "func",
                                            "name": "readline",
                                            "doc": {
                                                "brief": "Read line from uart, that is read until '\\n' or '\\r\\n'.",
                                                "param": {
                                                    "timeout": "unit ms, timeout to receive data, default -1 means block until read '\\n' or '\\r\\n'.\n> 0 means block until read '\\n' or '\\r\\n' or timeout."
                                                },
                                                "return": "received data, bytes type. If timeout will return the current received data despite not read '\\n' or '\\r\\n'.\ne.g. If we want to read b'123\\n', but when we only read b'12', timeout, then return b'12'.",
                                                "maixpy": "maix.peripheral.uart.UART.readline",
                                                "py_doc": "Read line from uart, that is read until '\\n' or '\\r\\n'.\n\nArgs:\n  - timeout: unit ms, timeout to receive data, default -1 means block until read '\\n' or '\\r\\n'.\n> 0 means block until read '\\n' or '\\r\\n' or timeout.\n\n\nReturns: received data, bytes type. If timeout will return the current received data despite not read '\\n' or '\\r\\n'.\ne.g. If we want to read b'123\\n', but when we only read b'12', timeout, then return b'12'.\n"
                                            },
                                            "args": [
                                                [
                                                    "int",
                                                    "timeout",
                                                    "-1"
                                                ]
                                            ],
                                            "ret_type": "Bytes*",
                                            "static": false,
                                            "def": "Bytes *readline(int timeout = -1)"
                                        }
                                    },
                                    "def": "class UART : public comm::CommBase"
                                }
                            },
                            "auto_add": false
                        },
                        "key": {
                            "type": "module",
                            "doc": {
                                "brief": "maix.peripheral.key module"
                            },
                            "members": {
                                "Keys": {
                                    "type": "enum",
                                    "name": "Keys{",
                                    "doc": {
                                        "brief": "Keys enum, id the same as linux input.h(input-event-codes.h)",
                                        "maixpy": "maix.peripheral.key.Keys",
                                        "py_doc": "Keys enum, id the same as linux input.h(input-event-codes.h)"
                                    },
                                    "values": [
                                        [
                                            "KEY_NONE",
                                            "0x000",
                                            ""
                                        ],
                                        [
                                            "KEY_ESC",
                                            "0x001",
                                            ""
                                        ],
                                        [
                                            "KEY_OK",
                                            "0x160",
                                            ""
                                        ],
                                        [
                                            "KEY_OPTION",
                                            "0x165",
                                            ""
                                        ],
                                        [
                                            "KEY_NEXT",
                                            "0x197",
                                            ""
                                        ],
                                        [
                                            "KEY_PREV",
                                            "0x19c",
                                            ""
                                        ]
                                    ],
                                    "def": "enum Keys{\n        KEY_NONE   = 0x000,\n        KEY_ESC    = 0x001,\n        KEY_OK     = 0x160,\n        KEY_OPTION = 0x165,\n        KEY_NEXT   = 0x197,\n        KEY_PREV   = 0x19c\n    }"
                                },
                                "State": {
                                    "type": "enum",
                                    "name": "State{",
                                    "doc": {
                                        "brief": "Key state enum",
                                        "maixpy": "maix.peripheral.key.State",
                                        "py_doc": "Key state enum"
                                    },
                                    "values": [
                                        [
                                            "KEY_RELEASED",
                                            "0",
                                            ""
                                        ],
                                        [
                                            "KEY_PRESSED",
                                            "1",
                                            ""
                                        ]
                                    ],
                                    "def": "enum State{\n        KEY_RELEASED  = 0,\n        KEY_PRESSED   = 1,\n    }"
                                },
                                "Key": {
                                    "type": "class",
                                    "name": "Key",
                                    "doc": {
                                        "brief": "Key input class",
                                        "maixpy": "maix.peripheral.key.Key",
                                        "py_doc": "Key input class"
                                    },
                                    "members": {
                                        "__init__": {
                                            "type": "func",
                                            "name": "Key",
                                            "doc": {
                                                "brief": "Key Device constructor",
                                                "param": {
                                                    "callback": "When key triggered and callback is not empty(empty In MaixPy is None, in C++ is nullptr),\ncallback will be called with args key(key.Keys) and value(key.State).\nIf set to null, you can get key value by read() function.\nThis callback called in a standalone thread, so you can block a while in callback, and you should be carefully when operate shared data.",
                                                    "open": "auto open device in constructor, if false, you need call open() to open device"
                                                },
                                                "maixpy": "maix.peripheral.key.Key.__init__",
                                                "maixcdk": "maix.peripheral.key.Key.Key",
                                                "py_doc": "Key Device constructor\n\nArgs:\n  - callback: When key triggered and callback is not empty(empty In MaixPy is None, in C++ is nullptr),\ncallback will be called with args key(key.Keys) and value(key.State).\nIf set to null, you can get key value by read() function.\nThis callback called in a standalone thread, so you can block a while in callback, and you should be carefully when operate shared data.\n  - open: auto open device in constructor, if false, you need call open() to open device\n"
                                            },
                                            "args": [
                                                [
                                                    "std::function<void(int, int)>",
                                                    "callback",
                                                    "nullptr"
                                                ],
                                                [
                                                    "bool",
                                                    "open",
                                                    "true"
                                                ]
                                            ],
                                            "ret_type": null,
                                            "static": false,
                                            "def": "Key(std::function<void(int, int)> callback = nullptr, bool open = true)"
                                        },
                                        "open": {
                                            "type": "func",
                                            "name": "open",
                                            "doc": {
                                                "brief": "Open(Initialize) key device, if already opened, will close first and then open.",
                                                "return": "err::Err type, err.Err.ERR_NONE means success",
                                                "maixpy": "maix.peripheral.key.Key.open",
                                                "py_doc": "Open(Initialize) key device, if already opened, will close first and then open.\n\nReturns: err::Err type, err.Err.ERR_NONE means success\n"
                                            },
                                            "args": [],
                                            "ret_type": "err::Err",
                                            "static": false,
                                            "def": "err::Err open()"
                                        },
                                        "close": {
                                            "type": "func",
                                            "name": "close",
                                            "doc": {
                                                "brief": "Close key device",
                                                "return": "err::Err type, err.Err.ERR_NONE means success",
                                                "maixpy": "maix.peripheral.key.Key.close",
                                                "py_doc": "Close key device\n\nReturns: err::Err type, err.Err.ERR_NONE means success\n"
                                            },
                                            "args": [],
                                            "ret_type": "err::Err",
                                            "static": false,
                                            "def": "err::Err close()"
                                        },
                                        "is_opened": {
                                            "type": "func",
                                            "name": "is_opened",
                                            "doc": {
                                                "brief": "Check key device is opened",
                                                "return": "bool type, true means opened, false means closed",
                                                "maixpy": "maix.peripheral.key.Key.is_opened",
                                                "py_doc": "Check key device is opened\n\nReturns: bool type, true means opened, false means closed\n"
                                            },
                                            "args": [],
                                            "ret_type": "bool",
                                            "static": false,
                                            "def": "bool is_opened()"
                                        },
                                        "read": {
                                            "type": "func",
                                            "name": "read",
                                            "doc": {
                                                "brief": "Read key input, and return key and value, if callback is set, DO NOT call this function manually.",
                                                "return": "list type, first is key(maix.key.Keys), second is value(maix.key.State), if no key input, return [0, 0]",
                                                "throw": "If read failed, will throw maix.err.Exception.",
                                                "maixpy": "maix.peripheral.key.Key.read",
                                                "py_doc": "Read key input, and return key and value, if callback is set, DO NOT call this function manually.\n\nReturns: list type, first is key(maix.key.Keys), second is value(maix.key.State), if no key input, return [0, 0]\n"
                                            },
                                            "args": [],
                                            "ret_type": "std::pair<int, int>",
                                            "static": false,
                                            "def": "std::pair<int, int> read()"
                                        }
                                    },
                                    "def": "class Key"
                                },
                                "add_default_listener": {
                                    "type": "func",
                                    "name": "add_default_listener",
                                    "doc": {
                                        "brief": "Add default listener, if you want to exit app when press ok button, you can just call this function.\\nThis function is auto called in MaixPy' startup code, so you don't need to call it in MaixPy.\\nCreate Key object will auto call rm_default_listener() to cancel the default ok button function.\\nWhen ok button pressed, a SIGINT signal will be raise and call app.set_exit_flag(True).",
                                        "maixpy": "maix.peripheral.key.add_default_listener",
                                        "py_doc": "Add default listener, if you want to exit app when press ok button, you can just call this function.\nThis function is auto called in MaixPy' startup code, so you don't need to call it in MaixPy.\nCreate Key object will auto call rm_default_listener() to cancel the default ok button function.\nWhen ok button pressed, a SIGINT signal will be raise and call app.set_exit_flag(True)."
                                    },
                                    "args": [],
                                    "ret_type": "void",
                                    "static": false,
                                    "def": "void add_default_listener()"
                                },
                                "rm_default_listener": {
                                    "type": "func",
                                    "name": "rm_default_listener",
                                    "doc": {
                                        "brief": "Remove default listener, if you want to cancel the default ok button function(exit app), you can just call this function.",
                                        "maixpy": "maix.peripheral.key.rm_default_listener",
                                        "py_doc": "Remove default listener, if you want to cancel the default ok button function(exit app), you can just call this function."
                                    },
                                    "args": [],
                                    "ret_type": "void",
                                    "static": false,
                                    "def": "void rm_default_listener()"
                                }
                            },
                            "auto_add": true
                        },
                        "i2c": {
                            "type": "module",
                            "doc": {
                                "brief": "maix.peripheral.i2c module"
                            },
                            "members": {
                                "SEVEN_BIT": {
                                    "type": "var",
                                    "name": "",
                                    "doc": {
                                        "brief": "7-bit address mode",
                                        "maixpy": "maix.peripheral.i2c.SEVEN_BIT",
                                        "py_doc": "7-bit address mode"
                                    },
                                    "value": "0x1",
                                    "static": false,
                                    "readonly": true,
                                    "def": "const int SEVEN_BIT = 0x1"
                                },
                                "TEN_BIT": {
                                    "type": "var",
                                    "name": "",
                                    "doc": {
                                        "brief": "10-bit address mode",
                                        "maixpy": "maix.peripheral.i2c.TEN_BIT",
                                        "py_doc": "10-bit address mode"
                                    },
                                    "value": "0x2",
                                    "static": false,
                                    "readonly": true,
                                    "def": "const int TEN_BIT = 0x2"
                                },
                                "MASTER": {
                                    "type": "var",
                                    "name": "",
                                    "doc": {
                                        "brief": "master mode",
                                        "maixpy": "maix.peripheral.i2c.MASTER",
                                        "py_doc": "master mode"
                                    },
                                    "value": "0x4",
                                    "static": false,
                                    "readonly": true,
                                    "def": "const int MASTER = 0x4"
                                },
                                "SLAVE": {
                                    "type": "var",
                                    "name": "",
                                    "doc": {
                                        "brief": "slave mode",
                                        "maixpy": "maix.peripheral.i2c.SLAVE",
                                        "py_doc": "slave mode"
                                    },
                                    "value": "0x8",
                                    "static": false,
                                    "readonly": true,
                                    "def": "const int SLAVE = 0x8"
                                },
                                "STANDARD_SPEED": {
                                    "type": "var",
                                    "name": "",
                                    "doc": {
                                        "brief": "standard speed mode",
                                        "maixpy": "maix.peripheral.i2c.STANDARD_SPEED",
                                        "py_doc": "standard speed mode"
                                    },
                                    "value": "0x10",
                                    "static": false,
                                    "readonly": true,
                                    "def": "const int STANDARD_SPEED = 0x10"
                                },
                                "FAST_SPEED": {
                                    "type": "var",
                                    "name": "",
                                    "doc": {
                                        "brief": "fast speed mode",
                                        "maixpy": "maix.peripheral.i2c.FAST_SPEED",
                                        "py_doc": "fast speed mode"
                                    },
                                    "value": "0x20",
                                    "static": false,
                                    "readonly": true,
                                    "def": "const int FAST_SPEED = 0x20"
                                },
                                "I2C": {
                                    "type": "class",
                                    "name": "I2C",
                                    "doc": {
                                        "brief": "Peripheral i2c class",
                                        "maixpy": "maix.peripheral.i2c.I2C",
                                        "py_doc": "Peripheral i2c class"
                                    },
                                    "members": {
                                        "__init__": {
                                            "type": "func",
                                            "name": "I2C",
                                            "doc": {
                                                "brief": "I2C Device constructor\\nthis constructor will be export to MaixPy as _maix.example.Example.__init__",
                                                "param": {
                                                    "id": "direction [in], i2c index, int type",
                                                    "scl": "direction [in], sck pin of i2c, int type",
                                                    "sda": "direction [in], sda pin of i2c, int type",
                                                    "freq": "direction [in], i2c clock, int type\noption:\nin the i2c.STANDARD_SPEED mode, range is [0, 100000]\nin the i2c.FAST_SPEED mode, range is [0, 400000]\ndefault clock is -1, means use max clock",
                                                    "mode": "direction [in], mode of i2c, int type.\noption:\nmode = i2c.MASTER, means master mode\nmode = i2c.SLAVE, means slave mode",
                                                    "bit": "direction [in], address length of i2c, int type.\noption:\nbit = i2c.SEVEN_BIT, means 7-bit address mode\nbit = i2c.TEN_BIT, means 10-bit address mode",
                                                    "speed_mode": "direction [in], speed mode of i2c, int type.\noption:\nspeed_mode = i2c.STANDARD_SPEED, means standard speed mode, up to 100kbit/s\nspeed_mode = i2c.FAST_SPEED, means fast speed mode, up to 400kbit/s"
                                                },
                                                "maixpy": "maix.peripheral.i2c.I2C.__init__",
                                                "py_doc": "I2C Device constructor\nthis constructor will be export to MaixPy as _maix.example.Example.__init__\n\nArgs:\n  - id: direction [in], i2c index, int type\n  - scl: direction [in], sck pin of i2c, int type\n  - sda: direction [in], sda pin of i2c, int type\n  - freq: direction [in], i2c clock, int type\noption:\nin the i2c.STANDARD_SPEED mode, range is [0, 100000]\nin the i2c.FAST_SPEED mode, range is [0, 400000]\ndefault clock is -1, means use max clock\n  - mode: direction [in], mode of i2c, int type.\noption:\nmode = i2c.MASTER, means master mode\nmode = i2c.SLAVE, means slave mode\n  - bit: direction [in], address length of i2c, int type.\noption:\nbit = i2c.SEVEN_BIT, means 7-bit address mode\nbit = i2c.TEN_BIT, means 10-bit address mode\n  - speed_mode: direction [in], speed mode of i2c, int type.\noption:\nspeed_mode = i2c.STANDARD_SPEED, means standard speed mode, up to 100kbit/s\nspeed_mode = i2c.FAST_SPEED, means fast speed mode, up to 400kbit/s\n"
                                            },
                                            "args": [
                                                [
                                                    "int",
                                                    "id",
                                                    null
                                                ],
                                                [
                                                    "int",
                                                    "scl",
                                                    null
                                                ],
                                                [
                                                    "int",
                                                    "sda",
                                                    null
                                                ],
                                                [
                                                    "int",
                                                    "freq",
                                                    "-1"
                                                ],
                                                [
                                                    "int",
                                                    "mode",
                                                    "-1"
                                                ],
                                                [
                                                    "int",
                                                    "bit",
                                                    "-1"
                                                ],
                                                [
                                                    "int",
                                                    "speed_mode",
                                                    "-1"
                                                ]
                                            ],
                                            "ret_type": null,
                                            "static": false,
                                            "def": "I2C(int id, int scl, int sda, int freq = -1, int mode = -1, int bit = -1, int speed_mode = -1)"
                                        },
                                        "writeto": {
                                            "type": "func",
                                            "name": "writeto",
                                            "doc": {
                                                "brief": "write data to i2c slave",
                                                "param": {
                                                    "addr": "direction [in], i2c slave address, int type",
                                                    "data": "direction [in], data to write, vector<unsigned char> type.\nNote: The member range of the list is [0,255]"
                                                },
                                                "return": "if success, return 0, else return -1",
                                                "maixpy": "maix.peripheral.i2c.I2C.writeto",
                                                "py_doc": "write data to i2c slave\n\nArgs:\n  - addr: direction [in], i2c slave address, int type\n  - data: direction [in], data to write, vector<unsigned char> type.\nNote: The member range of the list is [0,255]\n\n\nReturns: if success, return 0, else return -1\n"
                                            },
                                            "args": [
                                                [
                                                    "int",
                                                    "addr",
                                                    null
                                                ],
                                                [
                                                    "std::vector<unsigned char>",
                                                    "data",
                                                    null
                                                ]
                                            ],
                                            "ret_type": "int",
                                            "static": false,
                                            "def": "int writeto(int addr, std::vector<unsigned char> data)"
                                        },
                                        "readfrom": {
                                            "type": "func",
                                            "name": "readfrom",
                                            "doc": {
                                                "brief": "read data from i2c slave",
                                                "param": {
                                                    "addr": "direction [in], i2c slave address, int type",
                                                    "len": "direction [in], data length to read, int type"
                                                },
                                                "return": "the list of data read from i2c slave, vector<unsigned char> type",
                                                "maixpy": "maix.peripheral.i2c.I2C.readfrom",
                                                "py_doc": "read data from i2c slave\n\nArgs:\n  - addr: direction [in], i2c slave address, int type\n  - len: direction [in], data length to read, int type\n\n\nReturns: the list of data read from i2c slave, vector<unsigned char> type\n"
                                            },
                                            "args": [
                                                [
                                                    "int",
                                                    "addr",
                                                    null
                                                ],
                                                [
                                                    "int",
                                                    "len",
                                                    null
                                                ]
                                            ],
                                            "ret_type": "std::vector<unsigned char>",
                                            "static": false,
                                            "def": "std::vector<unsigned char> readfrom(int addr, int len)"
                                        },
                                        "scan": {
                                            "type": "func",
                                            "name": "scan",
                                            "doc": {
                                                "brief": "scan all i2c address",
                                                "return": "the list of i2c address, vector<int> type",
                                                "maixpy": "maix.peripheral.i2c.I2C.scan",
                                                "py_doc": "scan all i2c address\n\nReturns: the list of i2c address, vector<int> type\n"
                                            },
                                            "args": [],
                                            "ret_type": "std::vector<int>",
                                            "static": false,
                                            "def": "std::vector<int> scan()"
                                        },
                                        "writeto_mem": {
                                            "type": "func",
                                            "name": "writeto_mem",
                                            "doc": {
                                                "brief": "write data to i2c slave",
                                                "param": {
                                                    "addr": "direction [in], i2c slave address, int type",
                                                    "start_addr": "direction [in], start address of i2c slave, int type",
                                                    "data": "direction [in], data to write, vector<unsigned char> type.\nNote: The member range of the list is [0,255]"
                                                },
                                                "return": "if success, return 0, else return -1",
                                                "maixpy": "maix.peripheral.i2c.I2C.writeto_mem",
                                                "py_doc": "write data to i2c slave\n\nArgs:\n  - addr: direction [in], i2c slave address, int type\n  - start_addr: direction [in], start address of i2c slave, int type\n  - data: direction [in], data to write, vector<unsigned char> type.\nNote: The member range of the list is [0,255]\n\n\nReturns: if success, return 0, else return -1\n"
                                            },
                                            "args": [
                                                [
                                                    "int",
                                                    "addr",
                                                    null
                                                ],
                                                [
                                                    "int",
                                                    "start_addr",
                                                    null
                                                ],
                                                [
                                                    "std::vector<unsigned char>",
                                                    "data",
                                                    null
                                                ]
                                            ],
                                            "ret_type": "int",
                                            "static": false,
                                            "def": "int writeto_mem(int addr, int start_addr, std::vector<unsigned char> data)"
                                        },
                                        "readfrom_mem": {
                                            "type": "func",
                                            "name": "readfrom_mem",
                                            "doc": {
                                                "brief": "read data from i2c slave",
                                                "param": {
                                                    "addr": "direction [in], i2c slave address, int type",
                                                    "start_addr": "direction [in], start address of i2c slave, int type",
                                                    "len": "direction [in], data length to read, int type"
                                                },
                                                "return": "the list of data read from i2c slave, vector<unsigned char> type",
                                                "maixpy": "maix.peripheral.i2c.I2C.readfrom_mem",
                                                "py_doc": "read data from i2c slave\n\nArgs:\n  - addr: direction [in], i2c slave address, int type\n  - start_addr: direction [in], start address of i2c slave, int type\n  - len: direction [in], data length to read, int type\n\n\nReturns: the list of data read from i2c slave, vector<unsigned char> type\n"
                                            },
                                            "args": [
                                                [
                                                    "int",
                                                    "addr",
                                                    null
                                                ],
                                                [
                                                    "int",
                                                    "start_addr",
                                                    null
                                                ],
                                                [
                                                    "int",
                                                    "len",
                                                    null
                                                ]
                                            ],
                                            "ret_type": "std::vector<unsigned char>",
                                            "static": false,
                                            "def": "std::vector<unsigned char> readfrom_mem(int addr, int start_addr, int len)"
                                        }
                                    },
                                    "def": "class I2C"
                                }
                            },
                            "auto_add": true
                        },
                        "adc": {
                            "type": "module",
                            "doc": {
                                "brief": "maix.peripheral.adc module"
                            },
                            "members": {
                                "RES_BIT_8": {
                                    "type": "var",
                                    "name": "",
                                    "doc": {
                                        "brief": "8-bit resolution, supported by the actual hardware",
                                        "maixpy": "maix.peripheral.adc.RES_BIT_8",
                                        "py_doc": "8-bit resolution, supported by the actual hardware"
                                    },
                                    "value": "0x1",
                                    "static": false,
                                    "readonly": true,
                                    "def": "const int RES_BIT_8 = 0x1"
                                },
                                "RES_BIT_10": {
                                    "type": "var",
                                    "name": "",
                                    "doc": {
                                        "brief": "10-bit resolution, supported by the actual hardware",
                                        "maixpy": "maix.peripheral.adc.RES_BIT_10",
                                        "py_doc": "10-bit resolution, supported by the actual hardware"
                                    },
                                    "value": "0x2",
                                    "static": false,
                                    "readonly": true,
                                    "def": "const int RES_BIT_10 = 0x2"
                                },
                                "RES_BIT_12": {
                                    "type": "var",
                                    "name": "",
                                    "doc": {
                                        "brief": "12-bit resolution, supported by the actual hardware",
                                        "maixpy": "maix.peripheral.adc.RES_BIT_12",
                                        "py_doc": "12-bit resolution, supported by the actual hardware"
                                    },
                                    "value": "0x3",
                                    "static": false,
                                    "readonly": true,
                                    "def": "const int RES_BIT_12 = 0x3"
                                },
                                "RES_BIT_16": {
                                    "type": "var",
                                    "name": "",
                                    "doc": {
                                        "brief": "16-bit resolution, supported by the actual hardware",
                                        "maixpy": "maix.peripheral.adc.RES_BIT_16",
                                        "py_doc": "16-bit resolution, supported by the actual hardware"
                                    },
                                    "value": "0x4",
                                    "static": false,
                                    "readonly": true,
                                    "def": "const int RES_BIT_16 = 0x4"
                                },
                                "ADC": {
                                    "type": "class",
                                    "name": "ADC",
                                    "doc": {
                                        "brief": "Peripheral adc class",
                                        "maixpy": "maix.peripheral.adc.ADC",
                                        "py_doc": "Peripheral adc class"
                                    },
                                    "members": {
                                        "__init__": {
                                            "type": "func",
                                            "name": "ADC",
                                            "doc": {
                                                "brief": "ADC constructor",
                                                "param": {
                                                    "pin": "direction [in], adc pin, int type",
                                                    "resolution": "direction [in], adc resolution. default is -1, means use default resolution\noption:\nresolution = adc.RES_BIT_8, means 8-bit resolution\nresolution = adc.RES_BIT_10, means 10-bit resolution\nresolution = adc.RES_BIT_12, means 12-bit resolution\nresolution = adc.RES_BIT_16, means 16-bit resolution\nthe default resolution is determined by actual hardware.",
                                                    "vref": "direction [in], adc refer voltage. default is -1, means use default refer voltage.\nthe default vref is determined by actual hardware. range: [0.0, 10.0]"
                                                },
                                                "maixpy": "maix.peripheral.adc.ADC.__init__",
                                                "py_doc": "ADC constructor\n\nArgs:\n  - pin: direction [in], adc pin, int type\n  - resolution: direction [in], adc resolution. default is -1, means use default resolution\noption:\nresolution = adc.RES_BIT_8, means 8-bit resolution\nresolution = adc.RES_BIT_10, means 10-bit resolution\nresolution = adc.RES_BIT_12, means 12-bit resolution\nresolution = adc.RES_BIT_16, means 16-bit resolution\nthe default resolution is determined by actual hardware.\n  - vref: direction [in], adc refer voltage. default is -1, means use default refer voltage.\nthe default vref is determined by actual hardware. range: [0.0, 10.0]\n"
                                            },
                                            "args": [
                                                [
                                                    "int",
                                                    "pin",
                                                    null
                                                ],
                                                [
                                                    "int",
                                                    "resolution",
                                                    "-1"
                                                ],
                                                [
                                                    "float",
                                                    "vref",
                                                    "-1"
                                                ]
                                            ],
                                            "ret_type": null,
                                            "static": false,
                                            "def": "ADC(int pin, int resolution = -1, float vref = -1)"
                                        },
                                        "read": {
                                            "type": "func",
                                            "name": "read",
                                            "doc": {
                                                "brief": "read adc value",
                                                "return": "adc data, int type\nif resolution is 8-bit, return value range is [0, 255]\nif resolution is 10-bit, return value range is [0, 1023]\nif resolution is 12-bit, return value range is [0, 4095]\nif resolution is 16-bit, return value range is [0, 65535]",
                                                "maixpy": "maix.peripheral.adc.ADC.read",
                                                "py_doc": "read adc value\n\nReturns: adc data, int type\nif resolution is 8-bit, return value range is [0, 255]\nif resolution is 10-bit, return value range is [0, 1023]\nif resolution is 12-bit, return value range is [0, 4095]\nif resolution is 16-bit, return value range is [0, 65535]\n"
                                            },
                                            "args": [],
                                            "ret_type": "int",
                                            "static": false,
                                            "def": "int read()"
                                        },
                                        "read_vol": {
                                            "type": "func",
                                            "name": "read_vol",
                                            "doc": {
                                                "brief": "read adc voltage",
                                                "return": "adc voltage, float type\u3002the range is [0.0, vref]",
                                                "maixpy": "maix.peripheral.adc.ADC.read_vol",
                                                "py_doc": "read adc voltage\n\nReturns: adc voltage, float type\u3002the range is [0.0, vref]\n"
                                            },
                                            "args": [],
                                            "ret_type": "float",
                                            "static": false,
                                            "def": "float read_vol()"
                                        }
                                    },
                                    "def": "class ADC"
                                }
                            },
                            "auto_add": true
                        }
                    },
                    "auto_add": true
                },
                "touchscreen": {
                    "type": "module",
                    "doc": {
                        "brief": "maix.touchscreen module"
                    },
                    "members": {
                        "TouchScreen": {
                            "type": "class",
                            "name": "TouchScreen",
                            "doc": {
                                "brief": "TouchScreen class",
                                "maixpy": "maix.touchscreen.TouchScreen",
                                "py_doc": "TouchScreen class"
                            },
                            "members": {
                                "__init__": {
                                    "type": "func",
                                    "name": "TouchScreen",
                                    "doc": {
                                        "brief": "Construct a new TouchScreen object",
                                        "param": {
                                            "device": "touchscreen device path, you can get devices by list_devices method, by default(value is NULL(None in MaixPy)) means the first device",
                                            "open": "If true, touchscreen will automatically call open() after creation. default is true."
                                        },
                                        "maixpy": "maix.touchscreen.TouchScreen.__init__",
                                        "maixcdk": "maix.touchscreen.TouchScreen.TouchScreen",
                                        "py_doc": "Construct a new TouchScreen object\n\nArgs:\n  - device: touchscreen device path, you can get devices by list_devices method, by default(value is NULL(None in MaixPy)) means the first device\n  - open: If true, touchscreen will automatically call open() after creation. default is true.\n"
                                    },
                                    "args": [
                                        [
                                            "const std::string &",
                                            "device",
                                            "\"\""
                                        ],
                                        [
                                            "bool",
                                            "open",
                                            "true"
                                        ]
                                    ],
                                    "ret_type": null,
                                    "static": false,
                                    "def": "TouchScreen(const std::string &device = \"\", bool open = true)"
                                },
                                "open": {
                                    "type": "func",
                                    "name": "open",
                                    "doc": {
                                        "brief": "open touchscreen device",
                                        "return": "error code, err::ERR_NONE means success, others means failed",
                                        "maixpy": "maix.touchscreen.TouchScreen.open",
                                        "py_doc": "open touchscreen device\n\nReturns: error code, err::ERR_NONE means success, others means failed\n"
                                    },
                                    "args": [],
                                    "ret_type": "err::Err",
                                    "static": false,
                                    "def": "err::Err open()"
                                },
                                "close": {
                                    "type": "func",
                                    "name": "close",
                                    "doc": {
                                        "brief": "close touchscreen device",
                                        "return": "error code, err::ERR_NONE means success, others means failed",
                                        "maixpy": "maix.touchscreen.TouchScreen.close",
                                        "py_doc": "close touchscreen device\n\nReturns: error code, err::ERR_NONE means success, others means failed\n"
                                    },
                                    "args": [],
                                    "ret_type": "err::Err",
                                    "static": false,
                                    "def": "err::Err close()"
                                },
                                "read": {
                                    "type": "func",
                                    "name": "read",
                                    "doc": {
                                        "brief": "read touchscreen device",
                                        "attention": "This method will discard same event in buffer, that is:\nif too many move event in buffer when call this method, it will only return the last one,\nand if read pressed or released event, it will return immediately.",
                                        "return": "Returns a list include x, y, pressed state",
                                        "maixpy": "maix.touchscreen.TouchScreen.read",
                                        "py_doc": "read touchscreen device\n\nReturns: Returns a list include x, y, pressed state\n"
                                    },
                                    "args": [],
                                    "ret_type": "std::vector<int>",
                                    "static": false,
                                    "def": "std::vector<int> read()",
                                    "overload": [
                                        {
                                            "type": "func",
                                            "name": "read0",
                                            "doc": {
                                                "brief": "read touchscreen device",
                                                "attention": "This method will return immediately if have event, so it's better to use available() to check if have more event in buffer,\nor too much event in buffer when your program call this read() interval is too long will make your program slow.",
                                                "return": "Returns a list include x, y, pressed state",
                                                "maixpy": "maix.touchscreen.TouchScreen.read",
                                                "py_doc": "read touchscreen device\n\nReturns: Returns a list include x, y, pressed state\n"
                                            },
                                            "args": [],
                                            "ret_type": "std::vector<int>",
                                            "static": false,
                                            "def": "std::vector<int> read0()"
                                        }
                                    ]
                                },
                                "available": {
                                    "type": "func",
                                    "name": "available",
                                    "doc": {
                                        "brief": "If we need to read from touchscreen, for event driven touchscreen means have event or not",
                                        "param": {
                                            "timeout": "-1 means block, 0 means no block, >0 means timeout, default is 0, unit is ms."
                                        },
                                        "return": "true if need to read(have event), false if not",
                                        "maixpy": "maix.touchscreen.TouchScreen.available",
                                        "py_doc": "If we need to read from touchscreen, for event driven touchscreen means have event or not\n\nArgs:\n  - timeout: -1 means block, 0 means no block, >0 means timeout, default is 0, unit is ms.\n\n\nReturns: true if need to read(have event), false if not\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "timeout",
                                            "0"
                                        ]
                                    ],
                                    "ret_type": "bool",
                                    "static": false,
                                    "def": "bool available(int timeout = 0)"
                                },
                                "is_opened": {
                                    "type": "func",
                                    "name": "is_opened",
                                    "doc": {
                                        "brief": "Check if touchscreen is opened",
                                        "return": "true if touchscreen is opened, false if not",
                                        "maixpy": "maix.touchscreen.TouchScreen.is_opened",
                                        "py_doc": "Check if touchscreen is opened\n\nReturns: true if touchscreen is opened, false if not\n"
                                    },
                                    "args": [],
                                    "ret_type": "bool",
                                    "static": false,
                                    "def": "bool is_opened()"
                                }
                            },
                            "def": "class TouchScreen"
                        }
                    },
                    "auto_add": true
                }
            }
        }
    }
}